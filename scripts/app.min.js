function getZoneNumber(lat,lon){lat=parseFloat(lat),lon=parseFloat(lon),(lon>360||-180>lon||lat>90||-90>lat)&&alert("Bad input. lat: "+lat+" lon: "+lon);var lonTemp=lon+180-360*parseInt((lon+180)/360)-180,zoneNumber=parseInt((lonTemp+180)/6)+1;return lat>=56&&64>lat&&lonTemp>=3&&12>lonTemp&&(zoneNumber=32),lat>=72&&84>lat&&(lonTemp>=0&&9>lonTemp?zoneNumber=31:lonTemp>=9&&21>lonTemp?zoneNumber=33:lonTemp>=21&&33>lonTemp?zoneNumber=35:lonTemp>=33&&42>lonTemp&&(zoneNumber=37)),zoneNumber}function LLtoUTM(lat,lon,utmcoords){return lat=parseFloat(lat),lon=parseFloat(lon),lat>84||-80>lat?UNDEFINED_STR:((lon>360||-180>lon||lat>90||-90>lat)&&alert("Bad input. lat: "+lat+" lon: "+lon),lonTemp=lon+180-360*parseInt((lon+180)/360)-180,latRad=lat*DEG_2_RAD,lonRad=lonTemp*DEG_2_RAD,zoneNumber=getZoneNumber(lat,lon),lonOrigin=6*(zoneNumber-1)-180+3,lonOriginRad=lonOrigin*DEG_2_RAD,UTMZone=zoneNumber+""+UTMLetterDesignator(lat)+" ",N=EQUATORIAL_RADIUS/Math.sqrt(1-ECC_SQUARED*Math.sin(latRad)*Math.sin(latRad)),T=Math.tan(latRad)*Math.tan(latRad),C=ECC_PRIME_SQUARED*Math.cos(latRad)*Math.cos(latRad),A=Math.cos(latRad)*(lonRad-lonOriginRad),M=EQUATORIAL_RADIUS*((1-ECC_SQUARED/4-3*(ECC_SQUARED*ECC_SQUARED)/64-5*(ECC_SQUARED*ECC_SQUARED*ECC_SQUARED)/256)*latRad-(3*ECC_SQUARED/8+3*ECC_SQUARED*ECC_SQUARED/32+45*ECC_SQUARED*ECC_SQUARED*ECC_SQUARED/1024)*Math.sin(2*latRad)+(15*ECC_SQUARED*ECC_SQUARED/256+45*ECC_SQUARED*ECC_SQUARED*ECC_SQUARED/1024)*Math.sin(4*latRad)-35*ECC_SQUARED*ECC_SQUARED*ECC_SQUARED/3072*Math.sin(6*latRad)),UTMEasting=k0*N*(A+(1-T+C)*(A*A*A)/6+(5-18*T+T*T+72*C-58*ECC_PRIME_SQUARED)*(A*A*A*A*A)/120)+EASTING_OFFSET,UTMNorthing=k0*(M+N*Math.tan(latRad)*(A*A/2+(5-T+9*C+4*C*C)*(A*A*A*A)/24+(61-58*T+T*T+600*C-330*ECC_PRIME_SQUARED)*(A*A*A*A*A*A)/720)),utmcoords[0]=UTMEasting,void(utmcoords[1]=UTMNorthing))}function LLtoUSNG(lat,lon,precision){lat=parseFloat(lat),lon=parseFloat(lon);var coords=new Array(2);LLtoUTM(lat,lon,coords),0>lat&&(UTMNorthing+=NORTHING_OFFSET),USNGLetters=findGridLetters(zoneNumber,UTMNorthing,UTMEasting),USNGNorthing=Math.round(UTMNorthing)%BLOCK_SIZE,USNGEasting=Math.round(UTMEasting)%BLOCK_SIZE,USNGNorthing=Math.floor(USNGNorthing/Math.pow(10,5-precision)),USNGEasting=Math.floor(USNGEasting/Math.pow(10,5-precision));var USNG=UTMZone+USNGLetters+" ";for(i=String(USNGEasting).length;i<precision;i++)USNG+="0";for(USNG+=USNGEasting+" ",i=String(USNGNorthing).length;i<precision;i++)USNG+="0";return USNG+=USNGNorthing}function UTMLetterDesignator(lat){return lat=parseFloat(lat),84>=lat&&lat>=72?letterDesignator="X":72>lat&&lat>=64?letterDesignator="W":64>lat&&lat>=56?letterDesignator="V":56>lat&&lat>=48?letterDesignator="U":48>lat&&lat>=40?letterDesignator="T":40>lat&&lat>=32?letterDesignator="S":32>lat&&lat>=24?letterDesignator="R":24>lat&&lat>=16?letterDesignator="Q":16>lat&&lat>=8?letterDesignator="P":8>lat&&lat>=0?letterDesignator="N":0>lat&&lat>=-8?letterDesignator="M":-8>lat&&lat>=-16?letterDesignator="L":-16>lat&&lat>=-24?letterDesignator="K":-24>lat&&lat>=-32?letterDesignator="J":-32>lat&&lat>=-40?letterDesignator="H":-40>lat&&lat>=-48?letterDesignator="G":-48>lat&&lat>=-56?letterDesignator="F":-56>lat&&lat>=-64?letterDesignator="E":-64>lat&&lat>=-72?letterDesignator="D":-72>lat&&lat>=-80?letterDesignator="C":letterDesignator="Z",letterDesignator}function findSet(zoneNum){switch(zoneNum=parseInt(zoneNum),zoneNum%=6){case 0:return 6;case 1:return 1;case 2:return 2;case 3:return 3;case 4:return 4;case 5:return 5;default:return-1}}function findGridLetters(zoneNum,northing,easting){for(zoneNum=parseInt(zoneNum),northing=parseFloat(northing),easting=parseFloat(easting),row=1,north_1m=Math.round(northing);north_1m>=BLOCK_SIZE;)north_1m-=BLOCK_SIZE,row++;for(row%=GRIDSQUARE_SET_ROW_SIZE,col=0,east_1m=Math.round(easting);east_1m>=BLOCK_SIZE;)east_1m-=BLOCK_SIZE,col++;return col%=GRIDSQUARE_SET_COL_SIZE,lettersHelper(findSet(zoneNum),row,col)}function lettersHelper(set,row,col){switch(0==row?row=GRIDSQUARE_SET_ROW_SIZE-1:row--,0==col?col=GRIDSQUARE_SET_COL_SIZE-1:col--,set){case 1:return l1="ABCDEFGH",l2="ABCDEFGHJKLMNPQRSTUV",l1.charAt(col)+l2.charAt(row);case 2:return l1="JKLMNPQR",l2="FGHJKLMNPQRSTUVABCDE",l1.charAt(col)+l2.charAt(row);case 3:return l1="STUVWXYZ",l2="ABCDEFGHJKLMNPQRSTUV",l1.charAt(col)+l2.charAt(row);case 4:return l1="ABCDEFGH",l2="FGHJKLMNPQRSTUVABCDE",l1.charAt(col)+l2.charAt(row);case 5:return l1="JKLMNPQR",l2="ABCDEFGHJKLMNPQRSTUV",l1.charAt(col)+l2.charAt(row);case 6:return l1="STUVWXYZ",l2="FGHJKLMNPQRSTUVABCDE",l1.charAt(col)+l2.charAt(row)}}function UTMtoLL(UTMNorthing,UTMEasting,UTMZoneNumber,ret){var xUTM=parseFloat(UTMEasting)-EASTING_OFFSET,yUTM=parseFloat(UTMNorthing),zoneNumber=parseInt(UTMZoneNumber),lonOrigin=6*(zoneNumber-1)-180+3,M=yUTM/k0,mu=M/(EQUATORIAL_RADIUS*(1-ECC_SQUARED/4-3*ECC_SQUARED*ECC_SQUARED/64-5*ECC_SQUARED*ECC_SQUARED*ECC_SQUARED/256)),phi1Rad=mu+(3*E1/2-27*E1*E1*E1/32)*Math.sin(2*mu)+(21*E1*E1/16-55*E1*E1*E1*E1/32)*Math.sin(4*mu)+151*E1*E1*E1/96*Math.sin(6*mu),N1=EQUATORIAL_RADIUS/Math.sqrt(1-ECC_SQUARED*Math.sin(phi1Rad)*Math.sin(phi1Rad)),T1=Math.tan(phi1Rad)*Math.tan(phi1Rad),C1=ECC_PRIME_SQUARED*Math.cos(phi1Rad)*Math.cos(phi1Rad),R1=EQUATORIAL_RADIUS*(1-ECC_SQUARED)/Math.pow(1-ECC_SQUARED*Math.sin(phi1Rad)*Math.sin(phi1Rad),1.5),D=xUTM/(N1*k0),lat=phi1Rad-N1*Math.tan(phi1Rad)/R1*(D*D/2-(5+3*T1+10*C1-4*C1*C1-9*ECC_PRIME_SQUARED)*D*D*D*D/24+(61+90*T1+298*C1+45*T1*T1-252*ECC_PRIME_SQUARED-3*C1*C1)*D*D*D*D*D*D/720);lat*=RAD_2_DEG;var lon=(D-(1+2*T1+C1)*D*D*D/6+(5-2*C1+28*T1-3*C1*C1+8*ECC_PRIME_SQUARED+24*T1*T1)*D*D*D*D*D/120)/Math.cos(phi1Rad);lon=lonOrigin+lon*RAD_2_DEG,ret.lat=lat,ret.lon=lon}function USNGtoUTM(zone,lett,sq1,sq2,east,north,ret){var zoneBase=[0,.8,1.7,2.6,3.5,4.4,5.3,6.2,7,7.9],segBase=[0,0,0,2,2,4,4,6,6,6],eSqrs=USNGSqEast.indexOf(sq1),appxEast=1+eSqrs%8,letNorth="NPQRSTUVWX".indexOf(lett);if(zone%2)var nSqrs="ABCDEFGHJKLMNPQRSTUV".indexOf(sq2);else var nSqrs="FGHJKLMNPQRSTUVABCDE".indexOf(sq2);var zoneStart=zoneBase[letNorth],appxNorth=Number(segBase[letNorth])+nSqrs/10;zoneStart>appxNorth&&(appxNorth+=2),ret.N=1e6*appxNorth+Number(north)*Math.pow(10,5-north.length),ret.E=1e5*appxEast+Number(east)*Math.pow(10,5-east.length),ret.zone=zone,ret.letter=lett}function USNGtoLL(usngStr_input,latlon){var usngp=new Object;parseUSNG_str(usngStr_input,usngp);var coords=new Object;USNGtoUTM(usngp.zone,usngp.let,usngp.sq1,usngp.sq2,usngp.east,usngp.north,coords),UTMtoLL(coords.N,coords.E,usngp.zone,coords),latlon[0]=coords.lat,latlon[1]=coords.lon}function parseUSNG_str(usngStr_input,parts){var k,j=0,usngStr=[],usngStr_temp=[];usngStr_temp=usngStr_input.toUpperCase();var regexp=/%20/g;if(usngStr=usngStr_temp.replace(regexp,""),regexp=/ /g,usngStr=usngStr_temp.replace(regexp,""),usngStr.length<7)return alert("This application requires minimum USNG precision of 10,000 meters"),0;parts.zone=10*usngStr.charAt(j++)+1*usngStr.charAt(j++),parts.let=usngStr.charAt(j++),parts.sq1=usngStr.charAt(j++),parts.sq2=usngStr.charAt(j++),parts.precision=(usngStr.length-j)/2,parts.east="",parts.north="";for(var k=0;k<parts.precision;k++)parts.east+=usngStr.charAt(j++);" "==usngStr[j]&&j++;for(var k=0;k<parts.precision;k++)parts.north+=usngStr.charAt(j++)}function isUSNG(inputStr){var strregexp,usngStr=[];usngStr=inputStr.toUpperCase();var regexp=/%20/g;return usngStr=usngStr.replace(regexp,""),regexp=/ /g,usngStr=usngStr.replace(regexp,""),usngStr.length>15?0:(strregexp=new RegExp("^[0-9]{2}[CDEFGHJKLMNPQRSTUVWX]$"),usngStr.match(strregexp)?(alert("Input appears to be a UTM zone...more precision is required to display a correct result."),0):(strregexp=new RegExp("^[0-9]{2}[CDEFGHJKLMNPQRSTUVWX][ABCDEFGHJKLMNPQRSTUVWXYZ][ABCDEFGHJKLMNPQRSTUV]([0-9][0-9]){0,5}"),usngStr.match(strregexp)?usngStr.length<7?(alert(usngStr+" Appears to be a USNG string, but this application requires precision of at least 10,000 meters"),0):usngStr:0))}function LLtoMGRS(lat,lon,precision){var mgrs_str="",usng_str=LLtoUSNG(lat,lon,precision),regexp=/ /g;return mgrs_str=usng_str.replace(regexp,"")}function GUsngtoLL(str){var latlng=[];return USNGtoLL(str,latlng),new GLatLng(latlng[0],latlng[1])}if(!function($){var DateRangePicker=function(element,options,cb){var localeObject,hasOptions="object"==typeof options;this.startDate=moment.utc().startOf("day"),this.endDate=moment.utc().startOf("day"),this.minDate=!1,this.maxDate=!1,this.dateLimit=!1,this.showDropdowns=!1,this.showWeekNumbers=!1,this.timePicker=!1,this.timePickerIncrement=30,this.timePicker12Hour=!0,this.ranges={},this.opens="right",this.buttonClasses=["btn","btn-small"],this.applyClass="btn-info",this.cancelClass="btn-default",this.format="MM/DD/YYYY",this.separator=" - ",this.locale={applyLabel:"Apply",cancelLabel:"Cancel",fromLabel:"From",toLabel:"To",weekLabel:"W",customRangeLabel:"Custom Range",daysOfWeek:moment()._lang._weekdaysMin.slice(),monthNames:moment()._lang._monthsShort.slice(),firstDay:0},this.cb=function(){},this.parentEl="body",this.element=$(element),this.element.hasClass("pull-right")&&(this.opens="left"),this.element.is("input")?this.element.on({click:$.proxy(this.show,this),focus:$.proxy(this.show,this),blur:$.proxy(this.hide,this)}):this.element.on("click",$.proxy(this.show,this)),localeObject=this.locale,hasOptions&&("object"==typeof options.locale&&$.each(localeObject,function(property,value){localeObject[property]=options.locale[property]||value}),options.applyClass&&(this.applyClass=options.applyClass),options.cancelClass&&(this.cancelClass=options.cancelClass),options.onlyShow&&(this.onlyShow=options.onlyShow));var DRPTemplate='<div class="daterangepicker dropdown-menu">'+("start"===this.onlyShow?"":'<div class="calendar left"></div>')+("end"===this.onlyShow?"":'<div class="calendar right"></div>')+'<button class="cancelBtn"> &times; </button></div>';if(this.parentEl=hasOptions&&options.parentEl&&$(options.parentEl)||$(this.parentEl),this.container=$(DRPTemplate).appendTo(this.parentEl),hasOptions){if("string"==typeof options.format&&(this.format=options.format),"string"==typeof options.separator&&(this.separator=options.separator),"string"==typeof options.startDate&&(this.startDate=moment.utc(options.startDate,this.format)),"string"==typeof options.endDate&&(this.endDate=moment.utc(options.endDate,this.format)),"string"==typeof options.minDate&&(this.minDate=moment.utc(options.minDate,this.format)),"string"==typeof options.maxDate&&(this.maxDate=moment.utc(options.maxDate,this.format)),"object"==typeof options.startDate&&(this.startDate=moment.utc(options.startDate)),"object"==typeof options.endDate&&(this.endDate=moment.utc(options.endDate)),"object"==typeof options.minDate&&(this.minDate=moment.utc(options.minDate)),"object"==typeof options.maxDate&&(this.maxDate=moment.utc(options.maxDate)),"object"==typeof options.ranges){for(var range in options.ranges){var start=moment.utc(options.ranges[range][0]),end=moment.utc(options.ranges[range][1]);this.minDate&&start.isBefore(this.minDate)&&(start=moment.utc(this.minDate)),this.maxDate&&end.isAfter(this.maxDate)&&(end=moment.utc(this.maxDate)),this.minDate&&end.isBefore(this.minDate)||this.maxDate&&start.isAfter(this.maxDate)||(this.ranges[range]=[start,end])}var list="<ul>";for(var range in this.ranges)list+="<li>"+range+"</li>";list+="<li>"+this.locale.customRangeLabel+"</li>",list+="</ul>",this.container.find(".ranges").prepend(list)}if("object"==typeof options.dateLimit&&(this.dateLimit=options.dateLimit),"object"==typeof options.locale&&"number"==typeof options.locale.firstDay){this.locale.firstDay=options.locale.firstDay;for(var iterator=options.locale.firstDay;iterator>0;)this.locale.daysOfWeek.push(this.locale.daysOfWeek.shift()),iterator--}"string"==typeof options.opens&&(this.opens=options.opens),"boolean"==typeof options.showWeekNumbers&&(this.showWeekNumbers=options.showWeekNumbers),"string"==typeof options.buttonClasses&&(this.buttonClasses=[options.buttonClasses]),"object"==typeof options.buttonClasses&&(this.buttonClasses=options.buttonClasses),"boolean"==typeof options.showDropdowns&&(this.showDropdowns=options.showDropdowns),"boolean"==typeof options.timePicker&&(this.timePicker=options.timePicker),"number"==typeof options.timePickerIncrement&&(this.timePickerIncrement=options.timePickerIncrement),"boolean"==typeof options.timePicker12Hour&&(this.timePicker12Hour=options.timePicker12Hour)}if(this.timePicker||(this.startDate=this.startDate.startOf("day"),this.endDate=this.endDate.startOf("day")),"right"==this.opens){var left=this.container.find(".calendar.left"),right=this.container.find(".calendar.right");left.removeClass("left").addClass("right"),right.removeClass("right").addClass("left")}"undefined"!=typeof options&&"undefined"!=typeof options.ranges||(this.container.find(".calendar").show(),this.move()),"function"==typeof cb&&(this.cb=cb),this.container.addClass("opens"+this.opens),this.oldStartDate=this.startDate.clone(),this.oldEndDate=this.endDate.clone(),this.leftCalendar={month:moment.utc([this.startDate.year(),this.startDate.month(),1,this.startDate.hour(),this.startDate.minute(),this.startDate.second()]),calendar:[]},this.rightCalendar={month:moment.utc([this.endDate.year(),this.endDate.month(),1,this.endDate.hour(),this.endDate.minute(),this.endDate.second()]),calendar:[]},this.container.on("mousedown",$.proxy(this.mousedown,this)),this.container.find(".calendar").on("click",".prev",$.proxy(this.clickPrev,this)),this.container.find(".calendar").on("click",".next",$.proxy(this.clickNext,this)),this.container.find("button.cancelBtn").on("click",$.proxy(this.clickCancel,this)),this.container.find(".ranges").on("click",".daterangepicker_input",$.proxy(this.showCalendars,this)),this.container.find(".calendar").on("click","td.available",$.proxy(this.clickDate,this)),this.container.find(".calendar").on("mouseenter","td.available",$.proxy(this.enterDate,this)),this.container.find(".calendar").on("mouseleave","td.available",$.proxy(this.updateView,this)),this.container.find(".ranges").on("click","li",$.proxy(this.clickRange,this)),this.container.find(".ranges").on("mouseenter","li",$.proxy(this.enterRange,this)),this.container.find(".ranges").on("mouseleave","li",$.proxy(this.updateView,this)),this.container.find(".calendar").on("change","select.yearselect",$.proxy(this.updateMonthYear,this)),this.container.find(".calendar").on("change","select.monthselect",$.proxy(this.updateMonthYear,this)),this.container.find(".calendar").on("change","select.hourselect",$.proxy(this.updateTime,this)),this.container.find(".calendar").on("change","select.minuteselect",$.proxy(this.updateTime,this)),this.container.find(".calendar").on("change","select.secondselect",$.proxy(this.updateTime,this)),this.container.find(".calendar").on("change","select.ampmselect",$.proxy(this.updateTime,this)),this.updateView(),this.updateCalendars()};DateRangePicker.prototype={constructor:DateRangePicker,mousedown:function(e){e.stopPropagation()},updateView:function(){this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()),this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year())},notify:function(){this.updateView(),this.cb(this.startDate,this.endDate)},clickCancel:function(e){this.hide()},move:function(){var parentOffset={top:this.parentEl.offset().top-(this.parentEl.is("body")?0:this.parentEl.scrollTop()),left:this.parentEl.offset().left-(this.parentEl.is("body")?0:this.parentEl.scrollLeft())};"left"==this.opens?(this.container.css({top:this.element.offset().top+this.element.outerHeight()-parentOffset.top,right:$(window).width()-this.element.offset().left-this.element.outerWidth()-parentOffset.left,left:"auto"}),this.container.offset().left<0&&this.container.css({right:"auto",left:9})):(this.container.css({top:this.element.offset().top-parentOffset.top,left:this.element.offset().left-parentOffset.left+this.element.width(),right:"auto"}),this.container.offset().left+this.container.outerWidth()>$(window).width()&&this.container.css({left:"auto",right:0}))},show:function(e){this.container.show(),this.move(),e&&(e.stopPropagation(),e.preventDefault()),$(document).on("mousedown",$.proxy(this.hide,this)),this.element.trigger("shown",{target:e.target,picker:this})},hide:function(e){this.container.hide(),this.startDate.isSame(this.oldStartDate)&&this.endDate.isSame(this.oldEndDate)||this.notify(),this.oldStartDate=this.startDate.clone(),this.oldEndDate=this.endDate.clone(),$(document).off("mousedown",this.hide),this.element.trigger("hidden",{picker:this})},enterRange:function(e){var label=e.target.innerHTML;if(label==this.locale.customRangeLabel)this.updateView();else{this.ranges[label]}},showCalendars:function(){this.container.find(".calendar").show(),this.move()},clickRange:function(e){var label=e.target.innerHTML;if(label==this.locale.customRangeLabel)this.showCalendars();else{var dates=this.ranges[label],oldEnd=(this.startDate,this.endDate);this.startDate=dates[0],this.endDate=dates[1],!this.timePicker,console.log(oldEnd,dates[1],this.endDate,this.rightCalendar.month),console.log(this.leftCalendar.month,this.rightCalendar.month),this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()).hour(this.startDate.hour()).minute(this.startDate.minute()).second(this.startDate.second()),this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()).hour(this.endDate.hour()).minute(this.endDate.minute()).second(this.endDate.second()),this.updateCalendars(),this.container.find(".calendar").hide(),this.hide()}},clickPrev:function(e){var cal=$(e.target).parents(".calendar");cal.hasClass("left")?this.leftCalendar.month.subtract("month",1):this.rightCalendar.month.subtract("month",1),this.updateCalendars()},clickNext:function(e){var cal=$(e.target).parents(".calendar");cal.hasClass("left")?this.leftCalendar.month.add("month",1):this.rightCalendar.month.add("month",1),this.updateCalendars()},enterDate:function(e){var title=$(e.target).attr("data-title");title.substr(1,1),title.substr(3,1),$(e.target).parents(".calendar")},clickDate:function(e){var title=$(e.target).attr("data-title"),row=title.substr(1,1),col=title.substr(3,1),cal=$(e.target).parents(".calendar");if(cal.hasClass("left")){var startDate=this.leftCalendar.calendar[row][col],endDate=this.endDate;if("object"==typeof this.dateLimit){var maxDate=moment.utc(startDate).add(this.dateLimit).startOf("day");endDate.isAfter(maxDate)&&(endDate=maxDate)}}else{var startDate=this.startDate,endDate=this.rightCalendar.calendar[row][col];if("object"==typeof this.dateLimit){var minDate=moment.utc(endDate).subtract(this.dateLimit).startOf("day");startDate.isBefore(minDate)&&(startDate=minDate)}}cal.find("td").removeClass("active"),startDate.isSame(endDate)||startDate.isBefore(endDate)?($(e.target).addClass("active"),this.startDate=startDate.hour(this.startDate.hour()).minute(this.startDate.minute()).second(this.startDate.second()),this.endDate=endDate.hour(this.endDate.hour()).minute(this.endDate.minute()).second(this.endDate.second())):startDate.isAfter(endDate)&&($(e.target).addClass("active"),this.startDate=startDate.hour(this.startDate.hour()).minute(this.startDate.minute()).second(this.startDate.second()),this.endDate=moment.utc(startDate).endOf("day")),this.leftCalendar.month.month(this.startDate.month()).year(this.startDate.year()),this.rightCalendar.month.month(this.endDate.month()).year(this.endDate.year()),this.updateCalendars(),this.hide()},updateMonthYear:function(e){var isLeft=$(e.target).closest(".calendar").hasClass("left"),cal=this.container.find(".calendar.left");isLeft||(cal=this.container.find(".calendar.right"));var month=parseInt(cal.find(".monthselect").val()),year=cal.find(".yearselect").val();isLeft?this.leftCalendar.month.month(month).year(year):this.rightCalendar.month.month(month).year(year),this.updateCalendars()},updateTime:function(e){var isLeft=$(e.target).closest(".calendar").hasClass("left"),cal=this.container.find(".calendar.left");isLeft||(cal=this.container.find(".calendar.right"));var hour=parseInt(cal.find(".hourselect").val()),minute=parseInt(cal.find(".minuteselect").val()),second=parseInt(cal.find(".secondselect").val());if(this.timePicker12Hour){var ampm=cal.find(".ampmselect").val();"PM"==ampm&&12>hour&&(hour+=12),"AM"==ampm&&12==hour&&(hour=0)}if(isLeft){var start=this.startDate;start.hour(hour),start.minute(minute),start.second(second),this.startDate=start,this.leftCalendar.month.hour(hour).minute(minute).second(second)}else{var end=this.endDate;end.hour(hour),end.minute(minute),end.second(second),this.endDate=end,this.rightCalendar.month.hour(hour).minute(minute).second(second)}this.updateCalendars()},updateCalendars:function(){this.leftCalendar.calendar=this.buildCalendar(this.leftCalendar.month.month(),this.leftCalendar.month.year(),this.leftCalendar.month.hour(),this.leftCalendar.month.minute(),this.leftCalendar.month.second(),"left"),this.rightCalendar.calendar=this.buildCalendar(this.rightCalendar.month.month(),this.rightCalendar.month.year(),this.rightCalendar.month.hour(),this.rightCalendar.month.minute(),this.rightCalendar.month.second(),"right"),this.container.find(".calendar.left").html(this.renderCalendar(this.leftCalendar.calendar,this.startDate,this.minDate,this.maxDate,this.locale.fromLabel)),this.container.find(".calendar.right").html(this.renderCalendar(this.rightCalendar.calendar,this.endDate,this.startDate,this.maxDate,this.locale.toLabel)),this.container.find(".ranges li").removeClass("active");var customRange=!0,i=0;for(var range in this.ranges)this.timePicker?this.startDate.isSame(this.ranges[range][0])&&this.endDate.isSame(this.ranges[range][1])&&(customRange=!1,this.container.find(".ranges li:eq("+i+")").addClass("active")):this.startDate.format("YYYY-MM-DD")==this.ranges[range][0].format("YYYY-MM-DD")&&this.endDate.format("YYYY-MM-DD")==this.ranges[range][1].format("YYYY-MM-DD")&&(customRange=!1,this.container.find(".ranges li:eq("+i+")").addClass("active")),i++;customRange&&this.container.find(".ranges li:last").addClass("active")},buildCalendar:function(month,year,hour,minute,second,side){for(var firstDay=moment.utc([year,month,1]),lastMonth=moment.utc(firstDay).subtract("month",1).month(),lastYear=moment.utc(firstDay).subtract("month",1).year(),daysInLastMonth=moment.utc([lastYear,lastMonth]).daysInMonth(),dayOfWeek=firstDay.day(),calendar=[],i=0;6>i;i++)calendar[i]=[];var startDay=daysInLastMonth-dayOfWeek+this.locale.firstDay+1;startDay>daysInLastMonth&&(startDay-=7),dayOfWeek==this.locale.firstDay&&(startDay=daysInLastMonth-6);for(var curDate=moment.utc([lastYear,lastMonth,startDay,12,minute,second]),i=0,col=0,row=0;42>i;i++,col++,curDate=moment.utc(curDate).add("day",1))i>0&&col%7==0&&(col=0,row++),calendar[row][col]=curDate.clone().hour(hour),curDate.hour(12);return calendar},renderDropdowns:function(selected,minDate,maxDate){for(var currentMonth=selected.month(),monthHtml='<select class="monthselect">',inMinYear=!1,inMaxYear=!1,m=0;12>m;m++)(!inMinYear||m>=minDate.month())&&(!inMaxYear||m<=maxDate.month())&&(monthHtml+="<option value='"+m+"'"+(m===currentMonth?" selected='selected'":"")+">"+this.locale.monthNames[m]+"</option>");monthHtml+="</select>";for(var currentYear=selected.year(),maxYear=maxDate&&maxDate.year()||currentYear+50,minYear=minDate&&minDate.year()||currentYear-50,yearHtml='<select class="yearselect">',y=minYear;maxYear>=y;y++)yearHtml+='<option value="'+y+'"'+(y===currentYear?' selected="selected"':"")+">"+y+"</option>";return yearHtml+="</select>",monthHtml+yearHtml},renderCalendar:function(calendar,selected,minDate,maxDate,label){var html="";html+='<div class="calendar-date">',html+='<table class="table-condensed">',html+="<thead>",html+="<tr>",this.showWeekNumbers&&(html+="<th></th>"),html+=!minDate||minDate.isBefore(calendar[1][1])?'<th class="prev available"><i class="icon-arrow-left icon-lg icon-black-lg-left"></i></th>':"<th></th>";var dateHtml=this.locale.monthNames[calendar[1][1].month()]+calendar[1][1].format(" YYYY");this.showDropdowns&&(dateHtml=this.renderDropdowns(calendar[1][1],minDate,maxDate)),html+='<th colspan="5" style="width: auto">'+dateHtml+"</th>",html+=!maxDate||maxDate.isAfter(calendar[1][1])?'<th class="next available"><i class="icon-arrow-right icon-lg icon-black-lg-right"></i></th>':"<th></th>",html+="</tr>",html+="<tr>",this.showWeekNumbers&&(html+='<th class="week">'+this.locale.weekLabel+"</th>"),$.each(this.locale.daysOfWeek,function(index,dayOfWeek){html+="<th>"+dayOfWeek+"</th>"}),html+="</tr>",html+="</thead>",html+="<tbody>";for(var row=0;6>row;row++){html+="<tr>",this.showWeekNumbers&&(html+='<td class="week">'+calendar[row][0].week()+"</td>");for(var col=0;7>col;col++){var cname="available ";cname+=calendar[row][col].month()==calendar[1][1].month()?"":"off",minDate&&calendar[row][col].isBefore(minDate)||maxDate&&calendar[row][col].isAfter(maxDate)?cname=" off disabled ":calendar[row][col].format("YYYY-MM-DD")==selected.format("YYYY-MM-DD")?(cname+=" active ",calendar[row][col].format("YYYY-MM-DD")==this.startDate.format("YYYY-MM-DD")&&(cname+=" start-date "),calendar[row][col].format("YYYY-MM-DD")==this.endDate.format("YYYY-MM-DD")&&(cname+=" end-date ")):calendar[row][col]>=this.startDate&&calendar[row][col]<=this.endDate&&(cname+=" in-range ",calendar[row][col].isSame(this.startDate)&&(cname+=" start-date "),calendar[row][col].isSame(this.endDate)&&(cname+=" end-date "));var title="r"+row+"c"+col;html+='<td class="'+cname.replace(/\s+/g," ").replace(/^\s?(.*?)\s?$/,"$1")+'" data-title="'+title+'">'+calendar[row][col].date()+"</td>"}html+="</tr>"}if(html+="</tbody>",html+="</table>",html+="</div>",this.timePicker){html+='<div class="calendar-time">',html+='<select class="hourselect">';var start=0,end=23,selected_hour=selected.hour();this.timePicker12Hour&&(start=1,end=12,selected_hour>=12&&(selected_hour-=12),0==selected_hour&&(selected_hour=12));for(var i=start;end>=i;i++){var num=i;10>num&&(num="0"+num),html+=i==selected_hour?'<option value="'+i+'" selected="selected">'+num+"</option>":'<option value="'+i+'">'+num+"</option>"}html+="</select> : ",html+='<select class="minuteselect">';for(var i=0;60>i;i+=this.timePickerIncrement){var num=i;10>num&&(num="0"+num),html+=i==selected.minute()?'<option value="'+i+'" selected="selected">'+num+"</option>":'<option value="'+i+'">'+num+"</option>"}html+="</select> ",html+=' : <select class="secondselect">';for(var i=0;60>i;i+=this.timePickerIncrement){var num=i;10>num&&(num="0"+num),html+=i==selected.second()?'<option value="'+i+'" selected="selected">'+num+"</option>":'<option value="'+i+'">'+num+"</option>"}html+="</select> ",this.timePicker12Hour&&(html+='<select class="ampmselect">',html+=selected.hour()>=12?'<option value="AM">AM</option><option value="PM" selected="selected">PM</option>':'<option value="AM" selected="selected">AM</option><option value="PM">PM</option>',html+="</select>"),html+="</div>"}return html},updateDates:function(options){"object"==typeof options.startDate&&"object"==typeof options.endDate&&(this.startDate=moment.utc(options.startDate,this.format),this.endDate=moment.utc(options.endDate,this.format),console.log("date",options),this.updateView(),this.updateCalendars())}},$.fn.daterangepicker=function(options,cb){return this.each(function(){var el=$(this);if(el.data("daterangepicker")){if(el.data("daterangepicker")&&"object"==typeof options&&void 0!==options.action)switch(options.action){case"update":var dp=el.data("daterangepicker");dp.updateDates(options);break;case"close":var dp=el.data("daterangepicker");dp.hide()}}else el.data("daterangepicker",new DateRangePicker(el,options,cb))}),this}}(window.jQuery),!window.console)var console={log:function(){}};!function(e){e.fn.columns=function(n){var r=[],i=Array.prototype.slice.call(arguments,1);return"string"==typeof n?this.each(function(){var t=e.data(this,"columns");if("undefined"==typeof t||!e.isFunction(t[n]))return e.error('No such method "'+n+'" for Columns');var s=t[n].apply(t,i);void 0!==s&&s!==t&&r.push(s)}):this.each(function(){e.data(this,"columns")||e.data(this,"columns",new t(this,n))}),0===r.length?this.data("columns"):1===r.length?r[0]:r};var t=function(t,n){this.$el=e(t),n&&e.extend(this,n),this.VERSION="2.2.2",this.sort=function(){function n(e,n,r){return n=n?-1:1,function(i,s){return i=i[e],s=s[e],t.test(i)&&t.test(s)?(i=new Date(i),i=Date.parse(i),s=new Date(s),s=Date.parse(s)):"undefined"!=typeof r&&(i=r(i),s=r(s)),s>i?-1*n:i>s?1*n:0}}var e=this,t=/^(Jan|January|Feb|February|Mar|March|Apr|April|May|Jun|June|Jul|July|Aug|August|Sep|September|Oct|October|Nov|November|Dec|December|(0?\d{1})|(10|11|12))(-|\s|\/|\.)(0?[1-9]|(1|2)[0-9]|3(0|1))(-|\s|\/|\.|,\s)(19|20)?\d\d$/i;e.total&&e.sortBy&&"undefined"!=typeof e.data[0][e.sortBy]&&e.data.sort(n(e.sortBy,e.reverse))},this.filter=function(){var t=this,n=t.searchableFields.length;if(t.query){var r=new RegExp(t.query,"gi");t.data=e.grep(t.data,function(e){for(var i=0;n>i;i++)if("string"==typeof e[t.searchableFields[i]]){if(e[t.searchableFields[i]].match(r))return!0}else if("number"==typeof e[t.searchableFields[i]]&&e[t.searchableFields[i]]==t.query)return!0;return!1})}t.total=t.data.length},this.paginate=function(){var e=this;e.pages=Math.ceil(e.data.length/e.size),e.page=e.page<=e.pages?e.page:1,e.setRange(),e.data=e.data.slice(e.range.start-1,e.range.end)},this.condition=function(){var e=this,t=[];if(e.schema){for(var n=e.data.length,r=e.schema.length,i=0;n>i;i++){for(var s=e.data[i],o={},u=0;r>u;u++){var a=e.schema[u];if(a.condition&&!a.condition(s[a.key])){o=null;break}o[a.key]=s[a.key]}o&&t.push(o)}e.data=t}},this.chevron=function(e,t){return Mustache.render(e,t)},this.create=function(){function n(){t.thead=[],e.each(t.schema,function(n,r){if(!r.hide){var i={};-1===e.inArray(r.key,t.sortableFields)?i.notSortable=!0:t.sortBy===r.key?t.reverse?i.sortedDown=!0:i.sortedUp=!0:i.sortable=!0,i.key=r.key,i.header=r.header,t.thead.push(i)}})}function r(n,r){var i=[];return n%2===0?i.push('<tr data-columns-row-id="'+n+'" class="'+t.evenRowClass+'">'):i.push('<tr data-columns-row-id="'+n+'" class="'+t.oddRowClass+'">'),e.each(t.schema,function(e,n){n.hide||(n.template?i.push("<td>"+t.chevron(n.template,r)+"</td>"):i.push("<td>"+r[n.key]+"</td>"))}),i.push("</tr>"),i}function i(){var n=[];n.push("<select>"),e.each(t.showRows,function(e,r){var i='<option value="'+r+'"';r===t.size&&(i+='selected="selected"'),i+=">"+r+"</option>",n.push(i)}),n.push("</select>"),t.showRowsMenu=n.join("")}function s(){t.rows=[],t.total?e.each(t.data,function(e,i){0===e&&n(),t.rows.push(r(e,i).join(""))}):t.rows.push('<tr class="'+t.evenRowClass+'"><td colspan="'+t.schema.length+'"><em>No Results</em></td>')}var t=this;t.resetData(),t.searching&&t.filter(),t.sorting&&t.sort(),t.paginating&&t.paginate(),s(),i();var o={prevPage:t.page-1,nextPage:t.page+1,prevPageExists:t.pageExists(t.page-1),nextPageExists:t.pageExists(t.page+1),resultRange:t.range,tableTotal:t.total,showRowsMenu:t.showRowsMenu,rows:t.rows,headers:t.thead,query:t.query,search:t.search,table:t.table};return e.extend(t.view,o),t.plugins&&e.each(t.plugins,function(e,n){"undefined"!=typeof ColumnsPlugins&&"undefined"!=typeof ColumnsPlugins[n]&&ColumnsPlugins[n].create.call(t)}),t.search?(t.$el.html(t.chevron(t.template,t.view)),t.search=!1):(e("[data-columns-table]",t.$el).remove(),t.$el.append(t.chevron(t.template,t.view))),!0},this.init=function(){function n(){t.schema=[],e.each(t.data[0],function(e){t.schema.push({header:e,key:e})})}function r(){t.searchableFields=[],e.each(t.data[0],function(e){t.searchableFields.push(e)})}function i(){t.sortableFields=[],e.each(t.data[0],function(e){t.sortableFields.push(e)})}function s(){e.ajax({url:t.templateFile,async:!1,success:function(e){t.template=e},error:function(){e.error("Template could not be found.")}})}var t=this;e.isArray(t.data)?(t.master=[],t.view={},t.$el.addClass("columns"),t.$el.on("click",".ui-table-sortable",function(n){var r=e(this).data("columns-sortby");
t.sortBy===r&&(t.reverse=!t.reverse),t.sortBy=r,t.sortHandler(n)}),t.$el.on("click",".ui-table-control-next, .ui-table-control-prev",function(n){t.page=e(this).data("columns-page"),t.pageHandler(n)}),t.$el.on("keyup",".ui-table-search",function(n){t.query=e(this).val(),t.searchHandler(n)}),t.$el.on("change",".ui-table-size select",function(n){t.size=parseInt(e(this).val()),t.sizeHandler(n)}),t.plugins&&e.each(t.plugins,function(e,n){"undefined"!=typeof ColumnsPlugins&&"undefined"!=typeof ColumnsPlugins[n]&&ColumnsPlugins[n].init.call(t)}),t.conditioning&&t.condition(),t.schema||n(),t.searchableFields||r(),t.sortableFields||i(),t.templateFile&&s(),e.extend(t.master,t.data),t.create()):e.error('The "data" parameter must be an array.')},this.init()};t.prototype={evenRowClass:"ui-table-rows-even",oddRowClass:"ui-table-rows-odd",liveSearch:!0,page:1,pages:1,plugins:null,query:null,reverse:!1,pagination:!0,schema:null,search:!0,searchableFields:null,showRows:[5,10,25,50],size:5,sortableFields:null,sortBy:null,table:!0,templateFile:null,template:'<!-- Search Box: Only rendered while search is true --> {{#search}} <div class="ui-columns-search"> <input class="ui-table-search" placeholder="Search" type="text" name="query" data-columns-search="true" value="{{query}}" /> </div> {{/search}} <!-- Search Box: Only rendered while search is true --> <!-- Columns Table: Only rendered while table is true --> {{#table}} <div class="ui-columns-table" data-columns-table="true"> <table class="ui-table"> <!-- Columns Table Head: Headers have 4 possible states (sortable, notSortable, sortedUp, sortedDown) --> <thead> {{#headers}} {{#sortable}} <th class="ui-table-sortable" data-columns-sortby="{{key}}">{{header}}</th> {{/sortable}} {{#notSortable}} <th class="">{{header}}</th> {{/notSortable}} {{#sortedUp}} <th class="ui-table-sort-up ui-table-sortable" data-columns-sortby="{{key}}">{{header}} <span class="ui-arrow">&#x25B2;</span></th> {{/sortedUp}} {{#sortedDown}} <th class="ui-table-sort-down ui-table-sortable" data-columns-sortby="{{key}}">{{header}} <span class="ui-arrow">&#x25BC;</span></th> {{/sortedDown}} {{/headers}} </thead> <!-- Columns Table Head: Headers have 4 possible states (sortable, notSortable, sortedUp, sortedDown) --> <!-- Columns Table Body: Table columns are rendered outside of this template  --> <tbody> {{#rows}} {{{.}}} {{/rows}} </tbody> <!-- Columns Table Body: Table columns are rendered outside of this template  --> </table> <!-- Columns Controls  --> <div class="ui-table-footer"> <span class="ui-table-size">Show rows: {{{showRowsMenu}}}</span> <span class="ui-table-results">Results: <strong>{{resultRange.start}} &ndash; {{resultRange.end}}</strong> of <strong>{{tableTotal}}</strong> </span> <span class="ui-table-controls"> {{#prevPageExists}} <span class="ui-table-control-prev" data-columns-page="{{prevPage}}"> <img src="images/arrow-left.png"> </span> {{/prevPageExists}} {{^prevPageExists}} <span class="ui-table-control-disabled"> <img src="images/arrow-left.png"> </span> {{/prevPageExists}} {{#nextPageExists}} <span class="ui-table-control-next" data-columns-page="{{nextPage}}"> <img src="images/arrow-right.png"> </span> {{/nextPageExists}} {{^nextPageExists}} <span class="ui-table-control-disabled"> <img src="images/arrow-right.png"> </span> {{/nextPageExists}} </span> </div> <!-- Columns Controls  --> </div> {{/table}} <!-- Columns Table: Only rendered while table is true -->',conditioning:!0,paginating:!0,searching:!0,sorting:!0,pageHandler:function(){this.create()},searchHandler:function(e){this.liveSearch?this.create():"13"==e.keyCode&&this.create()},sizeHandler:function(){this.create()},sortHandler:function(){this.page=1,this.create()},destroy:function(){return this.$el.data("columns",null),this.$el.empty(),!0},getObject:function(){return this},getPage:function(){return this.page},getQuery:function(){return this.query},getRange:function(){return this.range},getRows:function(){return this.rows},getShowRowsMenu:function(){return this.showRowsMenu},getTemplate:function(){return this.template},getThead:function(){return this.thead},getTotal:function(){return this.total},getVersion:function(){return this.VERSION},getView:function(){return this.view},gotoPage:function(e){return this.pageExists(e)?(this.page=e,this.create(),!0):!1},pageExists:function(e){return e>0&&e<=this.pages},resetData:function(e){return this.data=this.master.slice(0),this.data},setMaster:function(t){return e.isArray(t)?(this.master=t,!0):!1},setPage:function(e){return this.page=this.pageExists(e)?e:this.page,this.page},setRange:function(){var e=(this.page-1)*this.size,t=e+this.size<this.total?e+this.size:this.total;this.range={start:e+1,end:t}},setTotal:function(e){return this.total=e,!0},startTime:null,endTime:null,startTimer:function(){var e=new Date;this.startTime=e.getTime()},endTimer:function(){var e=new Date;this.endTime=e.getTime()},getTimer:function(){console.log((this.endTime-this.startTime)/1e3)}}}(jQuery),function(e,t){e.Mustache=t({})}(this,function(e){function r(e){return"function"==typeof e}function i(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function o(e,t){return s.call(e,t)}function a(e){return!o(u,e)}function l(e){return String(e).replace(/[&<>"'\/]/g,function(e){return f[e]})}function m(t,r){function m(){if(f&&!l)for(;u.length;)delete o[u.pop()];else u=[];f=!1,l=!1}function x(e){if("string"==typeof e&&(e=e.split(h,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);w=new RegExp(i(e[0])+"\\s*"),E=new RegExp("\\s*"+i(e[1])),S=new RegExp("\\s*"+i("}"+e[1]))}if(!t)return[];var w,E,S,s=[],o=[],u=[],f=!1,l=!1;x(r||e.tags);for(var N,C,k,L,A,O,T=new b(t);!T.eos();){if(N=T.pos,k=T.scanUntil(w))for(var M=0,_=k.length;_>M;++M)L=k.charAt(M),a(L)?u.push(o.length):l=!0,o.push(["text",L,N,N+1]),N+=1,"\n"===L&&m();if(!T.scan(w))break;if(f=!0,C=T.scan(v)||"name",T.scan(c),"="===C?(k=T.scanUntil(p),T.scan(p),T.scanUntil(E)):"{"===C?(k=T.scanUntil(S),T.scan(d),T.scanUntil(E),C="&"):k=T.scanUntil(E),!T.scan(E))throw new Error("Unclosed tag at "+T.pos);if(A=[C,k,N,T.pos],o.push(A),"#"===C||"^"===C)s.push(A);else if("/"===C){if(O=s.pop(),!O)throw new Error('Unopened section "'+k+'" at '+N);if(O[1]!==k)throw new Error('Unclosed section "'+O[1]+'" at '+N)}else"name"===C||"{"===C||"&"===C?l=!0:"="===C&&x(k)}if(O=s.pop())throw new Error('Unclosed section "'+O[1]+'" at '+T.pos);return y(g(o))}function g(e){for(var n,r,t=[],i=0,s=e.length;s>i;++i)n=e[i],n&&("text"===n[0]&&r&&"text"===r[0]?(r[1]+=n[1],r[3]=n[3]):(t.push(n),r=n));return t}function y(e){for(var i,s,t=[],n=t,r=[],o=0,u=e.length;u>o;++o)switch(i=e[o],i[0]){case"#":case"^":n.push(i),r.push(i),n=i[4]=[];break;case"/":s=r.pop(),s[5]=i[2],n=r.length>0?r[r.length-1][4]:t;break;default:n.push(i)}return t}function b(e){this.string=e,this.tail=e,this.pos=0}function w(e,t){this.view=null==e?{}:e,this.cache={".":this.view},this.parent=t}function E(){this.cache={}}var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)},s=RegExp.prototype.test,u=/\S/,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},c=/\s*/,h=/\s+/,p=/\s*=/,d=/\s*\}/,v=/#|\^|\/|>|\{|&|=|!/;b.prototype.eos=function(){return""===this.tail},b.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},b.prototype.scanUntil=function(e){var n,t=this.tail.search(e);switch(t){case-1:n=this.tail,this.tail="";break;case 0:n="";break;default:n=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=n.length,n},w.prototype.push=function(e){return new w(e,this)},w.prototype.lookup=function(e){var n,t=this.cache;if(e in t)n=t[e];else{for(var s,o,i=this;i;){if(e.indexOf(".")>0)for(n=i.view,s=e.split("."),o=0;null!=n&&o<s.length;)n=n[s[o++]];else n=i.view[e];if(null!=n)break;i=i.parent}t[e]=n}return r(n)&&(n=n.call(this.view)),n},E.prototype.clearCache=function(){this.cache={}},E.prototype.parse=function(e,t){var n=this.cache,r=n[e];return null==r&&(r=n[e]=m(e,t)),r},E.prototype.render=function(e,t,n){var r=this.parse(e),i=t instanceof w?t:new w(t);return this.renderTokens(r,i,n,e)},E.prototype.renderTokens=function(t,i,s,o){function f(e){return a.render(e,i,s)}for(var l,c,u="",a=this,h=0,p=t.length;p>h;++h)switch(l=t[h],l[0]){case"#":if(c=i.lookup(l[1]),!c)continue;if(n(c))for(var d=0,v=c.length;v>d;++d)u+=this.renderTokens(l[4],i.push(c[d]),s,o);else if("object"==typeof c||"string"==typeof c)u+=this.renderTokens(l[4],i.push(c),s,o);else if(r(c)){if("string"!=typeof o)throw new Error("Cannot use higher-order sections without the original template");c=c.call(i.view,o.slice(l[3],l[5]),f),null!=c&&(u+=c)}else u+=this.renderTokens(l[4],i,s,o);break;case"^":c=i.lookup(l[1]),(!c||n(c)&&0===c.length)&&(u+=this.renderTokens(l[4],i,s,o));break;case">":if(!s)continue;c=r(s)?s(l[1]):s[l[1]],null!=c&&(u+=this.renderTokens(this.parse(c),i,s,c));break;case"&":c=i.lookup(l[1]),null!=c&&(u+=c);break;case"name":c=i.lookup(l[1]),null!=c&&(u+=e.escape(c));break;case"text":u+=l[1]}return u},e.name="mustache.js",e.version="0.8.1",e.tags=["{{","}}"];var S=new E;return e.clearCache=function(){return S.clearCache()},e.parse=function(e,t){return S.parse(e,t)},e.render=function(e,t,n){return S.render(e,t,n)},e.to_html=function(t,n,i,s){var o=e.render(t,n,i);return r(s)?void s(o):o},e.escape=l,e.Scanner=b,e.Context=w,e.Writer=E,e}),function(window,document,undefined){!function(factory){"use strict";"function"==typeof define&&define.amd?define(["bower_components/jquery/jquery"],factory):jQuery&&!jQuery.fn.dataTable&&factory(jQuery)}(function($){"use strict";function _fnHungarianMap(o){var match,newKey,hungarian="a aa ao as b fn i m o s ",map={};$.each(o,function(key,val){match=key.match(/^([^A-Z]+?)([A-Z])/),match&&-1!==hungarian.indexOf(match[1]+" ")&&(newKey=key.replace(match[0],match[2].toLowerCase()),map[newKey]=key,"o"===match[1]&&_fnHungarianMap(o[key]))}),o._hungarianMap=map}function _fnCamelToHungarian(src,user,force){src._hungarianMap||_fnHungarianMap(src);var hungarianKey;$.each(user,function(key,val){hungarianKey=src._hungarianMap[key],hungarianKey===undefined||!force&&user[hungarianKey]!==undefined||(user[hungarianKey]=user[key],"o"===hungarianKey.charAt(0)&&_fnCamelToHungarian(src[hungarianKey],user[key]))})}function _fnLanguageCompat(oLanguage){var oDefaults=DataTable.defaults.oLanguage;!oLanguage.sEmptyTable&&oLanguage.sZeroRecords&&"No data available in table"===oDefaults.sEmptyTable&&_fnMap(oLanguage,oLanguage,"sZeroRecords","sEmptyTable"),!oLanguage.sLoadingRecords&&oLanguage.sZeroRecords&&"Loading..."===oDefaults.sLoadingRecords&&_fnMap(oLanguage,oLanguage,"sZeroRecords","sLoadingRecords")}function _fnBrowserDetect(oSettings){var n=$('<div style="position:absolute; top:0; left:0; height:1px; width:1px; overflow:hidden"><div style="position:absolute; top:1px; left:1px; width:100px; overflow:scroll;"><div id="DT_BrowserTest" style="width:100%; height:10px;"></div></div></div>')[0];document.body.appendChild(n),oSettings.oBrowser.bScrollOversize=100===$("#DT_BrowserTest",n)[0].offsetWidth,oSettings.oBrowser.bScrollbarLeft=1!==$("#DT_BrowserTest",n).offset().left,document.body.removeChild(n)}function _fnAddColumn(oSettings,nTh){var oDefaults=DataTable.defaults.column,iCol=oSettings.aoColumns.length,oCol=$.extend({},DataTable.models.oColumn,oDefaults,{sSortingClass:oSettings.oClasses.sSortable,sSortingClassJUI:oSettings.oClasses.sSortJUI,nTh:nTh?nTh:document.createElement("th"),sTitle:oDefaults.sTitle?oDefaults.sTitle:nTh?nTh.innerHTML:"",aDataSort:oDefaults.aDataSort?oDefaults.aDataSort:[iCol],mData:oDefaults.mData?oDefaults.oDefaults:iCol});if(oSettings.aoColumns.push(oCol),oSettings.aoPreSearchCols[iCol]===undefined||null===oSettings.aoPreSearchCols[iCol])oSettings.aoPreSearchCols[iCol]=$.extend({},DataTable.models.oSearch);else{var oPre=oSettings.aoPreSearchCols[iCol];oPre.bRegex===undefined&&(oPre.bRegex=!0),oPre.bSmart===undefined&&(oPre.bSmart=!0),oPre.bCaseInsensitive===undefined&&(oPre.bCaseInsensitive=!0)}_fnColumnOptions(oSettings,iCol,null)}function _fnColumnOptions(oSettings,iCol,oOptions){var oCol=oSettings.aoColumns[iCol];oOptions!==undefined&&null!==oOptions&&(_fnCamelToHungarian(DataTable.defaults.column,oOptions),oOptions.mDataProp===undefined||oOptions.mData||(oOptions.mData=oOptions.mDataProp),oOptions.sType!==undefined&&(oCol.sType=oOptions.sType,oCol._bAutoType=!1),$.extend(oCol,oOptions),_fnMap(oCol,oOptions,"sWidth","sWidthOrig"),oOptions.iDataSort!==undefined&&(oCol.aDataSort=[oOptions.iDataSort]),_fnMap(oCol,oOptions,"aDataSort"));var mRender=oCol.mRender?_fnGetObjectDataFn(oCol.mRender):null,mData=_fnGetObjectDataFn(oCol.mData);oCol.fnGetData=function(oData,sSpecific){var innerData=mData(oData,sSpecific);return oCol.mRender&&sSpecific&&""!==sSpecific?mRender(innerData,sSpecific,oData):innerData},oCol.fnSetData=_fnSetObjectDataFn(oCol.mData),oSettings.oFeatures.bSort||(oCol.bSortable=!1),!oCol.bSortable||-1==$.inArray("asc",oCol.asSorting)&&-1==$.inArray("desc",oCol.asSorting)?(oCol.sSortingClass=oSettings.oClasses.sSortableNone,oCol.sSortingClassJUI=""):-1==$.inArray("asc",oCol.asSorting)&&-1==$.inArray("desc",oCol.asSorting)?(oCol.sSortingClass=oSettings.oClasses.sSortable,oCol.sSortingClassJUI=oSettings.oClasses.sSortJUI):-1!=$.inArray("asc",oCol.asSorting)&&-1==$.inArray("desc",oCol.asSorting)?(oCol.sSortingClass=oSettings.oClasses.sSortableAsc,oCol.sSortingClassJUI=oSettings.oClasses.sSortJUIAscAllowed):-1==$.inArray("asc",oCol.asSorting)&&-1!=$.inArray("desc",oCol.asSorting)&&(oCol.sSortingClass=oSettings.oClasses.sSortableDesc,oCol.sSortingClassJUI=oSettings.oClasses.sSortJUIDescAllowed)}function _fnAdjustColumnSizing(oSettings){if(oSettings.oFeatures.bAutoWidth===!1)return!1;_fnCalculateColumnWidths(oSettings);for(var i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)oSettings.aoColumns[i].nTh.style.width=oSettings.aoColumns[i].sWidth}function _fnVisibleToColumnIndex(oSettings,iMatch){var aiVis=_fnGetColumns(oSettings,"bVisible");return"number"==typeof aiVis[iMatch]?aiVis[iMatch]:null}function _fnColumnIndexToVisible(oSettings,iMatch){var aiVis=_fnGetColumns(oSettings,"bVisible"),iPos=$.inArray(iMatch,aiVis);return-1!==iPos?iPos:null}function _fnVisbleColumns(oSettings){return _fnGetColumns(oSettings,"bVisible").length}function _fnGetColumns(oSettings,sParam){var a=[];return $.map(oSettings.aoColumns,function(val,i){val[sParam]&&a.push(i)}),a}function _fnDetectType(sData){for(var aTypes=DataTable.ext.aTypes,iLen=aTypes.length,i=0;iLen>i;i++){var sType=aTypes[i](sData);if(null!==sType)return sType}return"string"}function _fnColumnOrdering(oSettings){for(var sNames="",i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)sNames+=oSettings.aoColumns[i].sName+",";return sNames.length==iLen?"":sNames.slice(0,-1)}function _fnApplyColumnDefs(oSettings,aoColDefs,aoCols,fn){var i,iLen,j,jLen,k,kLen;if(aoColDefs)for(i=aoColDefs.length-1;i>=0;i--){var aTargets=aoColDefs[i].targets||aoColDefs[i].aTargets;for($.isArray(aTargets)||_fnLog(oSettings,1,"aTargets must be an array of targets, not a "+typeof aTargets),j=0,jLen=aTargets.length;jLen>j;j++)if("number"==typeof aTargets[j]&&aTargets[j]>=0){for(;oSettings.aoColumns.length<=aTargets[j];)_fnAddColumn(oSettings);fn(aTargets[j],aoColDefs[i])}else if("number"==typeof aTargets[j]&&aTargets[j]<0)fn(oSettings.aoColumns.length+aTargets[j],aoColDefs[i]);else if("string"==typeof aTargets[j])for(k=0,kLen=oSettings.aoColumns.length;kLen>k;k++)("_all"==aTargets[j]||$(oSettings.aoColumns[k].nTh).hasClass(aTargets[j]))&&fn(k,aoColDefs[i])}if(aoCols)for(i=0,iLen=aoCols.length;iLen>i;i++)fn(i,aoCols[i])}function _fnAddData(oSettings,aDataIn,nTr,anTds){var oCol,iRow=oSettings.aoData.length,oData=$.extend(!0,{},DataTable.models.oRow);oData._aData=aDataIn,oSettings.aoData.push(oData);for(var sThisType,i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)if(oCol=oSettings.aoColumns[i],_fnSetCellData(oSettings,iRow,i,_fnGetCellData(oSettings,iRow,i)),oCol._bAutoType&&"string"!=oCol.sType){var sVarType=_fnGetCellData(oSettings,iRow,i,"type");null!==sVarType&&""!==sVarType&&(sThisType=_fnDetectType(sVarType),null===oCol.sType?oCol.sType=sThisType:oCol.sType!=sThisType&&"html"!=oCol.sType&&(oCol.sType="string"))}return oSettings.aiDisplayMaster.push(iRow),oSettings.oFeatures.bDeferRender||_fnCreateTr(oSettings,iRow,nTr,anTds),iRow}function _fnAddTr(oSettings,trs){!trs instanceof $&&(trs=$(trs)),trs.each(function(){for(var name,d=[],tds=[],td=this.firstChild;td;)name=td.nodeName.toUpperCase(),"TD"!=name&&"TH"!=name||(d.push($.trim(td.innerHTML)),tds.push(td)),td=td.nextSibling;_fnAddData(oSettings,d,this,tds)})}function _fnNodeToDataIndex(oSettings,n){return n._DT_RowIndex!==undefined?n._DT_RowIndex:null}function _fnNodeToColumnIndex(oSettings,iRow,n){for(var anCells=_fnGetTdNodes(oSettings,iRow),i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)if(anCells[i]===n)return i;return-1}function _fnGetRowData(oSettings,iRow,sSpecific,aiColumns){for(var out=[],i=0,iLen=aiColumns.length;iLen>i;i++)out.push(_fnGetCellData(oSettings,iRow,aiColumns[i],sSpecific));return out}function _fnGetCellData(oSettings,iRow,iCol,sSpecific){var oCol=oSettings.aoColumns[iCol],oData=oSettings.aoData[iRow]._aData,sData=oCol.fnGetData(oData,sSpecific);if(sData===undefined)return oSettings.iDrawError!=oSettings.iDraw&&null===oCol.sDefaultContent&&(_fnLog(oSettings,0,"Requested unknown parameter "+("function"==typeof oCol.mData?"{mData function}":"'"+oCol.mData+"'")+" from the data source for row "+iRow),oSettings.iDrawError=oSettings.iDraw),oCol.sDefaultContent;if(sData!==oData&&null!==sData||null===oCol.sDefaultContent){if("function"==typeof sData)return sData()}else sData=oCol.sDefaultContent;return null===sData&&"display"==sSpecific?"":sData}function _fnSetCellData(oSettings,iRow,iCol,val){var oCol=oSettings.aoColumns[iCol],oData=oSettings.aoData[iRow]._aData;oCol.fnSetData(oData,val)}function _fnSplitObjNotation(str){return $.map(str.match(/(\\.|[^\.])+/g),function(s){return s.replace("\\.",".")})}function _fnGetObjectDataFn(mSource){if($.isPlainObject(mSource)){var o={};return $.each(mSource,function(key,val){o[key]=_fnGetObjectDataFn(val)}),function(data,type,extra){return o[o[type]!==undefined?type:"_"](data,type,extra)}}if(null===mSource)return function(data,type){return data};if("function"==typeof mSource)return function(data,type,extra){return mSource(data,type,extra)};if("string"!=typeof mSource||-1===mSource.indexOf(".")&&-1===mSource.indexOf("[")&&-1===mSource.indexOf("("))return function(data,type){return data[mSource]};var fetchData=function(data,type,src){var arrayNotation,funcNotation,out,innerSrc,a=_fnSplitObjNotation(src);if(""!==src)for(var i=0,iLen=a.length;iLen>i;i++){if(arrayNotation=a[i].match(__reArray),funcNotation=a[i].match(__reFn),arrayNotation){a[i]=a[i].replace(__reArray,""),""!==a[i]&&(data=data[a[i]]),out=[],a.splice(0,i+1),innerSrc=a.join(".");for(var j=0,jLen=data.length;jLen>j;j++)out.push(fetchData(data[j],type,innerSrc));var join=arrayNotation[0].substring(1,arrayNotation[0].length-1);data=""===join?out:out.join(join);break}if(funcNotation)a[i]=a[i].replace(__reFn,""),data=data[a[i]]();else{if(null===data||data[a[i]]===undefined)return undefined;data=data[a[i]]}}return data};return function(data,type){return fetchData(data,type,mSource)}}function _fnSetObjectDataFn(mSource){if($.isPlainObject(mSource))return _fnSetObjectDataFn(mSource._);if(null===mSource)return function(data,val){};if("function"==typeof mSource)return function(data,val){mSource(data,"set",val)};if("string"!=typeof mSource||-1===mSource.indexOf(".")&&-1===mSource.indexOf("[")&&-1===mSource.indexOf("("))return function(data,val){data[mSource]=val};var setData=function(data,val,src){for(var b,arrayNotation,funcNotation,o,innerSrc,a=_fnSplitObjNotation(src),aLast=a[a.length-1],i=0,iLen=a.length-1;iLen>i;i++){if(arrayNotation=a[i].match(__reArray),funcNotation=a[i].match(__reFn),arrayNotation){a[i]=a[i].replace(__reArray,""),data[a[i]]=[],b=a.slice(),b.splice(0,i+1),innerSrc=b.join(".");for(var j=0,jLen=val.length;jLen>j;j++)o={},setData(o,val[j],innerSrc),data[a[i]].push(o);return}funcNotation&&(a[i]=a[i].replace(__reFn,""),data=data[a[i]](val)),null!==data[a[i]]&&data[a[i]]!==undefined||(data[a[i]]={}),data=data[a[i]]}aLast.match(__reFn)?data=data[aLast.replace(__reFn,"")](val):data[aLast.replace(__reArray,"")]=val};return function(data,val){return setData(data,val,mSource)}}function _fnGetDataMaster(oSettings){for(var aData=[],iLen=oSettings.aoData.length,i=0;iLen>i;i++)aData.push(oSettings.aoData[i]._aData);return aData}function _fnClearTable(oSettings){oSettings.aoData.splice(0,oSettings.aoData.length),oSettings.aiDisplayMaster.splice(0,oSettings.aiDisplayMaster.length),oSettings.aiDisplay.splice(0,oSettings.aiDisplay.length),_fnCalculateEnd(oSettings)}function _fnDeleteIndex(a,iTarget){for(var iTargetIndex=-1,i=0,iLen=a.length;iLen>i;i++)a[i]==iTarget?iTargetIndex=i:a[i]>iTarget&&a[i]--;-1!=iTargetIndex&&a.splice(iTargetIndex,1)}function _fnCreateTr(oSettings,iRow,nTrIn,anTds){var nTr,nTd,oCol,i,iLen,row=oSettings.aoData[iRow],rowData=row._aData;if(null===row.nTr){for(nTr=nTrIn||document.createElement("tr"),nTr._DT_RowIndex=iRow,rowData.DT_RowId&&(nTr.id=rowData.DT_RowId),rowData.DT_RowClass&&(nTr.className+=" "+rowData.DT_RowClass),i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)oCol=oSettings.aoColumns[i],nTd=nTrIn?anTds[i]:document.createElement(oCol.sCellType),nTrIn&&!oCol.mRender&&oCol.mData===i||(nTd.innerHTML=_fnGetCellData(oSettings,iRow,i,"display")),null!==oCol.sClass&&(nTd.className+=" "+oCol.sClass),row._anHidden[i]=oCol.bVisible?null:nTd,oCol.bVisible&&!nTrIn?nTr.appendChild(nTd):!oCol.bVisible&&nTrIn&&nTd.parentNode.removeChild(nTd),oCol.fnCreatedCell&&oCol.fnCreatedCell.call(oSettings.oInstance,nTd,_fnGetCellData(oSettings,iRow,i,"display"),rowData,iRow,i);row.nTr=nTr,_fnCallbackFire(oSettings,"aoRowCreatedCallback",null,[nTr,rowData,iRow])}}function _fnBuildHead(oSettings){var i,nTh,iLen,iThs=$("th, td",oSettings.nTHead).length;if(0!==iThs)for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)nTh=oSettings.aoColumns[i].nTh,nTh.setAttribute("role","columnheader"),oSettings.aoColumns[i].bSortable&&(nTh.setAttribute("tabindex",oSettings.iTabIndex),nTh.setAttribute("aria-controls",oSettings.sTableId)),null!==oSettings.aoColumns[i].sClass&&$(nTh).addClass(oSettings.aoColumns[i].sClass),oSettings.aoColumns[i].sTitle!=nTh.innerHTML&&(nTh.innerHTML=oSettings.aoColumns[i].sTitle);else{var nTr=document.createElement("tr");for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)nTh=oSettings.aoColumns[i].nTh,nTh.innerHTML=oSettings.aoColumns[i].sTitle,nTh.setAttribute("tabindex","0"),null!==oSettings.aoColumns[i].sClass&&$(nTh).addClass(oSettings.aoColumns[i].sClass),nTr.appendChild(nTh);$(oSettings.nTHead).html("")[0].appendChild(nTr),_fnDetectHeader(oSettings.aoHeader,oSettings.nTHead)}if($(oSettings.nTHead).children("tr").attr("role","row"),oSettings.bJUI)for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++){nTh=oSettings.aoColumns[i].nTh;var nDiv=document.createElement("div");nDiv.className=oSettings.oClasses.sSortJUIWrapper,$(nTh).contents().appendTo(nDiv);var nSpan=document.createElement("span");nSpan.className=oSettings.oClasses.sSortIcon,nDiv.appendChild(nSpan),nTh.appendChild(nDiv)}if(oSettings.oFeatures.bSort)for(i=0;i<oSettings.aoColumns.length;i++)oSettings.aoColumns[i].bSortable!==!1?_fnSortAttachListener(oSettings,oSettings.aoColumns[i].nTh,i):$(oSettings.aoColumns[i].nTh).addClass(oSettings.oClasses.sSortableNone);if(""!==oSettings.oClasses.sFooterTH&&$(oSettings.nTFoot).children("tr").children("th").addClass(oSettings.oClasses.sFooterTH),null!==oSettings.nTFoot){var anCells=_fnGetUniqueThs(oSettings,null,oSettings.aoFooter);for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)anCells[i]&&(oSettings.aoColumns[i].nTf=anCells[i],oSettings.aoColumns[i].sClass&&$(anCells[i]).addClass(oSettings.aoColumns[i].sClass))}}function _fnDrawHead(oSettings,aoSource,bIncludeHidden){var i,iLen,j,jLen,k,n,nLocalTr,iRowspan,iColspan,aoLocal=[],aApplied=[],iColumns=oSettings.aoColumns.length;for(bIncludeHidden===undefined&&(bIncludeHidden=!1),i=0,iLen=aoSource.length;iLen>i;i++){for(aoLocal[i]=aoSource[i].slice(),aoLocal[i].nTr=aoSource[i].nTr,j=iColumns-1;j>=0;j--)oSettings.aoColumns[j].bVisible||bIncludeHidden||aoLocal[i].splice(j,1);aApplied.push([])}for(i=0,iLen=aoLocal.length;iLen>i;i++){if(nLocalTr=aoLocal[i].nTr)for(;n=nLocalTr.firstChild;)nLocalTr.removeChild(n);for(j=0,jLen=aoLocal[i].length;jLen>j;j++)if(iRowspan=1,iColspan=1,aApplied[i][j]===undefined){for(nLocalTr.appendChild(aoLocal[i][j].cell),aApplied[i][j]=1;aoLocal[i+iRowspan]!==undefined&&aoLocal[i][j].cell==aoLocal[i+iRowspan][j].cell;)aApplied[i+iRowspan][j]=1,iRowspan++;for(;aoLocal[i][j+iColspan]!==undefined&&aoLocal[i][j].cell==aoLocal[i][j+iColspan].cell;){for(k=0;iRowspan>k;k++)aApplied[i+k][j+iColspan]=1;iColspan++}aoLocal[i][j].cell.rowSpan=iRowspan,aoLocal[i][j].cell.colSpan=iColspan}}}function _fnDraw(oSettings){var aPreDraw=_fnCallbackFire(oSettings,"aoPreDrawCallback","preDraw",[oSettings]);if(-1!==$.inArray(!1,aPreDraw))return void _fnProcessingDisplay(oSettings,!1);var i,iLen,n,anRows=[],iRowCount=0,iStripes=oSettings.asStripeClasses.length,iOpenRows=oSettings.aoOpenRows.length;if(oSettings.bDrawing=!0,oSettings.iInitDisplayStart!==undefined&&-1!=oSettings.iInitDisplayStart&&(oSettings.oFeatures.bServerSide?oSettings._iDisplayStart=oSettings.iInitDisplayStart:oSettings._iDisplayStart=oSettings.iInitDisplayStart>=oSettings.fnRecordsDisplay()?0:oSettings.iInitDisplayStart,oSettings.iInitDisplayStart=-1,_fnCalculateEnd(oSettings)),oSettings.bDeferLoading)oSettings.bDeferLoading=!1,oSettings.iDraw++;else if(oSettings.oFeatures.bServerSide){if(!oSettings.bDestroying&&!_fnAjaxUpdate(oSettings))return}else oSettings.iDraw++;if(0!==oSettings.aiDisplay.length){var iStart=oSettings._iDisplayStart,iEnd=oSettings._iDisplayEnd;oSettings.oFeatures.bServerSide&&(iStart=0,iEnd=oSettings.aoData.length);for(var j=iStart;iEnd>j;j++){var aoData=oSettings.aoData[oSettings.aiDisplay[j]];null===aoData.nTr&&_fnCreateTr(oSettings,oSettings.aiDisplay[j]);var nRow=aoData.nTr;if(0!==iStripes){var sStripe=oSettings.asStripeClasses[iRowCount%iStripes];aoData._sRowStripe!=sStripe&&($(nRow).removeClass(aoData._sRowStripe).addClass(sStripe),aoData._sRowStripe=sStripe)}_fnCallbackFire(oSettings,"aoRowCallback",null,[nRow,oSettings.aoData[oSettings.aiDisplay[j]]._aData,iRowCount,j]),anRows.push(nRow),iRowCount++;for(var k=0;iOpenRows>k;k++)if(nRow==oSettings.aoOpenRows[k].nParent){anRows.push(oSettings.aoOpenRows[k].nTr);break}}}else{anRows[0]=document.createElement("tr"),oSettings.asStripeClasses[0]&&(anRows[0].className=oSettings.asStripeClasses[0]);var oLang=oSettings.oLanguage,sZero=oLang.sZeroRecords;1!=oSettings.iDraw||null===oSettings.sAjaxSource||oSettings.oFeatures.bServerSide?oLang.sEmptyTable&&0===oSettings.fnRecordsTotal()&&(sZero=oLang.sEmptyTable):sZero=oLang.sLoadingRecords;var nTd=document.createElement("td");nTd.setAttribute("valign","top"),nTd.colSpan=_fnVisbleColumns(oSettings),nTd.className=oSettings.oClasses.sRowEmpty,nTd.innerHTML=_fnInfoMacros(oSettings,sZero),anRows[iRowCount].appendChild(nTd)}_fnCallbackFire(oSettings,"aoHeaderCallback","header",[$(oSettings.nTHead).children("tr")[0],_fnGetDataMaster(oSettings),oSettings._iDisplayStart,oSettings.fnDisplayEnd(),oSettings.aiDisplay]),_fnCallbackFire(oSettings,"aoFooterCallback","footer",[$(oSettings.nTFoot).children("tr")[0],_fnGetDataMaster(oSettings),oSettings._iDisplayStart,oSettings.fnDisplayEnd(),oSettings.aiDisplay]);var nBodyPar,nAddFrag=document.createDocumentFragment(),nRemoveFrag=document.createDocumentFragment();if(oSettings.nTBody){if(nBodyPar=oSettings.nTBody.parentNode,nRemoveFrag.appendChild(oSettings.nTBody),!oSettings.oScroll.bInfinite||!oSettings._bInitComplete||oSettings.bSorted||oSettings.bFiltered)for(;n=oSettings.nTBody.firstChild;)oSettings.nTBody.removeChild(n);for(i=0,iLen=anRows.length;iLen>i;i++)nAddFrag.appendChild(anRows[i]);oSettings.nTBody.appendChild(nAddFrag),null!==nBodyPar&&nBodyPar.appendChild(oSettings.nTBody)}_fnCallbackFire(oSettings,"aoDrawCallback","draw",[oSettings]),oSettings.bSorted=!1,oSettings.bFiltered=!1,oSettings.bDrawing=!1}function _fnReDraw(settings,holdPosition){var features=settings.oFeatures,sort=features.bSort,filter=features.bFilter;sort&&_fnSort(settings),filter?_fnFilterComplete(settings,settings.oPreviousSearch):settings.aiDisplay=settings.aiDisplayMaster.slice(),holdPosition!==!0&&(settings._iDisplayStart=0),_fnCalculateEnd(settings),_fnDraw(settings)}function _fnAddOptionsHtml(oSettings){var nHolding=$("<div></div>")[0];oSettings.nTable.parentNode.insertBefore(nHolding,oSettings.nTable),oSettings.nTableWrapper=$('<div id="'+oSettings.sTableId+'_wrapper" class="'+oSettings.oClasses.sWrapper+'" role="grid"></div>')[0],oSettings.nTableReinsertBefore=oSettings.nTable.nextSibling;for(var nTmp,iPushFeature,cOption,nNewNode,cNext,sAttr,j,nInsertNode=oSettings.nTableWrapper,aDom=oSettings.sDom.split(""),i=0;i<aDom.length;i++){if(iPushFeature=0,cOption=aDom[i],"<"==cOption){if(nNewNode=$("<div></div>")[0],cNext=aDom[i+1],"'"==cNext||'"'==cNext){for(sAttr="",j=2;aDom[i+j]!=cNext;)sAttr+=aDom[i+j],j++;if("H"==sAttr?sAttr=oSettings.oClasses.sJUIHeader:"F"==sAttr&&(sAttr=oSettings.oClasses.sJUIFooter),-1!=sAttr.indexOf(".")){var aSplit=sAttr.split(".");nNewNode.id=aSplit[0].substr(1,aSplit[0].length-1),nNewNode.className=aSplit[1]}else"#"==sAttr.charAt(0)?nNewNode.id=sAttr.substr(1,sAttr.length-1):nNewNode.className=sAttr;i+=j}nInsertNode.appendChild(nNewNode),nInsertNode=nNewNode}else if(">"==cOption)nInsertNode=nInsertNode.parentNode;else if("l"==cOption&&oSettings.oFeatures.bPaginate&&oSettings.oFeatures.bLengthChange)nTmp=_fnFeatureHtmlLength(oSettings),iPushFeature=1;else if("f"==cOption&&oSettings.oFeatures.bFilter)nTmp=_fnFeatureHtmlFilter(oSettings),iPushFeature=1;else if("r"==cOption&&oSettings.oFeatures.bProcessing)nTmp=_fnFeatureHtmlProcessing(oSettings),iPushFeature=1;else if("t"==cOption)nTmp=_fnFeatureHtmlTable(oSettings),iPushFeature=1;else if("i"==cOption&&oSettings.oFeatures.bInfo)nTmp=_fnFeatureHtmlInfo(oSettings),iPushFeature=1;else if("p"==cOption&&oSettings.oFeatures.bPaginate)nTmp=_fnFeatureHtmlPaginate(oSettings),iPushFeature=1;else if(0!==DataTable.ext.aoFeatures.length)for(var aoFeatures=DataTable.ext.aoFeatures,k=0,kLen=aoFeatures.length;kLen>k;k++)if(cOption==aoFeatures[k].cFeature){nTmp=aoFeatures[k].fnInit(oSettings),nTmp&&(iPushFeature=1);break}1==iPushFeature&&null!==nTmp&&("object"!=typeof oSettings.aanFeatures[cOption]&&(oSettings.aanFeatures[cOption]=[]),oSettings.aanFeatures[cOption].push(nTmp),nInsertNode.appendChild(nTmp))}nHolding.parentNode.replaceChild(oSettings.nTableWrapper,nHolding)}function _fnDetectHeader(aLayout,nThead){var nTr,nCell,i,k,l,iLen,iColShifted,iColumn,iColspan,iRowspan,bUnique,nTrs=$(nThead).children("tr"),fnShiftCol=function(a,i,j){for(var k=a[i];k[j];)j++;return j};for(aLayout.splice(0,aLayout.length),i=0,iLen=nTrs.length;iLen>i;i++)aLayout.push([]);for(i=0,iLen=nTrs.length;iLen>i;i++)for(nTr=nTrs[i],iColumn=0,nCell=nTr.firstChild;nCell;){if("TD"==nCell.nodeName.toUpperCase()||"TH"==nCell.nodeName.toUpperCase())for(iColspan=1*nCell.getAttribute("colspan"),iRowspan=1*nCell.getAttribute("rowspan"),iColspan=iColspan&&0!==iColspan&&1!==iColspan?iColspan:1,iRowspan=iRowspan&&0!==iRowspan&&1!==iRowspan?iRowspan:1,iColShifted=fnShiftCol(aLayout,i,iColumn),bUnique=1===iColspan,l=0;iColspan>l;l++)for(k=0;iRowspan>k;k++)aLayout[i+k][iColShifted+l]={cell:nCell,unique:bUnique},aLayout[i+k].nTr=nTr;nCell=nCell.nextSibling}}function _fnGetUniqueThs(oSettings,nHeader,aLayout){var aReturn=[];aLayout||(aLayout=oSettings.aoHeader,nHeader&&(aLayout=[],_fnDetectHeader(aLayout,nHeader)));for(var i=0,iLen=aLayout.length;iLen>i;i++)for(var j=0,jLen=aLayout[i].length;jLen>j;j++)!aLayout[i][j].unique||aReturn[j]&&oSettings.bSortCellsTop||(aReturn[j]=aLayout[i][j].cell);
return aReturn}function _fnBuildAjax(oSettings,data,fn){_fnCallbackFire(oSettings,"aoServerParams","serverParams",[data]);var ajaxData;if($.isPlainObject(oSettings.ajax)&&oSettings.ajax.data){ajaxData=oSettings.ajax.data;var newData=$.isFunction(ajaxData)?ajaxData(data):ajaxData;if($.isArray(newData))data=data.concat(newData);else if($.isPlainObject(newData)){var oData={};$.each(data,function(key,val){oData[val.name]=val.value}),data=$.extend(!0,oData,newData)}delete oSettings.ajax.data}var baseAjax={data:data,success:function(json){json.sError&&oSettings.oApi._fnLog(oSettings,0,json.sError),$(oSettings.oInstance).trigger("xhr",[oSettings,json]),fn(json)},dataType:"json",cache:!1,type:oSettings.sServerMethod,error:function(xhr,error,thrown){"parsererror"==error&&oSettings.oApi._fnLog(oSettings,0,"DataTables: invalid JSON response")}};oSettings.fnServerData?oSettings.fnServerData.call(oSettings.oInstance,oSettings.sAjaxSource,data,fn,oSettings):oSettings.sAjaxSource||"string"==typeof oSettings.ajax?oSettings.jqXHR=$.ajax($.extend(baseAjax,{url:oSettings.ajax||oSettings.sAjaxSource})):$.isFunction(oSettings.ajax)?oSettings.jqXHR=oSettings.ajax.call(oSettings.oInstance,data,fn,oSettings):(oSettings.jqXHR=$.ajax($.extend(baseAjax,oSettings.ajax)),oSettings.ajax.data=ajaxData)}function _fnAjaxUpdate(oSettings){if(oSettings.bAjaxDataGet){oSettings.iDraw++,_fnProcessingDisplay(oSettings,!0);var aoData=(oSettings.aoColumns.length,_fnAjaxParameters(oSettings));return _fnBuildAjax(oSettings,aoData,function(json){_fnAjaxUpdateDraw(oSettings,json)},oSettings),!1}return!0}function _fnAjaxParameters(oSettings){var mDataProp,aaSort,aDataSort,i,j,aoColumns=oSettings.aoColumns,iColumns=aoColumns.length,aoData=[],param=function(name,value){aoData.push({name:name,value:value})};for(param("sEcho",oSettings.iDraw),param("iColumns",iColumns),param("sColumns",_fnColumnOrdering(oSettings)),param("iDisplayStart",oSettings._iDisplayStart),param("iDisplayLength",oSettings.oFeatures.bPaginate!==!1?oSettings._iDisplayLength:-1),i=0;iColumns>i;i++)mDataProp=aoColumns[i].mData,param("mDataProp_"+i,"function"==typeof mDataProp?"function":mDataProp);if(oSettings.oFeatures.bFilter!==!1)for(param("sSearch",oSettings.oPreviousSearch.sSearch),param("bRegex",oSettings.oPreviousSearch.bRegex),i=0;iColumns>i;i++)param("sSearch_"+i,oSettings.aoPreSearchCols[i].sSearch),param("bRegex_"+i,oSettings.aoPreSearchCols[i].bRegex),param("bSearchable_"+i,aoColumns[i].bSearchable);if(oSettings.oFeatures.bSort!==!1){var iCounter=0;for(aaSort=null!==oSettings.aaSortingFixed?oSettings.aaSortingFixed.concat(oSettings.aaSorting):oSettings.aaSorting.slice(),i=0;i<aaSort.length;i++)for(aDataSort=aoColumns[aaSort[i][0]].aDataSort,j=0;j<aDataSort.length;j++)param("iSortCol_"+iCounter,aDataSort[j]),param("sSortDir_"+iCounter,aaSort[i][1]),iCounter++;for(param("iSortingCols",iCounter),i=0;iColumns>i;i++)param("bSortable_"+i,aoColumns[i].bSortable)}return aoData}function _fnAjaxUpdateDraw(oSettings,json){if(json.sEcho!==undefined){if(1*json.sEcho<oSettings.iDraw)return;oSettings.iDraw=1*json.sEcho}(!oSettings.oScroll.bInfinite||oSettings.bSorted||oSettings.bFiltered)&&_fnClearTable(oSettings),oSettings._iRecordsTotal=parseInt(json.iTotalRecords,10),oSettings._iRecordsDisplay=parseInt(json.iTotalDisplayRecords,10);for(var aData=_fnAjaxDataSrc(oSettings,json),i=0,iLen=aData.length;iLen>i;i++)_fnAddData(oSettings,aData[i]);oSettings.aiDisplay=oSettings.aiDisplayMaster.slice(),oSettings.bAjaxDataGet=!1,_fnDraw(oSettings),oSettings._bInitComplete||_fnInitComplete(oSettings,json),oSettings.bAjaxDataGet=!0,_fnProcessingDisplay(oSettings,!1)}function _fnAjaxDataSrc(oSettings,json){var dataSrc=$.isPlainObject(oSettings.ajax)&&oSettings.ajax.dataSrc!==undefined?oSettings.ajax.dataSrc:oSettings.sAjaxDataProp;return""!==dataSrc?_fnGetObjectDataFn(dataSrc)(json):json}function _fnFeatureHtmlFilter(oSettings){var oPreviousSearch=oSettings.oPreviousSearch,sSearchStr=oSettings.oLanguage.sSearch;sSearchStr=-1!==sSearchStr.indexOf("_INPUT_")?sSearchStr.replace("_INPUT_",'<input type="search" />'):""===sSearchStr?'<input type="search" />':sSearchStr+' <input type="search" />';var nFilter=document.createElement("div");nFilter.className=oSettings.oClasses.sFilter,nFilter.innerHTML="<label>"+sSearchStr+"</label>",oSettings.aanFeatures.f||(nFilter.id=oSettings.sTableId+"_filter");var jqFilter=$('input[type="search"]',nFilter);return nFilter._DT_Input=jqFilter[0],jqFilter.val(oPreviousSearch.sSearch.replace('"',"&quot;")),jqFilter.bind("keyup.DT search.DT",function(e){for(var n=oSettings.aanFeatures.f,val=""===this.value?"":this.value,i=0,iLen=n.length;iLen>i;i++)n[i]!=$(this).parents("div.dataTables_filter")[0]&&$(n[i]._DT_Input).val(val);val!=oPreviousSearch.sSearch&&(_fnFilterComplete(oSettings,{sSearch:val,bRegex:oPreviousSearch.bRegex,bSmart:oPreviousSearch.bSmart,bCaseInsensitive:oPreviousSearch.bCaseInsensitive}),oSettings._iDisplayStart=0,_fnCalculateEnd(oSettings),_fnDraw(oSettings))}),jqFilter.attr("aria-controls",oSettings.sTableId).bind("keypress.DT",function(e){return 13==e.keyCode?!1:void 0}),nFilter}function _fnFilterComplete(oSettings,oInput,iForce){var oPrevSearch=oSettings.oPreviousSearch,aoPrevSearch=oSettings.aoPreSearchCols,fnSaveFilter=function(oFilter){oPrevSearch.sSearch=oFilter.sSearch,oPrevSearch.bRegex=oFilter.bRegex,oPrevSearch.bSmart=oFilter.bSmart,oPrevSearch.bCaseInsensitive=oFilter.bCaseInsensitive};if(oSettings.oFeatures.bServerSide)fnSaveFilter(oInput);else{_fnFilter(oSettings,oInput.sSearch,iForce,oInput.bRegex,oInput.bSmart,oInput.bCaseInsensitive),fnSaveFilter(oInput);for(var i=0;i<oSettings.aoPreSearchCols.length;i++)_fnFilterColumn(oSettings,aoPrevSearch[i].sSearch,i,aoPrevSearch[i].bRegex,aoPrevSearch[i].bSmart,aoPrevSearch[i].bCaseInsensitive);_fnFilterCustom(oSettings)}oSettings.bFiltered=!0,$(oSettings.oInstance).trigger("filter",oSettings),_fnBuildSearchArray(oSettings,0)}function _fnFilterCustom(oSettings){for(var afnFilters=DataTable.ext.afnFiltering,aiFilterColumns=_fnGetColumns(oSettings,"bSearchable"),i=0,iLen=afnFilters.length;iLen>i;i++)for(var iCorrector=0,j=0,jLen=oSettings.aiDisplay.length;jLen>j;j++){var iDisIndex=oSettings.aiDisplay[j-iCorrector],bTest=afnFilters[i](oSettings,_fnGetRowData(oSettings,iDisIndex,"filter",aiFilterColumns),iDisIndex);bTest||(oSettings.aiDisplay.splice(j-iCorrector,1),iCorrector++)}}function _fnFilterColumn(oSettings,sInput,iColumn,bRegex,bSmart,bCaseInsensitive){if(""!==sInput)for(var iIndexCorrector=0,rpSearch=_fnFilterCreateSearch(sInput,bRegex,bSmart,bCaseInsensitive),i=oSettings.aiDisplay.length-1;i>=0;i--){var sData=_fnDataToSearch(_fnGetCellData(oSettings,oSettings.aiDisplay[i],iColumn,"filter"),oSettings.aoColumns[iColumn].sType);rpSearch.test(sData)||(oSettings.aiDisplay.splice(i,1),iIndexCorrector++)}}function _fnFilter(oSettings,sInput,iForce,bRegex,bSmart,bCaseInsensitive){var i,rpSearch=_fnFilterCreateSearch(sInput,bRegex,bSmart,bCaseInsensitive),oPrevSearch=oSettings.oPreviousSearch;if(iForce||(iForce=0),0!==DataTable.ext.afnFiltering.length&&(iForce=1),sInput.length<=0)oSettings.aiDisplay.splice(0,oSettings.aiDisplay.length),oSettings.aiDisplay=oSettings.aiDisplayMaster.slice();else if(oSettings.aiDisplay.length==oSettings.aiDisplayMaster.length||oPrevSearch.sSearch.length>sInput.length||1==iForce||0!==sInput.indexOf(oPrevSearch.sSearch))for(oSettings.aiDisplay.splice(0,oSettings.aiDisplay.length),_fnBuildSearchArray(oSettings,1),i=0;i<oSettings.aiDisplayMaster.length;i++)rpSearch.test(oSettings.asDataSearch[i])&&oSettings.aiDisplay.push(oSettings.aiDisplayMaster[i]);else{var iIndexCorrector=0;for(i=0;i<oSettings.asDataSearch.length;i++)rpSearch.test(oSettings.asDataSearch[i])||(oSettings.aiDisplay.splice(i-iIndexCorrector,1),iIndexCorrector++)}}function _fnBuildSearchArray(oSettings,iMaster){if(!oSettings.oFeatures.bServerSide){oSettings.asDataSearch=[];for(var aiFilterColumns=_fnGetColumns(oSettings,"bSearchable"),aiIndex=1===iMaster?oSettings.aiDisplayMaster:oSettings.aiDisplay,i=0,iLen=aiIndex.length;iLen>i;i++)oSettings.asDataSearch[i]=_fnBuildSearchRow(oSettings,_fnGetRowData(oSettings,aiIndex[i],"filter",aiFilterColumns))}}function _fnBuildSearchRow(oSettings,aData){for(var idx=0,aoColumns=oSettings.aoColumns,i=0,len=aoColumns.length;len>i;i++)aData[idx]=_fnDataToSearch(aData[idx],aoColumns[i].sType),aoColumns[i].bSearchable&&idx++;var sSearch=aData.join("  ");return-1!==sSearch.indexOf("&")&&(sSearch=$("<div>").html(sSearch).text()),sSearch.replace(/[\n\r]/g," ")}function _fnFilterCreateSearch(sSearch,bRegex,bSmart,bCaseInsensitive){var asSearch,sRegExpString=bRegex?sSearch:_fnEscapeRegex(sSearch);return bSmart&&(asSearch=sRegExpString.split(" "),sRegExpString="^(?=.*?"+asSearch.join(")(?=.*?")+").*$"),new RegExp(sRegExpString,bCaseInsensitive?"i":"")}function _fnDataToSearch(sData,sType){return"function"==typeof DataTable.ext.ofnSearch[sType]?DataTable.ext.ofnSearch[sType](sData):null===sData?"":"html"==sType?sData.replace(/[\r\n]/g," ").replace(/<.*?>/g,""):"string"==typeof sData?sData.replace(/[\r\n]/g," "):sData}function _fnEscapeRegex(sVal){var acEscape=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^","-"],reReplace=new RegExp("(\\"+acEscape.join("|\\")+")","g");return sVal.replace(reReplace,"\\$1")}function _fnFeatureHtmlInfo(oSettings){var nInfo=document.createElement("div");return nInfo.className=oSettings.oClasses.sInfo,oSettings.aanFeatures.i||(oSettings.aoDrawCallback.push({fn:_fnUpdateInfo,sName:"information"}),nInfo.id=oSettings.sTableId+"_info"),oSettings.nTable.setAttribute("aria-describedby",oSettings.sTableId+"_info"),nInfo}function _fnUpdateInfo(oSettings){if(oSettings.oFeatures.bInfo&&0!==oSettings.aanFeatures.i.length){var sOut,oLang=oSettings.oLanguage,iStart=oSettings._iDisplayStart+1,iEnd=oSettings.fnDisplayEnd(),iMax=oSettings.fnRecordsTotal(),iTotal=oSettings.fnRecordsDisplay();sOut=0===iTotal?oLang.sInfoEmpty:oLang.sInfo,iTotal!=iMax&&(sOut+=" "+oLang.sInfoFiltered),sOut+=oLang.sInfoPostFix,sOut=_fnInfoMacros(oSettings,sOut),null!==oLang.fnInfoCallback&&(sOut=oLang.fnInfoCallback.call(oSettings.oInstance,oSettings,iStart,iEnd,iMax,iTotal,sOut));for(var n=oSettings.aanFeatures.i,i=0,iLen=n.length;iLen>i;i++)$(n[i]).html(sOut)}}function _fnInfoMacros(oSettings,str){var iStart=oSettings.oScroll.bInfinite?1:oSettings._iDisplayStart+1,sStart=oSettings.fnFormatNumber(iStart),iEnd=oSettings.fnDisplayEnd(),sEnd=oSettings.fnFormatNumber(iEnd),iTotal=oSettings.fnRecordsDisplay(),sTotal=oSettings.fnFormatNumber(iTotal),iMax=oSettings.fnRecordsTotal(),sMax=oSettings.fnFormatNumber(iMax);return str.replace(/_START_/g,sStart).replace(/_END_/g,sEnd).replace(/_TOTAL_/g,sTotal).replace(/_MAX_/g,sMax)}function _fnInitialise(oSettings){var i,iLen,iAjaxStart=oSettings.iInitDisplayStart;if(oSettings.bInitialised===!1)return void setTimeout(function(){_fnInitialise(oSettings)},200);for(_fnAddOptionsHtml(oSettings),_fnBuildHead(oSettings),_fnDrawHead(oSettings,oSettings.aoHeader),oSettings.nTFoot&&_fnDrawHead(oSettings,oSettings.aoFooter),_fnProcessingDisplay(oSettings,!0),oSettings.oFeatures.bAutoWidth&&_fnCalculateColumnWidths(oSettings),i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)null!==oSettings.aoColumns[i].sWidth&&(oSettings.aoColumns[i].nTh.style.width=_fnStringToCss(oSettings.aoColumns[i].sWidth));if(_fnReDraw(oSettings),(oSettings.sAjaxSource||oSettings.ajax)&&!oSettings.oFeatures.bServerSide){return void _fnBuildAjax(oSettings,[],function(json){var aData=_fnAjaxDataSrc(oSettings,json);for(i=0;i<aData.length;i++)_fnAddData(oSettings,aData[i]);oSettings.iInitDisplayStart=iAjaxStart,_fnReDraw(oSettings),_fnProcessingDisplay(oSettings,!1),_fnInitComplete(oSettings,json)},oSettings)}oSettings.oFeatures.bServerSide||(_fnProcessingDisplay(oSettings,!1),_fnInitComplete(oSettings))}function _fnInitComplete(oSettings,json){oSettings._bInitComplete=!0,_fnCallbackFire(oSettings,"aoInitComplete","init",[oSettings,json])}function _fnLengthChange(settings,val){var end,start=settings._iDisplayStart,records=settings.fnRecordsDisplay(),len=parseInt(val,10);settings._iDisplayLength=len,_fnCalculateEnd(settings),end=settings.fnDisplayEnd(),end===records&&(start=end-len),(-1===len||0>start)&&(start=0),settings._iDisplayStart=start,$(settings.oInstance).trigger("length",[settings,len])}function _fnFeatureHtmlLength(settings){if(settings.oScroll.bInfinite)return null;for(var tableId=settings.sTableId,menu=settings.aLengthMenu,d2=$.isArray(menu[0]),lengths=d2?menu[0]:menu,language=d2?menu[1]:menu,select=$("<select/>",{name:tableId+"_length","aria-controls":tableId}),i=0,ien=lengths.length;ien>i;i++)select[0][i]=new Option(language[i],lengths[i]);var div=$("<div><label/></div>").addClass(settings.oClasses.sLength);settings.aanFeatures.l||(div[0].id=tableId+"_length");var a=settings.oLanguage.sLengthMenu.split(/(_MENU_)/);return div.children().append(a[0]).append(select).append(a[2]),select.val(settings._iDisplayLength).bind("change.DT",function(e){_fnLengthChange(settings,$(this).val()),_fnDraw(settings)}),$(settings.nTable).bind("length",function(e,s,len){select.val(len)}),div[0]}function _fnCalculateEnd(settings){var len=settings._iDisplayLength,calc=settings._iDisplayStart+len,records=settings.aiDisplay.length;settings._iDisplayEnd=!settings.oFeatures.bPaginate||calc>records||-1===len?records:calc}function _fnFeatureHtmlPaginate(settings){if(settings.oScroll.bInfinite)return null;var type=settings.sPaginationType,plugin=DataTable.ext.oPagination[type],redraw=function(settings){_fnCalculateEnd(settings),_fnDraw(settings)},node=$("<div/>").addClass(settings.oClasses.sPaging+type)[0];return plugin.fnInit(settings,node,redraw),settings.aanFeatures.p||settings.aoDrawCallback.push({fn:function(settings){plugin.fnUpdate(settings,redraw)},sName:"pagination"}),node}function _fnPageChange(settings,action){var start=settings._iDisplayStart,len=settings._iDisplayLength,records=settings.fnRecordsDisplay();0===records||-1===len?start=0:"number"==typeof action?(start=action*len,start>records&&(start=0)):"first"==action?start=0:"previous"==action?(start=len>=0?start-len:0,0>start&&(start=0)):"next"==action?records>start+len&&(start+=len):"last"==action?start=Math.floor((records-1)/len)*len:_fnLog(settings,0,"Unknown paging action: "+action);var changed=settings._iDisplayStart!==start;return settings._iDisplayStart=start,$(settings.oInstance).trigger("page",settings),changed}function _fnFeatureHtmlProcessing(oSettings){var nProcessing=document.createElement("div");return oSettings.aanFeatures.r||(nProcessing.id=oSettings.sTableId+"_processing"),nProcessing.innerHTML=oSettings.oLanguage.sProcessing,nProcessing.className=oSettings.oClasses.sProcessing,oSettings.nTable.parentNode.insertBefore(nProcessing,oSettings.nTable),nProcessing}function _fnProcessingDisplay(oSettings,bShow){if(oSettings.oFeatures.bProcessing)for(var an=oSettings.aanFeatures.r,i=0,iLen=an.length;iLen>i;i++)an[i].style.visibility=bShow?"visible":"hidden";$(oSettings.oInstance).trigger("processing",[oSettings,bShow])}function _fnFeatureHtmlTable(oSettings){if(""===oSettings.oScroll.sX&&""===oSettings.oScroll.sY)return oSettings.nTable;var nScroller=document.createElement("div"),nScrollHead=document.createElement("div"),nScrollHeadInner=document.createElement("div"),nScrollBody=document.createElement("div"),nScrollFoot=document.createElement("div"),nScrollFootInner=document.createElement("div"),nScrollHeadTable=oSettings.nTable.cloneNode(!1),nScrollFootTable=oSettings.nTable.cloneNode(!1),nThead=oSettings.nTable.getElementsByTagName("thead")[0],nTfoot=0===oSettings.nTable.getElementsByTagName("tfoot").length?null:oSettings.nTable.getElementsByTagName("tfoot")[0],oClasses=oSettings.oClasses;nScrollHead.appendChild(nScrollHeadInner),nScrollFoot.appendChild(nScrollFootInner),nScrollBody.appendChild(oSettings.nTable),nScroller.appendChild(nScrollHead),nScroller.appendChild(nScrollBody),nScrollHeadInner.appendChild(nScrollHeadTable),nScrollHeadTable.appendChild(nThead),null!==nTfoot&&(nScroller.appendChild(nScrollFoot),nScrollFootInner.appendChild(nScrollFootTable),nScrollFootTable.appendChild(nTfoot)),nScroller.className=oClasses.sScrollWrapper,nScrollHead.className=oClasses.sScrollHead,nScrollHeadInner.className=oClasses.sScrollHeadInner,nScrollBody.className=oClasses.sScrollBody,nScrollFoot.className=oClasses.sScrollFoot,nScrollFootInner.className=oClasses.sScrollFootInner,oSettings.oScroll.bAutoCss&&(nScrollHead.style.overflow="hidden",nScrollHead.style.position="relative",nScrollFoot.style.overflow="hidden",nScrollBody.style.overflow="auto"),nScrollHead.style.border="0",nScrollHead.style.width="100%",nScrollFoot.style.border="0",nScrollHeadInner.style.width=""!==oSettings.oScroll.sXInner?oSettings.oScroll.sXInner:"100%",nScrollHeadTable.removeAttribute("id"),nScrollHeadTable.style.marginLeft="0",oSettings.nTable.style.marginLeft="0",null!==nTfoot&&(nScrollFootTable.removeAttribute("id"),nScrollFootTable.style.marginLeft="0");var nCaption=$(oSettings.nTable).children("caption");return nCaption.length>0&&(nCaption=nCaption[0],"top"===nCaption._captionSide?nScrollHeadTable.appendChild(nCaption):"bottom"===nCaption._captionSide&&nTfoot&&nScrollFootTable.appendChild(nCaption)),""!==oSettings.oScroll.sX&&(nScrollHead.style.width=_fnStringToCss(oSettings.oScroll.sX),nScrollBody.style.width=_fnStringToCss(oSettings.oScroll.sX),null!==nTfoot&&(nScrollFoot.style.width=_fnStringToCss(oSettings.oScroll.sX)),$(nScrollBody).scroll(function(e){nScrollHead.scrollLeft=this.scrollLeft,null!==nTfoot&&(nScrollFoot.scrollLeft=this.scrollLeft)})),""!==oSettings.oScroll.sY&&(nScrollBody.style.height=_fnStringToCss(oSettings.oScroll.sY)),oSettings.aoDrawCallback.push({fn:_fnScrollDraw,sName:"scrolling"}),oSettings.oScroll.bInfinite&&$(nScrollBody).scroll(function(){oSettings.bDrawing||0===$(this).scrollTop()||$(this).scrollTop()+$(this).height()>$(oSettings.nTable).height()-oSettings.oScroll.iLoadGap&&oSettings.fnDisplayEnd()<oSettings.fnRecordsDisplay()&&(_fnPageChange(oSettings,"next"),_fnCalculateEnd(oSettings),_fnDraw(oSettings))}),oSettings.nScrollHead=nScrollHead,oSettings.nScrollFoot=nScrollFoot,nScroller}function _fnScrollDraw(o){var i,iLen,anHeadToSize,anHeadSizers,anFootSizers,anFootToSize,oStyle,iVis,nTheadSize,nTfootSize,iSanityWidth,nScrollHeadInner=o.nScrollHead.getElementsByTagName("div")[0],nScrollHeadTable=nScrollHeadInner.getElementsByTagName("table")[0],nScrollBody=o.nTable.parentNode,aApplied=[],aAppliedFooter=[],nScrollFootInner=null!==o.nTFoot?o.nScrollFoot.getElementsByTagName("div")[0]:null,nScrollFootTable=null!==o.nTFoot?nScrollFootInner.getElementsByTagName("table")[0]:null,ie67=o.oBrowser.bScrollOversize,zeroOut=function(nSizer){oStyle=nSizer.style,oStyle.paddingTop="0",oStyle.paddingBottom="0",oStyle.borderTopWidth="0",oStyle.borderBottomWidth="0",oStyle.height=0};$(o.nTable).children("thead, tfoot").remove(),nTheadSize=$(o.nTHead).clone()[0],o.nTable.insertBefore(nTheadSize,o.nTable.childNodes[0]),anHeadToSize=o.nTHead.getElementsByTagName("tr"),anHeadSizers=nTheadSize.getElementsByTagName("tr"),$("th, td",nTheadSize).removeAttr("tabindex"),null!==o.nTFoot&&(nTfootSize=$(o.nTFoot).clone()[0],o.nTable.insertBefore(nTfootSize,o.nTable.childNodes[1]),anFootToSize=o.nTFoot.getElementsByTagName("tr"),anFootSizers=nTfootSize.getElementsByTagName("tr")),""===o.oScroll.sX&&(nScrollBody.style.width="100%",nScrollHeadInner.parentNode.style.width="100%");var nThs=_fnGetUniqueThs(o,nTheadSize);for(i=0,iLen=nThs.length;iLen>i;i++)iVis=_fnVisibleToColumnIndex(o,i),nThs[i].style.width=o.aoColumns[iVis].sWidth;if(null!==o.nTFoot&&_fnApplyToChildren(function(n){n.style.width=""},anFootSizers),o.oScroll.bCollapse&&""!==o.oScroll.sY&&(nScrollBody.style.height=nScrollBody.offsetHeight+o.nTHead.offsetHeight+"px"),iSanityWidth=$(o.nTable).outerWidth(),""===o.oScroll.sX?(o.nTable.style.width="100%",ie67&&($("tbody",nScrollBody).height()>nScrollBody.offsetHeight||"scroll"==$(nScrollBody).css("overflow-y"))&&(o.nTable.style.width=_fnStringToCss($(o.nTable).outerWidth()-o.oScroll.iBarWidth))):""!==o.oScroll.sXInner?o.nTable.style.width=_fnStringToCss(o.oScroll.sXInner):iSanityWidth==$(nScrollBody).width()&&$(nScrollBody).height()<$(o.nTable).height()?(o.nTable.style.width=_fnStringToCss(iSanityWidth-o.oScroll.iBarWidth),$(o.nTable).outerWidth()>iSanityWidth-o.oScroll.iBarWidth&&(o.nTable.style.width=_fnStringToCss(iSanityWidth))):o.nTable.style.width=_fnStringToCss(iSanityWidth),iSanityWidth=$(o.nTable).outerWidth(),_fnApplyToChildren(zeroOut,anHeadSizers),_fnApplyToChildren(function(nSizer){aApplied.push(_fnStringToCss($(nSizer).width()))},anHeadSizers),_fnApplyToChildren(function(nToSize,i){nToSize.style.width=aApplied[i]},anHeadToSize),$(anHeadSizers).height(0),null!==o.nTFoot&&(_fnApplyToChildren(zeroOut,anFootSizers),_fnApplyToChildren(function(nSizer){aAppliedFooter.push(_fnStringToCss($(nSizer).width()))},anFootSizers),_fnApplyToChildren(function(nToSize,i){nToSize.style.width=aAppliedFooter[i]},anFootToSize),$(anFootSizers).height(0)),_fnApplyToChildren(function(nSizer,i){nSizer.innerHTML="",nSizer.style.width=aApplied[i]},anHeadSizers),null!==o.nTFoot&&_fnApplyToChildren(function(nSizer,i){nSizer.innerHTML="",nSizer.style.width=aAppliedFooter[i]},anFootSizers),$(o.nTable).outerWidth()<iSanityWidth){var iCorrection=nScrollBody.scrollHeight>nScrollBody.offsetHeight||"scroll"==$(nScrollBody).css("overflow-y")?iSanityWidth+o.oScroll.iBarWidth:iSanityWidth;ie67&&(nScrollBody.scrollHeight>nScrollBody.offsetHeight||"scroll"==$(nScrollBody).css("overflow-y"))&&(o.nTable.style.width=_fnStringToCss(iCorrection-o.oScroll.iBarWidth)),nScrollBody.style.width=_fnStringToCss(iCorrection),o.nScrollHead.style.width=_fnStringToCss(iCorrection),null!==o.nTFoot&&(o.nScrollFoot.style.width=_fnStringToCss(iCorrection)),""===o.oScroll.sX?_fnLog(o,1,"The table cannot fit into the current element which will cause column misalignment. The table has been drawn at its minimum possible width."):""!==o.oScroll.sXInner&&_fnLog(o,1,"The table cannot fit into the current element which will cause column misalignment. Increase the sScrollXInner value or remove it to allow automatic calculation")}else nScrollBody.style.width=_fnStringToCss("100%"),o.nScrollHead.style.width=_fnStringToCss("100%"),null!==o.nTFoot&&(o.nScrollFoot.style.width=_fnStringToCss("100%"));if(""===o.oScroll.sY&&ie67&&(nScrollBody.style.height=_fnStringToCss(o.nTable.offsetHeight+o.oScroll.iBarWidth)),""!==o.oScroll.sY&&o.oScroll.bCollapse){nScrollBody.style.height=_fnStringToCss(o.oScroll.sY);var iExtra=""!==o.oScroll.sX&&o.nTable.offsetWidth>nScrollBody.offsetWidth?o.oScroll.iBarWidth:0;o.nTable.offsetHeight<nScrollBody.offsetHeight&&(nScrollBody.style.height=_fnStringToCss(o.nTable.offsetHeight+iExtra))}var iOuterWidth=$(o.nTable).outerWidth();nScrollHeadTable.style.width=_fnStringToCss(iOuterWidth),nScrollHeadInner.style.width=_fnStringToCss(iOuterWidth);var bScrolling=$(o.nTable).height()>nScrollBody.clientHeight||"scroll"==$(nScrollBody).css("overflow-y"),padding=o.oBrowser.bScrollbarLeft?"paddingLeft":"paddingRight";nScrollHeadInner.style[padding]=bScrolling?o.oScroll.iBarWidth+"px":"0px",null!==o.nTFoot&&(nScrollFootTable.style.width=_fnStringToCss(iOuterWidth),nScrollFootInner.style.width=_fnStringToCss(iOuterWidth),nScrollFootInner.style[padding]=bScrolling?o.oScroll.iBarWidth+"px":"0px"),$(nScrollBody).scroll(),(o.bSorted||o.bFiltered)&&(nScrollBody.scrollTop=0)}function _fnApplyToChildren(fn,an1,an2){for(var nNode1,nNode2,index=0,i=0,iLen=an1.length;iLen>i;){for(nNode1=an1[i].firstChild,nNode2=an2?an2[i].firstChild:null;nNode1;)1===nNode1.nodeType&&(an2?fn(nNode1,nNode2,index):fn(nNode1,index),index++),nNode1=nNode1.nextSibling,nNode2=an2?nNode2.nextSibling:null;i++}}function _fnConvertToWidth(sWidth,nParent){if(!sWidth)return 0;nParent||(nParent=document.body);var n=$("<div/>").css("width",_fnStringToCss(sWidth)).appendTo(nParent),width=n[0].offsetWidth;return n.remove(),width}function _fnCalculateColumnWidths(oSettings){var iTmpWidth,i,iCorrector,iWidth,iUserInputs=(oSettings.nTable.offsetWidth,0),iVisibleColumns=0,iColums=oSettings.aoColumns.length,oHeaders=$("th",oSettings.nTHead),widthAttr=oSettings.nTable.getAttribute("width"),nWrapper=oSettings.nTable.parentNode;for(i=0;iColums>i;i++)oSettings.aoColumns[i].bVisible&&(iVisibleColumns++,null!==oSettings.aoColumns[i].sWidth&&(iTmpWidth=_fnConvertToWidth(oSettings.aoColumns[i].sWidthOrig,nWrapper),null!==iTmpWidth&&(oSettings.aoColumns[i].sWidth=_fnStringToCss(iTmpWidth)),iUserInputs++));if(iColums==oHeaders.length&&0===iUserInputs&&iVisibleColumns==iColums&&""===oSettings.oScroll.sX&&""===oSettings.oScroll.sY)for(i=0;i<oSettings.aoColumns.length;i++)iTmpWidth=$(oHeaders[i]).width(),null!==iTmpWidth&&(oSettings.aoColumns[i].sWidth=_fnStringToCss(iTmpWidth));else{var nCalcTmp=oSettings.nTable.cloneNode(!1),nTheadClone=oSettings.nTHead.cloneNode(!0),nBody=document.createElement("tbody"),nTr=document.createElement("tr");nCalcTmp.removeAttribute("id"),nCalcTmp.appendChild(nTheadClone),null!==oSettings.nTFoot&&(nCalcTmp.appendChild(oSettings.nTFoot.cloneNode(!0)),_fnApplyToChildren(function(n){n.style.width=""},nCalcTmp.getElementsByTagName("tr"))),nCalcTmp.appendChild(nBody),nBody.appendChild(nTr);var jqColSizing=$("thead th",nCalcTmp);0===jqColSizing.length&&(jqColSizing=$("tbody tr:eq(0)>td",nCalcTmp));var nThs=_fnGetUniqueThs(oSettings,nTheadClone);for(iCorrector=0,i=0;iColums>i;i++){var oColumn=oSettings.aoColumns[i];oColumn.bVisible&&null!==oColumn.sWidthOrig&&""!==oColumn.sWidthOrig?nThs[i-iCorrector].style.width=_fnStringToCss(oColumn.sWidthOrig):oColumn.bVisible?nThs[i-iCorrector].style.width="":iCorrector++}for(i=0;iColums>i;i++)if(oSettings.aoColumns[i].bVisible){var nTd=_fnGetWidestNode(oSettings,i);null!==nTd&&(nTd=nTd.cloneNode(!0),""!==oSettings.aoColumns[i].sContentPadding&&(nTd.innerHTML+=oSettings.aoColumns[i].sContentPadding),nTr.appendChild(nTd))}nWrapper.appendChild(nCalcTmp),""!==oSettings.oScroll.sX&&""!==oSettings.oScroll.sXInner?nCalcTmp.style.width=_fnStringToCss(oSettings.oScroll.sXInner):""!==oSettings.oScroll.sX?(nCalcTmp.style.width="",$(nCalcTmp).width()<nWrapper.offsetWidth&&(nCalcTmp.style.width=_fnStringToCss(nWrapper.offsetWidth))):""!==oSettings.oScroll.sY?nCalcTmp.style.width=_fnStringToCss(nWrapper.offsetWidth):widthAttr&&(nCalcTmp.style.width=_fnStringToCss(widthAttr)),nCalcTmp.style.visibility="hidden",_fnScrollingWidthAdjust(oSettings,nCalcTmp);var oNodes=$("tbody tr:eq(0)",nCalcTmp).children();if(0===oNodes.length&&(oNodes=_fnGetUniqueThs(oSettings,$("thead",nCalcTmp)[0])),""!==oSettings.oScroll.sX){var iTotal=0;for(iCorrector=0,i=0;i<oSettings.aoColumns.length;i++)oSettings.aoColumns[i].bVisible&&(iTotal+=null===oSettings.aoColumns[i].sWidthOrig?$(oNodes[iCorrector]).outerWidth():parseInt(oSettings.aoColumns[i].sWidth.replace("px",""),10)+($(oNodes[iCorrector]).outerWidth()-$(oNodes[iCorrector]).width()),iCorrector++);nCalcTmp.style.width=_fnStringToCss(iTotal),oSettings.nTable.style.width=_fnStringToCss(iTotal)}for(iCorrector=0,i=0;i<oSettings.aoColumns.length;i++)oSettings.aoColumns[i].bVisible&&(iWidth=$(oNodes[iCorrector]).width(),null!==iWidth&&iWidth>0&&(oSettings.aoColumns[i].sWidth=_fnStringToCss(iWidth)),iCorrector++);var cssWidth=$(nCalcTmp).css("width");oSettings.nTable.style.width=-1!==cssWidth.indexOf("%")?cssWidth:_fnStringToCss($(nCalcTmp).outerWidth()),nCalcTmp.parentNode.removeChild(nCalcTmp)}widthAttr&&(oSettings.nTable.style.width=_fnStringToCss(widthAttr),oSettings._attachedResizing||""===oSettings.oScroll.sY&&""===oSettings.oScroll.sX||($(window).bind("resize.DT-"+oSettings.sInstance,function(){_fnScrollDraw(oSettings)}),oSettings._attachedResizing=!0))}function _fnScrollingWidthAdjust(oSettings,n){if(""===oSettings.oScroll.sX&&""!==oSettings.oScroll.sY){$(n).width();n.style.width=_fnStringToCss($(n).outerWidth()-oSettings.oScroll.iBarWidth)}else""!==oSettings.oScroll.sX&&(n.style.width=_fnStringToCss($(n).outerWidth()))}function _fnGetWidestNode(oSettings,iCol){var iMaxIndex=_fnGetMaxLenString(oSettings,iCol);if(0>iMaxIndex)return null;if(null===oSettings.aoData[iMaxIndex].nTr){var n=document.createElement("td");return n.innerHTML=_fnGetCellData(oSettings,iMaxIndex,iCol,""),n}return _fnGetTdNodes(oSettings,iMaxIndex)[iCol]}function _fnGetMaxLenString(oSettings,iCol){for(var iMax=-1,iMaxIndex=-1,i=0;i<oSettings.aoData.length;i++){var s=_fnGetCellData(oSettings,i,iCol,"display")+"";s=s.replace(/<.*?>/g,""),s.length>iMax&&(iMax=s.length,iMaxIndex=i)}return iMaxIndex}function _fnStringToCss(s){if(null===s)return"0px";if("number"==typeof s)return 0>s?"0px":s+"px";var c=s.charCodeAt(s.length-1);return 48>c||c>57?s:s+"px"}function _fnScrollBarWidth(){if(!DataTable.__scrollbarWidth){var inner=$("<p/>").css({width:"100%",height:200,padding:0})[0],outer=$("<div/>").css({position:"absolute",top:0,left:0,width:200,height:150,padding:0,overflow:"hidden",visibility:"hidden"}).append(inner).appendTo("body"),w1=inner.offsetWidth;outer.css("overflow","scroll");var w2=inner.offsetWidth;w1===w2&&(w2=outer[0].clientWidth),outer.remove(),DataTable.__scrollbarWidth=w1-w2}return DataTable.__scrollbarWidth}function _fnSort(oSettings,bApplyClasses){var i,iLen,j,jLen,k,kLen,sDataType,nTh,fnFormatter,aDataSort,data,iCol,sType,oSort,aSort=[],aiOrig=[],oExtSort=DataTable.ext.oSort,aoData=oSettings.aoData,aoColumns=oSettings.aoColumns,oAria=oSettings.oLanguage.oAria,iFormatters=0,aaNestedSort=null!==oSettings.aaSortingFixed?oSettings.aaSortingFixed.concat(oSettings.aaSorting):oSettings.aaSorting.slice();for(i=0;i<aaNestedSort.length;i++)for(aDataSort=aoColumns[aaNestedSort[i][0]].aDataSort,k=0,kLen=aDataSort.length;kLen>k;k++)iCol=aDataSort[k],sType=aoColumns[iCol].sType||"string",fnFormatter=oExtSort[sType+"-pre"],aSort.push({col:iCol,dir:aaNestedSort[i][1],index:aaNestedSort[i][2],type:sType,format:fnFormatter}),fnFormatter&&iFormatters++;if(!oSettings.oFeatures.bServerSide&&0!==aSort.length){for(i=0;i<aSort.length;i++){var iColumn=aSort[i].col,iVisColumn=_fnColumnIndexToVisible(oSettings,iColumn);if(sDataType=oSettings.aoColumns[iColumn].sSortDataType,DataTable.ext.afnSortData[sDataType]){var aData=DataTable.ext.afnSortData[sDataType].call(oSettings.oInstance,oSettings,iColumn,iVisColumn);if(aData.length===aoData.length)for(j=0,jLen=aoData.length;jLen>j;j++)_fnSetCellData(oSettings,j,iColumn,aData[j]);else _fnLog(oSettings,0,"Returned data sort array (col "+iColumn+") is the wrong length")}}for(i=0,iLen=oSettings.aiDisplayMaster.length;iLen>i;i++)aiOrig[oSettings.aiDisplayMaster[i]]=i;for(j=0;j<aSort.length;j++)for(oSort=aSort[j],i=0,iLen=aoData.length;iLen>i;i++)data=_fnGetCellData(oSettings,i,oSort.col,"sort"),aoData[i]._aSortData[oSort.col]=oSort.format?oSort.format(data):data;iFormatters===aSort.length?oSettings.aiDisplayMaster.sort(function(a,b){var x,y,k,test,sort,len=aSort.length,dataA=aoData[a]._aSortData,dataB=aoData[b]._aSortData;for(k=0;len>k;k++)if(sort=aSort[k],x=dataA[sort.col],y=dataB[sort.col],test=y>x?-1:x>y?1:0,0!==test)return"asc"===sort.dir?test:-test;return x=aiOrig[a],y=aiOrig[b],y>x?-1:x>y?1:0}):oSettings.aiDisplayMaster.sort(function(a,b){var x,y,k,test,sort,len=aSort.length,dataA=aoData[a]._aSortData,dataB=aoData[b]._aSortData;for(k=0;len>k;k++)if(sort=aSort[k],x=dataA[sort.col],y=dataB[sort.col],test=oExtSort[sort.type+"-"+sort.dir](x,y),0!==test)return test;return x=aiOrig[a],y=aiOrig[b],y>x?-1:x>y?1:0})}for(bApplyClasses!==undefined&&!bApplyClasses||oSettings.oFeatures.bDeferRender||_fnSortingClasses(oSettings),i=0,iLen=oSettings.aoColumns.length;iLen>i;i++){var sTitle=aoColumns[i].sTitle.replace(/<.*?>/g,"");if(nTh=aoColumns[i].nTh,nTh.removeAttribute("aria-sort"),nTh.removeAttribute("aria-label"),aoColumns[i].bSortable)if(aSort.length>0&&aSort[0].col==i){nTh.setAttribute("aria-sort","asc"==aSort[0].dir?"ascending":"descending");var nextSort=aoColumns[i].asSorting[aSort[0].index+1]?aoColumns[i].asSorting[aSort[0].index+1]:aoColumns[i].asSorting[0];
nTh.setAttribute("aria-label",sTitle+("asc"==nextSort?oAria.sSortAscending:oAria.sSortDescending))}else nTh.setAttribute("aria-label",sTitle+("asc"==aoColumns[i].asSorting[0]?oAria.sSortAscending:oAria.sSortDescending));else nTh.setAttribute("aria-label",sTitle)}oSettings.bSorted=!0,$(oSettings.oInstance).trigger("sort",oSettings)}function _fnSortAttachListener(oSettings,nNode,iDataIndex,fnCallback){_fnBindAction(nNode,{},function(e){if(oSettings.aoColumns[iDataIndex].bSortable!==!1){var fnInnerSorting=function(){var iColumn,iNextSort;if(e.shiftKey){for(var bFound=!1,i=0;i<oSettings.aaSorting.length;i++)if(oSettings.aaSorting[i][0]==iDataIndex){bFound=!0,iColumn=oSettings.aaSorting[i][0],iNextSort=oSettings.aaSorting[i][2]+1,oSettings.aoColumns[iColumn].asSorting[iNextSort]?(oSettings.aaSorting[i][1]=oSettings.aoColumns[iColumn].asSorting[iNextSort],oSettings.aaSorting[i][2]=iNextSort):oSettings.aaSorting.splice(i,1);break}bFound===!1&&oSettings.aaSorting.push([iDataIndex,oSettings.aoColumns[iDataIndex].asSorting[0],0])}else 1==oSettings.aaSorting.length&&oSettings.aaSorting[0][0]==iDataIndex?(iColumn=oSettings.aaSorting[0][0],iNextSort=oSettings.aaSorting[0][2]+1,oSettings.aoColumns[iColumn].asSorting[iNextSort]||(iNextSort=0),oSettings.aaSorting[0][1]=oSettings.aoColumns[iColumn].asSorting[iNextSort],oSettings.aaSorting[0][2]=iNextSort):(oSettings.aaSorting.splice(0,oSettings.aaSorting.length),oSettings.aaSorting.push([iDataIndex,oSettings.aoColumns[iDataIndex].asSorting[0],0]));_fnReDraw(oSettings)};oSettings.oFeatures.bProcessing?(_fnProcessingDisplay(oSettings,!0),setTimeout(function(){fnInnerSorting(),oSettings.oFeatures.bServerSide||_fnProcessingDisplay(oSettings,!1)},0)):fnInnerSorting(),"function"==typeof fnCallback&&fnCallback(oSettings)}})}function _fnSortingClasses(oSettings){var i,iLen,j,iFound,aaSort,sClass,iColumns=oSettings.aoColumns.length,oClasses=oSettings.oClasses;for(i=0;iColumns>i;i++)oSettings.aoColumns[i].bSortable&&$(oSettings.aoColumns[i].nTh).removeClass(oClasses.sSortAsc+" "+oClasses.sSortDesc+" "+oSettings.aoColumns[i].sSortingClass);for(aaSort=null!==oSettings.aaSortingFixed?oSettings.aaSortingFixed.concat(oSettings.aaSorting):oSettings.aaSorting.slice(),i=0;i<oSettings.aoColumns.length;i++)if(oSettings.aoColumns[i].bSortable){for(sClass=oSettings.aoColumns[i].sSortingClass,iFound=-1,j=0;j<aaSort.length;j++)if(aaSort[j][0]==i){sClass="asc"==aaSort[j][1]?oClasses.sSortAsc:oClasses.sSortDesc,iFound=j;break}if($(oSettings.aoColumns[i].nTh).addClass(sClass),oSettings.bJUI){var jqSpan=$("span."+oClasses.sSortIcon,oSettings.aoColumns[i].nTh);jqSpan.removeClass(oClasses.sSortJUIAsc+" "+oClasses.sSortJUIDesc+" "+oClasses.sSortJUI+" "+oClasses.sSortJUIAscAllowed+" "+oClasses.sSortJUIDescAllowed);var sSpanClass;sSpanClass=-1==iFound?oSettings.aoColumns[i].sSortingClassJUI:"asc"==aaSort[iFound][1]?oClasses.sSortJUIAsc:oClasses.sSortJUIDesc,jqSpan.addClass(sSpanClass)}}else $(oSettings.aoColumns[i].nTh).addClass(oSettings.aoColumns[i].sSortingClass);if(sClass=oClasses.sSortColumn,oSettings.oFeatures.bSort&&oSettings.oFeatures.bSortClasses){var iClass,iTargetCol,nTds=_fnGetTdNodes(oSettings),asClasses=[];for(i=0;iColumns>i;i++)asClasses.push("");for(i=0,iClass=1;i<aaSort.length;i++)iTargetCol=parseInt(aaSort[i][0],10),asClasses[iTargetCol]=sClass+iClass,3>iClass&&iClass++;var sTmpClass,sCurrentClass,sNewClass,reClass=new RegExp(sClass+"[123]");for(i=0,iLen=nTds.length;iLen>i;i++)iTargetCol=i%iColumns,sCurrentClass=nTds[i].className,sNewClass=asClasses[iTargetCol],sTmpClass=sCurrentClass.replace(reClass,sNewClass),sTmpClass!=sCurrentClass?nTds[i].className=$.trim(sTmpClass):sNewClass.length>0&&-1==sCurrentClass.indexOf(sNewClass)&&(nTds[i].className=sCurrentClass+" "+sNewClass)}}function _fnSaveState(oSettings){if(oSettings.oFeatures.bStateSave&&!oSettings.bDestroying){var i,iLen,bInfinite=oSettings.oScroll.bInfinite,oState={iCreate:(new Date).getTime(),iStart:bInfinite?0:oSettings._iDisplayStart,iEnd:bInfinite?oSettings._iDisplayLength:oSettings._iDisplayEnd,iLength:oSettings._iDisplayLength,aaSorting:$.extend(!0,[],oSettings.aaSorting),oSearch:$.extend(!0,{},oSettings.oPreviousSearch),aoSearchCols:$.extend(!0,[],oSettings.aoPreSearchCols),abVisCols:[]};for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)oState.abVisCols.push(oSettings.aoColumns[i].bVisible);_fnCallbackFire(oSettings,"aoStateSaveParams","stateSaveParams",[oSettings,oState]),oSettings.fnStateSaveCallback.call(oSettings.oInstance,oSettings,oState)}}function _fnLoadState(oSettings,oInit){if(oSettings.oFeatures.bStateSave){var oData=oSettings.fnStateLoadCallback.call(oSettings.oInstance,oSettings);if(oData){var abStateLoad=_fnCallbackFire(oSettings,"aoStateLoadParams","stateLoadParams",[oSettings,oData]);if(-1===$.inArray(!1,abStateLoad)&&!(oData.iCreate<(new Date).getTime()-1e3*oSettings.iStateDuration)){oSettings.oLoadedState=$.extend(!0,{},oData),oSettings._iDisplayStart=oData.iStart,oSettings.iInitDisplayStart=oData.iStart,oSettings._iDisplayEnd=oData.iEnd,oSettings._iDisplayLength=oData.iLength,oSettings.aaSorting=oData.aaSorting.slice(),oSettings.saved_aaSorting=oData.aaSorting.slice(),$.extend(oSettings.oPreviousSearch,oData.oSearch),$.extend(!0,oSettings.aoPreSearchCols,oData.aoSearchCols),oInit.saved_aoColumns=[];for(var i=0;i<oData.abVisCols.length;i++)oInit.saved_aoColumns[i]={},oInit.saved_aoColumns[i].bVisible=oData.abVisCols[i];_fnCallbackFire(oSettings,"aoStateLoaded","stateLoaded",[oSettings,oData])}}}}function _fnSettingsFromNode(nTable){for(var i=0;i<DataTable.settings.length;i++)if(DataTable.settings[i].nTable===nTable)return DataTable.settings[i];return null}function _fnGetTrNodes(oSettings){for(var aNodes=[],aoData=oSettings.aoData,i=0,iLen=aoData.length;iLen>i;i++)null!==aoData[i].nTr&&aNodes.push(aoData[i].nTr);return aNodes}function _fnGetTdNodes(oSettings,iIndividualRow){var iCorrector,anTds,nTd,iRow,iColumn,iColumns,oData,sNodeName,anReturn=[],iRows=oSettings.aoData.length,iStart=0,iEnd=iRows;for(iIndividualRow!==undefined&&(iStart=iIndividualRow,iEnd=iIndividualRow+1),iRow=iStart;iEnd>iRow;iRow++)if(oData=oSettings.aoData[iRow],null!==oData.nTr){for(anTds=[],nTd=oData.nTr.firstChild;nTd;)sNodeName=nTd.nodeName.toLowerCase(),"td"!=sNodeName&&"th"!=sNodeName||anTds.push(nTd),nTd=nTd.nextSibling;for(iCorrector=0,iColumn=0,iColumns=oSettings.aoColumns.length;iColumns>iColumn;iColumn++)oSettings.aoColumns[iColumn].bVisible?anReturn.push(anTds[iColumn-iCorrector]):(anReturn.push(oData._anHidden[iColumn]),iCorrector++)}return anReturn}function _fnLog(oSettings,iLevel,sMesg){var sAlert=null===oSettings?"DataTables warning: "+sMesg:"DataTables warning (table id = '"+oSettings.sTableId+"'): "+sMesg;if(0===iLevel){if("alert"!=DataTable.ext.sErrMode)throw new Error(sAlert);return void alert(sAlert)}window.console&&console.log&&console.log(sAlert)}function _fnMap(oRet,oSrc,sName,sMappedName){sMappedName===undefined&&(sMappedName=sName),oSrc[sName]!==undefined&&(oRet[sMappedName]=oSrc[sName])}function _fnExtend(oOut,oExtender){var val;for(var prop in oExtender)oExtender.hasOwnProperty(prop)&&(val=oExtender[prop],$.isPlainObject(val)?(oOut[prop]||(oOut[prop]={}),$.extend(!0,oOut[prop],val)):oOut[prop]=val);return oOut}function _fnBindAction(n,oData,fn){$(n).bind("click.DT",oData,function(e){n.blur(),fn(e)}).bind("keypress.DT",oData,function(e){13===e.which&&fn(e)}).bind("selectstart.DT",function(){return!1})}function _fnCallbackReg(oSettings,sStore,fn,sName){fn&&oSettings[sStore].push({fn:fn,sName:sName})}function _fnCallbackFire(oSettings,sStore,sTrigger,aArgs){for(var aoStore=oSettings[sStore],aRet=[],i=aoStore.length-1;i>=0;i--)aRet.push(aoStore[i].fn.apply(oSettings.oInstance,aArgs));return null!==sTrigger&&$(oSettings.oInstance).trigger(sTrigger,aArgs),aRet}var DataTable,__reArray=/\[.*?\]$/,__reFn=/\(\)$/;DataTable=function(oInit){function _fnExternApiFunc(sFunc){return function(){var aArgs=[_fnSettingsFromNode(this[DataTable.ext.iApiIndex])].concat(Array.prototype.slice.call(arguments));return DataTable.ext.oApi[sFunc].apply(this,aArgs)}}this.$=function(sSelector,oOpts){var i,iLen,tr,a=[],oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),aoData=oSettings.aoData,aiDisplay=oSettings.aiDisplay,aiDisplayMaster=oSettings.aiDisplayMaster;if(oOpts||(oOpts={}),oOpts=$.extend({},{filter:"none",order:"current",page:"all"},oOpts),"current"==oOpts.page)for(i=oSettings._iDisplayStart,iLen=oSettings.fnDisplayEnd();iLen>i;i++)tr=aoData[aiDisplay[i]].nTr,tr&&a.push(tr);else if("current"==oOpts.order&&"none"==oOpts.filter)for(i=0,iLen=aiDisplayMaster.length;iLen>i;i++)tr=aoData[aiDisplayMaster[i]].nTr,tr&&a.push(tr);else if("current"==oOpts.order&&"applied"==oOpts.filter)for(i=0,iLen=aiDisplay.length;iLen>i;i++)tr=aoData[aiDisplay[i]].nTr,tr&&a.push(tr);else if("original"==oOpts.order&&"none"==oOpts.filter)for(i=0,iLen=aoData.length;iLen>i;i++)tr=aoData[i].nTr,tr&&a.push(tr);else if("original"==oOpts.order&&"applied"==oOpts.filter)for(i=0,iLen=aoData.length;iLen>i;i++)tr=aoData[i].nTr,-1!==$.inArray(i,aiDisplay)&&tr&&a.push(tr);else _fnLog(oSettings,1,"Unknown selection options");var jqA=$(a),jqTRs=jqA.filter(sSelector),jqDescendants=jqA.find(sSelector);return $([].concat($.makeArray(jqTRs),$.makeArray(jqDescendants)))},this._=function(sSelector,oOpts){var i,iLen,aOut=[],aTrs=this.$(sSelector,oOpts);for(i=0,iLen=aTrs.length;iLen>i;i++)aOut.push(this.fnGetData(aTrs[i]));return aOut},this.api=function(){return new DataTable.Api(this)},this.fnAddData=function(mData,bRedraw){if(0===mData.length)return[];var iTest,aiReturn=[],oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);if("object"==typeof mData[0]&&null!==mData[0])for(var i=0;i<mData.length;i++){if(iTest=_fnAddData(oSettings,mData[i]),-1==iTest)return aiReturn;aiReturn.push(iTest)}else{if(iTest=_fnAddData(oSettings,mData),-1==iTest)return aiReturn;aiReturn.push(iTest)}return oSettings.aiDisplay=oSettings.aiDisplayMaster.slice(),(bRedraw===undefined||bRedraw)&&_fnReDraw(oSettings),aiReturn},this.fnAdjustColumnSizing=function(bRedraw){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);_fnAdjustColumnSizing(oSettings),bRedraw===undefined||bRedraw?this.fnDraw(!1):""===oSettings.oScroll.sX&&""===oSettings.oScroll.sY||this.oApi._fnScrollDraw(oSettings)},this.fnClearTable=function(bRedraw){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);_fnClearTable(oSettings),(bRedraw===undefined||bRedraw)&&_fnDraw(oSettings)},this.fnClose=function(nTr){for(var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),i=0;i<oSettings.aoOpenRows.length;i++)if(oSettings.aoOpenRows[i].nParent==nTr){var nTrParent=oSettings.aoOpenRows[i].nTr.parentNode;return nTrParent&&nTrParent.removeChild(oSettings.aoOpenRows[i].nTr),oSettings.aoOpenRows.splice(i,1),0}return 1},this.fnDeleteRow=function(mTarget,fnCallBack,bRedraw){var i,iLen,iAODataIndex,oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);iAODataIndex="object"==typeof mTarget?_fnNodeToDataIndex(oSettings,mTarget):mTarget;var oData=oSettings.aoData.splice(iAODataIndex,1);for(i=0,iLen=oSettings.aoData.length;iLen>i;i++)null!==oSettings.aoData[i].nTr&&(oSettings.aoData[i].nTr._DT_RowIndex=i);var iDisplayIndex=$.inArray(iAODataIndex,oSettings.aiDisplay);return oSettings.asDataSearch.splice(iDisplayIndex,1),_fnDeleteIndex(oSettings.aiDisplayMaster,iAODataIndex),_fnDeleteIndex(oSettings.aiDisplay,iAODataIndex),"function"==typeof fnCallBack&&fnCallBack.call(this,oSettings,oData),oSettings._iDisplayStart>=oSettings.fnRecordsDisplay()&&(oSettings._iDisplayStart-=oSettings._iDisplayLength,oSettings._iDisplayStart<0&&(oSettings._iDisplayStart=0)),(bRedraw===undefined||bRedraw)&&(_fnCalculateEnd(oSettings),_fnDraw(oSettings)),oData},this.fnDestroy=function(bRemove){var i,iLen,oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),nOrig=oSettings.nTableWrapper.parentNode,nBody=oSettings.nTBody;if(bRemove=bRemove===undefined?!1:bRemove,oSettings.bDestroying=!0,_fnCallbackFire(oSettings,"aoDestroyCallback","destroy",[oSettings]),!bRemove)for(i=0,iLen=oSettings.aoColumns.length;iLen>i;i++)oSettings.aoColumns[i].bVisible===!1&&this.fnSetColumnVis(i,!0);for($(oSettings.nTableWrapper).unbind(".DT").find("*").unbind(".DT"),$(window).unbind(".DT-"+oSettings.sInstance),$("tbody>tr>td."+oSettings.oClasses.sRowEmpty,oSettings.nTable).parent().remove(),oSettings.nTable!=oSettings.nTHead.parentNode&&($(oSettings.nTable).children("thead").remove(),oSettings.nTable.appendChild(oSettings.nTHead)),oSettings.nTFoot&&oSettings.nTable!=oSettings.nTFoot.parentNode&&($(oSettings.nTable).children("tfoot").remove(),oSettings.nTable.appendChild(oSettings.nTFoot)),oSettings.nTable.parentNode.removeChild(oSettings.nTable),$(oSettings.nTableWrapper).remove(),oSettings.aaSorting=[],oSettings.aaSortingFixed=[],_fnSortingClasses(oSettings),$(_fnGetTrNodes(oSettings)).removeClass(oSettings.asStripeClasses.join(" ")),$("th, td",oSettings.nTHead).removeClass([oSettings.oClasses.sSortable,oSettings.oClasses.sSortableAsc,oSettings.oClasses.sSortableDesc,oSettings.oClasses.sSortableNone].join(" ")),oSettings.bJUI&&($("th span."+oSettings.oClasses.sSortIcon+", td span."+oSettings.oClasses.sSortIcon,oSettings.nTHead).remove(),$("th, td",oSettings.nTHead).each(function(){var jqWrapper=$("div."+oSettings.oClasses.sSortJUIWrapper,this),kids=jqWrapper.contents();$(this).append(kids),jqWrapper.remove()})),!bRemove&&oSettings.nTableReinsertBefore?nOrig.insertBefore(oSettings.nTable,oSettings.nTableReinsertBefore):bRemove||nOrig.appendChild(oSettings.nTable),i=0,iLen=oSettings.aoData.length;iLen>i;i++)null!==oSettings.aoData[i].nTr&&nBody.appendChild(oSettings.aoData[i].nTr);if(oSettings.nTable.style.width=oSettings.sDestroyWidth,iLen=oSettings.asDestroyStripes.length){var anRows=$(nBody).children("tr");for(i=0;iLen>i;i++)anRows.filter(":nth-child("+iLen+"n + "+i+")").addClass(oSettings.asDestroyStripes[i])}for(i=0,iLen=DataTable.settings.length;iLen>i;i++)DataTable.settings[i]==oSettings&&DataTable.settings.splice(i,1);oSettings=null,oInit=null},this.fnDraw=function(bComplete){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);bComplete===!1?(_fnCalculateEnd(oSettings),_fnDraw(oSettings)):_fnReDraw(oSettings)},this.fnFilter=function(sInput,iColumn,bRegex,bSmart,bShowGlobal,bCaseInsensitive){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);if(oSettings.oFeatures.bFilter){if(bRegex!==undefined&&null!==bRegex||(bRegex=!1),bSmart!==undefined&&null!==bSmart||(bSmart=!0),bShowGlobal!==undefined&&null!==bShowGlobal||(bShowGlobal=!0),bCaseInsensitive!==undefined&&null!==bCaseInsensitive||(bCaseInsensitive=!0),iColumn===undefined||null===iColumn){if(_fnFilterComplete(oSettings,{sSearch:sInput+"",bRegex:bRegex,bSmart:bSmart,bCaseInsensitive:bCaseInsensitive},1),bShowGlobal&&oSettings.aanFeatures.f)for(var n=oSettings.aanFeatures.f,i=0,iLen=n.length;iLen>i;i++)try{n[i]._DT_Input!=document.activeElement&&$(n[i]._DT_Input).val(sInput)}catch(e){$(n[i]._DT_Input).val(sInput)}}else $.extend(oSettings.aoPreSearchCols[iColumn],{sSearch:sInput+"",bRegex:bRegex,bSmart:bSmart,bCaseInsensitive:bCaseInsensitive}),_fnFilterComplete(oSettings,oSettings.oPreviousSearch,1);oSettings._iDisplayStart=0,_fnCalculateEnd(oSettings),_fnDraw(oSettings)}},this.fnGetData=function(mRow,iCol){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);if(mRow!==undefined){var iRow=mRow;if("object"==typeof mRow){var sNode=mRow.nodeName.toLowerCase();"tr"===sNode?iRow=_fnNodeToDataIndex(oSettings,mRow):"td"===sNode&&(iRow=_fnNodeToDataIndex(oSettings,mRow.parentNode),iCol=_fnNodeToColumnIndex(oSettings,iRow,mRow))}return iCol!==undefined?_fnGetCellData(oSettings,iRow,iCol,""):oSettings.aoData[iRow]!==undefined?oSettings.aoData[iRow]._aData:null}return _fnGetDataMaster(oSettings)},this.fnGetNodes=function(iRow){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);return iRow!==undefined?oSettings.aoData[iRow]!==undefined?oSettings.aoData[iRow].nTr:null:_fnGetTrNodes(oSettings)},this.fnGetPosition=function(nNode){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),sNodeName=nNode.nodeName.toUpperCase();if("TR"==sNodeName)return _fnNodeToDataIndex(oSettings,nNode);if("TD"==sNodeName||"TH"==sNodeName){var iDataIndex=_fnNodeToDataIndex(oSettings,nNode.parentNode),iColumnIndex=_fnNodeToColumnIndex(oSettings,iDataIndex,nNode);return[iDataIndex,_fnColumnIndexToVisible(oSettings,iColumnIndex),iColumnIndex]}return null},this.fnIsOpen=function(nTr){for(var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),i=(oSettings.aoOpenRows,0);i<oSettings.aoOpenRows.length;i++)if(oSettings.aoOpenRows[i].nParent==nTr)return!0;return!1},this.fnOpen=function(nTr,mHtml,sClass){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),nTableRows=_fnGetTrNodes(oSettings);if(-1!==$.inArray(nTr,nTableRows)){this.fnClose(nTr);var nNewRow=document.createElement("tr"),nNewCell=document.createElement("td");nNewRow.appendChild(nNewCell),nNewCell.className=sClass,nNewCell.colSpan=_fnVisbleColumns(oSettings),"string"==typeof mHtml?nNewCell.innerHTML=mHtml:$(nNewCell).html(mHtml);var nTrs=$("tr",oSettings.nTBody);return-1!=$.inArray(nTr,nTrs)&&$(nNewRow).insertAfter(nTr),oSettings.aoOpenRows.push({nTr:nNewRow,nParent:nTr}),nNewRow}},this.fnPageChange=function(mAction,bRedraw){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);_fnPageChange(oSettings,mAction),_fnCalculateEnd(oSettings),(bRedraw===undefined||bRedraw)&&_fnDraw(oSettings)},this.fnSetColumnVis=function(iCol,bShow,bRedraw){var i,iLen,nTd,bAppend,iBefore,oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),aoColumns=oSettings.aoColumns,aoData=oSettings.aoData;if(aoColumns[iCol].bVisible!=bShow){if(bShow){var iInsert=0;for(i=0;iCol>i;i++)aoColumns[i].bVisible&&iInsert++;if(bAppend=iInsert>=_fnVisbleColumns(oSettings),!bAppend)for(i=iCol;i<aoColumns.length;i++)if(aoColumns[i].bVisible){iBefore=i;break}for(i=0,iLen=aoData.length;iLen>i;i++)null!==aoData[i].nTr&&(bAppend?aoData[i].nTr.appendChild(aoData[i]._anHidden[iCol]):aoData[i].nTr.insertBefore(aoData[i]._anHidden[iCol],_fnGetTdNodes(oSettings,i)[iBefore]))}else for(i=0,iLen=aoData.length;iLen>i;i++)null!==aoData[i].nTr&&(nTd=_fnGetTdNodes(oSettings,i)[iCol],aoData[i]._anHidden[iCol]=nTd,nTd.parentNode.removeChild(nTd));for(aoColumns[iCol].bVisible=bShow,_fnDrawHead(oSettings,oSettings.aoHeader),oSettings.nTFoot&&_fnDrawHead(oSettings,oSettings.aoFooter),i=0,iLen=oSettings.aoOpenRows.length;iLen>i;i++)oSettings.aoOpenRows[i].nTr.colSpan=_fnVisbleColumns(oSettings);(bRedraw===undefined||bRedraw)&&(_fnAdjustColumnSizing(oSettings),_fnDraw(oSettings)),_fnSaveState(oSettings)}},this.fnSettings=function(){return _fnSettingsFromNode(this[DataTable.ext.iApiIndex])},this.fnSort=function(aaSort){var oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]);oSettings.aaSorting=aaSort,_fnReDraw(oSettings)},this.fnSortListener=function(nNode,iColumn,fnCallback){_fnSortAttachListener(_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),nNode,iColumn,fnCallback)},this.fnUpdate=function(mData,mRow,iColumn,bRedraw,bAction){var i,sDisplay,oSettings=_fnSettingsFromNode(this[DataTable.ext.iApiIndex]),iRow="object"==typeof mRow?_fnNodeToDataIndex(oSettings,mRow):mRow;if(iColumn===undefined||null===iColumn)for(oSettings.aoData[iRow]._aData=mData,i=0;i<oSettings.aoColumns.length;i++)this.fnUpdate(_fnGetCellData(oSettings,iRow,i),iRow,i,!1,!1);else{_fnSetCellData(oSettings,iRow,iColumn,mData),sDisplay=_fnGetCellData(oSettings,iRow,iColumn,"display");oSettings.aoColumns[iColumn];null!==oSettings.aoData[iRow].nTr&&(_fnGetTdNodes(oSettings,iRow)[iColumn].innerHTML=sDisplay)}var iDisplayIndex=$.inArray(iRow,oSettings.aiDisplay);return oSettings.asDataSearch[iDisplayIndex]=_fnBuildSearchRow(oSettings,_fnGetRowData(oSettings,iRow,"filter",_fnGetColumns(oSettings,"bSearchable"))),(bAction===undefined||bAction)&&_fnAdjustColumnSizing(oSettings),(bRedraw===undefined||bRedraw)&&_fnReDraw(oSettings),0},this.fnVersionCheck=DataTable.ext.fnVersionCheck,this.oApi={_fnExternApiFunc:_fnExternApiFunc,_fnInitialise:_fnInitialise,_fnInitComplete:_fnInitComplete,_fnLanguageCompat:_fnLanguageCompat,_fnAddColumn:_fnAddColumn,_fnColumnOptions:_fnColumnOptions,_fnAddData:_fnAddData,_fnCreateTr:_fnCreateTr,_fnAddTr:_fnAddTr,_fnBuildHead:_fnBuildHead,_fnDrawHead:_fnDrawHead,_fnDraw:_fnDraw,_fnReDraw:_fnReDraw,_fnAjaxUpdate:_fnAjaxUpdate,_fnAjaxParameters:_fnAjaxParameters,_fnAjaxUpdateDraw:_fnAjaxUpdateDraw,_fnAddOptionsHtml:_fnAddOptionsHtml,_fnFeatureHtmlTable:_fnFeatureHtmlTable,_fnScrollDraw:_fnScrollDraw,_fnAdjustColumnSizing:_fnAdjustColumnSizing,_fnFeatureHtmlFilter:_fnFeatureHtmlFilter,_fnFilterComplete:_fnFilterComplete,_fnFilterCustom:_fnFilterCustom,_fnFilterColumn:_fnFilterColumn,_fnFilter:_fnFilter,_fnBuildSearchArray:_fnBuildSearchArray,_fnBuildSearchRow:_fnBuildSearchRow,_fnFilterCreateSearch:_fnFilterCreateSearch,_fnDataToSearch:_fnDataToSearch,_fnSort:_fnSort,_fnSortAttachListener:_fnSortAttachListener,_fnSortingClasses:_fnSortingClasses,_fnFeatureHtmlPaginate:_fnFeatureHtmlPaginate,_fnPageChange:_fnPageChange,_fnFeatureHtmlInfo:_fnFeatureHtmlInfo,_fnUpdateInfo:_fnUpdateInfo,_fnFeatureHtmlLength:_fnFeatureHtmlLength,_fnFeatureHtmlProcessing:_fnFeatureHtmlProcessing,_fnProcessingDisplay:_fnProcessingDisplay,_fnVisibleToColumnIndex:_fnVisibleToColumnIndex,_fnColumnIndexToVisible:_fnColumnIndexToVisible,_fnNodeToDataIndex:_fnNodeToDataIndex,_fnVisbleColumns:_fnVisbleColumns,_fnCalculateEnd:_fnCalculateEnd,_fnConvertToWidth:_fnConvertToWidth,_fnCalculateColumnWidths:_fnCalculateColumnWidths,_fnScrollingWidthAdjust:_fnScrollingWidthAdjust,_fnGetWidestNode:_fnGetWidestNode,_fnGetMaxLenString:_fnGetMaxLenString,_fnStringToCss:_fnStringToCss,_fnDetectType:_fnDetectType,_fnSettingsFromNode:_fnSettingsFromNode,_fnGetDataMaster:_fnGetDataMaster,_fnGetTrNodes:_fnGetTrNodes,_fnGetTdNodes:_fnGetTdNodes,_fnEscapeRegex:_fnEscapeRegex,_fnDeleteIndex:_fnDeleteIndex,_fnColumnOrdering:_fnColumnOrdering,_fnLog:_fnLog,_fnClearTable:_fnClearTable,_fnSaveState:_fnSaveState,_fnLoadState:_fnLoadState,_fnDetectHeader:_fnDetectHeader,_fnGetUniqueThs:_fnGetUniqueThs,_fnScrollBarWidth:_fnScrollBarWidth,_fnApplyToChildren:_fnApplyToChildren,_fnMap:_fnMap,_fnGetRowData:_fnGetRowData,_fnGetCellData:_fnGetCellData,_fnSetCellData:_fnSetCellData,_fnGetObjectDataFn:_fnGetObjectDataFn,_fnSetObjectDataFn:_fnSetObjectDataFn,_fnApplyColumnDefs:_fnApplyColumnDefs,_fnBindAction:_fnBindAction,_fnExtend:_fnExtend,_fnCallbackReg:_fnCallbackReg,_fnCallbackFire:_fnCallbackFire,_fnNodeToColumnIndex:_fnNodeToColumnIndex,_fnInfoMacros:_fnInfoMacros,_fnBrowserDetect:_fnBrowserDetect,_fnGetColumns:_fnGetColumns,_fnHungarianMap:_fnHungarianMap,_fnCamelToHungarian:_fnCamelToHungarian,_fnBuildAjax:_fnBuildAjax,_fnAjaxDataSrc:_fnAjaxDataSrc},$.extend(DataTable.ext.oApi,this.oApi);for(var sFunc in DataTable.ext.oApi)sFunc&&(this[sFunc]=_fnExternApiFunc(sFunc));var _that=this;return this.each(function(){var iLen,j,jLen,i=0,sId=this.getAttribute("id"),bInitHandedOff=!1,bUsePassedData=!1,oInitEmpty=oInit===undefined;if("table"!=this.nodeName.toLowerCase())return void _fnLog(null,0,"Attempted to initialise DataTables on a node which is not a table: "+this.nodeName);for(_fnCamelToHungarian(DataTable.defaults,DataTable.defaults,!0),_fnCamelToHungarian(DataTable.defaults.column,DataTable.defaults.column,!0),oInit||(oInit={}),_fnCamelToHungarian(DataTable.defaults,oInit),i=0,iLen=DataTable.settings.length;iLen>i;i++){if(DataTable.settings[i].nTable==this){var bRetrieve=oInit.bRetrieve!==undefined?oInit.bRetrieve:DataTable.defaults.bRetrieve,bDestroy=oInit.bDestroy!==undefined?oInit.bDestroy:DataTable.defaults.bDestroy;if(oInitEmpty||bRetrieve)return DataTable.settings[i].oInstance;if(bDestroy){DataTable.settings[i].oInstance.fnDestroy();break}return void _fnLog(DataTable.settings[i],0,"Cannot reinitialise DataTable.\n\nTo retrieve the DataTables object for this table, pass no arguments or see the docs for bRetrieve and bDestroy")}if(DataTable.settings[i].sTableId==this.id){DataTable.settings.splice(i,1);break}}null!==sId&&""!==sId||(sId="DataTables_Table_"+DataTable.ext._oExternConfig.iNextUnique++,this.id=sId);var oSettings=$.extend(!0,{},DataTable.models.oSettings,{nTable:this,oApi:_that.oApi,oInit:oInit,sDestroyWidth:$(this)[0].style.width,sInstance:sId,sTableId:sId});if(DataTable.settings.push(oSettings),oSettings.oInstance=1===_that.length?_that:$(this).dataTable(),oInit.oLanguage&&_fnLanguageCompat(oInit.oLanguage),oInit.aLengthMenu&&!oInit.iDisplayLength&&(oInit.iDisplayLength=$.isArray(oInit.aLengthMenu[0])?oInit.aLengthMenu[0][0]:oInit.aLengthMenu[0]),oInit=_fnExtend($.extend(!0,{},DataTable.defaults),oInit),_fnMap(oSettings.oFeatures,oInit,"bPaginate"),_fnMap(oSettings.oFeatures,oInit,"bLengthChange"),_fnMap(oSettings.oFeatures,oInit,"bFilter"),_fnMap(oSettings.oFeatures,oInit,"bSort"),_fnMap(oSettings.oFeatures,oInit,"bInfo"),_fnMap(oSettings.oFeatures,oInit,"bProcessing"),_fnMap(oSettings.oFeatures,oInit,"bAutoWidth"),_fnMap(oSettings.oFeatures,oInit,"bSortClasses"),_fnMap(oSettings.oFeatures,oInit,"bServerSide"),_fnMap(oSettings.oFeatures,oInit,"bDeferRender"),_fnMap(oSettings.oScroll,oInit,"sScrollX","sX"),_fnMap(oSettings.oScroll,oInit,"sScrollXInner","sXInner"),_fnMap(oSettings.oScroll,oInit,"sScrollY","sY"),_fnMap(oSettings.oScroll,oInit,"bScrollCollapse","bCollapse"),_fnMap(oSettings.oScroll,oInit,"bScrollInfinite","bInfinite"),_fnMap(oSettings.oScroll,oInit,"iScrollLoadGap","iLoadGap"),_fnMap(oSettings.oScroll,oInit,"bScrollAutoCss","bAutoCss"),_fnMap(oSettings,oInit,"asStripeClasses"),_fnMap(oSettings,oInit,"ajax"),_fnMap(oSettings,oInit,"fnServerData"),_fnMap(oSettings,oInit,"fnFormatNumber"),_fnMap(oSettings,oInit,"sServerMethod"),_fnMap(oSettings,oInit,"aaSorting"),_fnMap(oSettings,oInit,"aaSortingFixed"),_fnMap(oSettings,oInit,"aLengthMenu"),_fnMap(oSettings,oInit,"sPaginationType"),_fnMap(oSettings,oInit,"sAjaxSource"),_fnMap(oSettings,oInit,"sAjaxDataProp"),_fnMap(oSettings,oInit,"iCookieDuration","iStateDuration"),_fnMap(oSettings,oInit,"iStateDuration"),_fnMap(oSettings,oInit,"sDom"),_fnMap(oSettings,oInit,"bSortCellsTop"),_fnMap(oSettings,oInit,"iTabIndex"),_fnMap(oSettings,oInit,"oSearch","oPreviousSearch"),_fnMap(oSettings,oInit,"aoSearchCols","aoPreSearchCols"),_fnMap(oSettings,oInit,"iDisplayLength","_iDisplayLength"),_fnMap(oSettings,oInit,"bJQueryUI","bJUI"),_fnMap(oSettings,oInit,"fnStateLoadCallback"),_fnMap(oSettings,oInit,"fnStateSaveCallback"),_fnMap(oSettings.oLanguage,oInit,"fnInfoCallback"),_fnCallbackReg(oSettings,"aoDrawCallback",oInit.fnDrawCallback,"user"),_fnCallbackReg(oSettings,"aoServerParams",oInit.fnServerParams,"user"),_fnCallbackReg(oSettings,"aoStateSaveParams",oInit.fnStateSaveParams,"user"),_fnCallbackReg(oSettings,"aoStateLoadParams",oInit.fnStateLoadParams,"user"),_fnCallbackReg(oSettings,"aoStateLoaded",oInit.fnStateLoaded,"user"),_fnCallbackReg(oSettings,"aoRowCallback",oInit.fnRowCallback,"user"),_fnCallbackReg(oSettings,"aoRowCreatedCallback",oInit.fnCreatedRow,"user"),_fnCallbackReg(oSettings,"aoHeaderCallback",oInit.fnHeaderCallback,"user"),_fnCallbackReg(oSettings,"aoFooterCallback",oInit.fnFooterCallback,"user"),_fnCallbackReg(oSettings,"aoInitComplete",oInit.fnInitComplete,"user"),_fnCallbackReg(oSettings,"aoPreDrawCallback",oInit.fnPreDrawCallback,"user"),oSettings.oFeatures.bServerSide&&oSettings.oFeatures.bSort&&oSettings.oFeatures.bSortClasses?_fnCallbackReg(oSettings,"aoDrawCallback",_fnSortingClasses,"server_side_sort_classes"):oSettings.oFeatures.bDeferRender&&_fnCallbackReg(oSettings,"aoDrawCallback",_fnSortingClasses,"defer_sort_classes"),oInit.bJQueryUI?($.extend(oSettings.oClasses,DataTable.ext.oJUIClasses),oInit.sDom===DataTable.defaults.sDom&&"lfrtip"===DataTable.defaults.sDom&&(oSettings.sDom='<"H"lfr>t<"F"ip>')):$.extend(oSettings.oClasses,DataTable.ext.oStdClasses),$(this).addClass(oSettings.oClasses.sTable),""===oSettings.oScroll.sX&&""===oSettings.oScroll.sY||(oSettings.oScroll.iBarWidth=_fnScrollBarWidth()),oSettings.iInitDisplayStart===undefined&&(oSettings.iInitDisplayStart=oInit.iDisplayStart,oSettings._iDisplayStart=oInit.iDisplayStart),oInit.bStateSave&&(oSettings.oFeatures.bStateSave=!0,_fnLoadState(oSettings,oInit),_fnCallbackReg(oSettings,"aoDrawCallback",_fnSaveState,"state_save")),null!==oInit.iDeferLoading){oSettings.bDeferLoading=!0;var tmp=$.isArray(oInit.iDeferLoading);oSettings._iRecordsDisplay=tmp?oInit.iDeferLoading[0]:oInit.iDeferLoading,oSettings._iRecordsTotal=tmp?oInit.iDeferLoading[1]:oInit.iDeferLoading}null!==oInit.aaData&&(bUsePassedData=!0),""!==oInit.oLanguage.sUrl?(oSettings.oLanguage.sUrl=oInit.oLanguage.sUrl,$.getJSON(oSettings.oLanguage.sUrl,null,function(json){_fnLanguageCompat(json),_fnCamelToHungarian(DataTable.defaults.oLanguage,json),$.extend(!0,oSettings.oLanguage,oInit.oLanguage,json),_fnInitialise(oSettings)}),bInitHandedOff=!0):$.extend(!0,oSettings.oLanguage,oInit.oLanguage),null===oInit.asStripeClasses&&(oSettings.asStripeClasses=[oSettings.oClasses.sStripeOdd,oSettings.oClasses.sStripeEven]);var stripeClasses=oSettings.asStripeClasses;-1!==$.inArray(!0,$.map(stripeClasses,function(el,i){return $("tbody tr:eq(0)",this).hasClass(el)}))&&($("tbody tr",this).removeClass(stripeClasses.join(" ")),oSettings.asDestroyStripes=stripeClasses.slice());var aoColumnsInit,anThs=[],nThead=this.getElementsByTagName("thead");if(0!==nThead.length&&(_fnDetectHeader(oSettings.aoHeader,nThead[0]),anThs=_fnGetUniqueThs(oSettings)),null===oInit.aoColumns)for(aoColumnsInit=[],i=0,iLen=anThs.length;iLen>i;i++)aoColumnsInit.push(null);else aoColumnsInit=oInit.aoColumns;for(i=0,iLen=aoColumnsInit.length;iLen>i;i++)oInit.saved_aoColumns!==undefined&&oInit.saved_aoColumns.length==iLen&&(null===aoColumnsInit[i]&&(aoColumnsInit[i]={}),aoColumnsInit[i].bVisible=oInit.saved_aoColumns[i].bVisible),_fnAddColumn(oSettings,anThs?anThs[i]:null);for(_fnApplyColumnDefs(oSettings,oInit.aoColumnDefs,aoColumnsInit,function(iCol,oDef){_fnColumnOptions(oSettings,iCol,oDef)}),i=0,iLen=oSettings.aaSorting.length;iLen>i;i++){oSettings.aaSorting[i][0]>=oSettings.aoColumns.length&&(oSettings.aaSorting[i][0]=0);var oColumn=oSettings.aoColumns[oSettings.aaSorting[i][0]];for(oSettings.aaSorting[i][2]===undefined&&(oSettings.aaSorting[i][2]=0),oInit.aaSorting===undefined&&oSettings.saved_aaSorting===undefined&&(oSettings.aaSorting[i][1]=oColumn.asSorting[0]),j=0,jLen=oColumn.asSorting.length;jLen>j;j++)if(oSettings.aaSorting[i][1]==oColumn.asSorting[j]){oSettings.aaSorting[i][2]=j;break}}_fnSortingClasses(oSettings),_fnBrowserDetect(oSettings);var captions=$(this).children("caption").each(function(){this._captionSide=$(this).css("caption-side")}),thead=$(this).children("thead");0===thead.length&&(thead=[document.createElement("thead")],this.appendChild(thead[0])),oSettings.nTHead=thead[0];var tbody=$(this).children("tbody");0===tbody.length&&(tbody=[document.createElement("tbody")],this.appendChild(tbody[0])),oSettings.nTBody=tbody[0],oSettings.nTBody.setAttribute("role","alert"),oSettings.nTBody.setAttribute("aria-live","polite"),oSettings.nTBody.setAttribute("aria-relevant","all");var tfoot=$(this).children("tfoot");if(0===tfoot.length&&captions.length>0&&(""!==oSettings.oScroll.sX||""!==oSettings.oScroll.sY)&&(tfoot=[document.createElement("tfoot")],this.appendChild(tfoot[0])),tfoot.length>0&&(oSettings.nTFoot=tfoot[0],_fnDetectHeader(oSettings.aoFooter,oSettings.nTFoot)),bUsePassedData)for(i=0;i<oInit.aaData.length;i++)_fnAddData(oSettings,oInit.aaData[i]);else(oSettings.bDeferLoading||null===oSettings.sAjaxSource&&null===oSettings.ajax)&&_fnAddTr(oSettings,$(oSettings.nTBody).children("tr"));oSettings.aiDisplay=oSettings.aiDisplayMaster.slice(),oSettings.bInitialised=!0,bInitHandedOff===!1&&_fnInitialise(oSettings)}),_that=null,this},function(){var _Api,_apiStruct=[],_arrayProto=Array.prototype,_toSettings=function(mixed){
var idx,jq,settings=DataTable.settings,tables=$.map(settings,function(el,i){return el.nTable});return mixed.nTable&&mixed.oApi?[mixed]:mixed.nodeName&&"table"===mixed.nodeName.toLowerCase()?(idx=$.inArray(mixed,tables),-1!==idx?[settings[idx]]:null):("string"==typeof mixed?jq=$(mixed):mixed instanceof $&&(jq=mixed),jq?jq.map(function(i){return idx=$.inArray(this,tables),-1!==idx?settings[idx]:null}):void 0)},_unique=function(src){var val,i,j,out=[],ien=src.length,k=0;again:for(i=0;ien>i;i++){for(val=src[i],j=0;k>j;j++)if(out[j]===val)continue again;out.push(val),k++}return out};DataTable.Api=_Api=function(context,data){if(!this instanceof _Api)throw"DT API must be constructed as a new object";var settings=[],ctxSettings=function(o){var a=_toSettings(o);a&&settings.push.apply(settings,a)};if($.isArray(context))for(var i=0,ien=context.length;ien>i;i++)ctxSettings(context[i]);else ctxSettings(context);this.context=_unique(settings),data&&this.push.apply(this,data),_Api.extend(this,this,_apiStruct)},_Api.prototype={concat:_arrayProto.concat,context:[],each:function(fn){if(_arrayProto.forEach)_arrayProto.forEach.call(this,fn,this);else for(var i=0,ien=this.length;ien>i;i++)fn.call(this,this[i],i,this);return this},filter:function(fn){var a=[];if(_arrayProto.filter)a=_arrayProto.filter(this,fn,this);else for(var i=0,ien=this.length;ien>i;i++)fn.call(this,this[i],i,this)&&a.push(this[i]);return new _Api(this.context,a)},indexOf:_arrayProto.indexOf||function(obj,start){for(var i=start||0,ien=this.length;ien>i;i++)if(this[i]===obj)return i;return-1},lastIndexOf:_arrayProto.lastIndexOf||function(obj,start){return this.indexOf.apply(this.toArray.reverse(),arguments)},length:0,map:function(fn){var a=[];if(_arrayProto.map)a=_arrayProto.map(this,fn,this);else for(var i=0,ien=this.length;ien>i;i++)a.push(fn.call(this,this[i],i));return new _Api(this.context,a)},pluck:function(prop){return this.map(function(el,i){return el[prop]})},pop:_arrayProto.pop,push:_arrayProto.push,reduce:_arrayProto.reduce||function(fn,init){var value,isSet=!1;arguments.length>1&&(value=init,isSet=!0);for(var i=0,ien=this.length;ien>i;i++)this.hasOwnProperty(i)&&(value=isSet?fn(value,this[i],i,this):this[i],isSet=!0);return value},reduceRight:_arrayProto.reduceRight||function(fn,init){var value,isSet=!1;arguments.length>1&&(value=init,isSet=!0);for(var i=this.length-1;i>=0;i--)this.hasOwnProperty(i)&&(value=isSet?fn(value,this[i],i,this):this[i],isSet=!0);return value},reverse:_arrayProto.reverse,shift:_arrayProto.shift,sort:_arrayProto.sort,splice:_arrayProto.splice,toArray:function(){return _arrayProto.slice.call(this)},unique:function(){return new _Api(this.context,_unique(this))},unshift:_arrayProto.unshift},_Api.extend=function(scope,obj,ext){if(!(!obj instanceof _Api)){var i,ien,struct,methodScoping=function(fn,struc){return function(){var ret=fn.apply(scope,arguments);return _Api.extend(ret,ret,struc.methodExt),ret}};for(i=0,ien=ext.length;ien>i;i++)struct=ext[i],"function"==typeof struct.val?obj[struct.name]=methodScoping(struct.val,struct):obj[struct.name]=struct.val,_Api.extend(scope,obj[struct.name],struct.propExt)}},_Api.register=function(name,val){var i,ien,key,method,heir=name.split("."),struct=_apiStruct,find=function(src,name){for(var i=0,ien=src.length;ien>i;i++)if(src[i].name===name)return src[i];return null};for(i=0,ien=heir.length;ien>i;i++){method=-1!==heir[i].indexOf("()"),key=method?heir[i].replace("()",""):heir[i];var src=find(struct,key);src||(src={name:key,val:{},methodExt:[],propExt:[]},struct.push(src)),i===ien-1?src.val=val:struct=method?src.methodExt:src.propExt}_Api.ready&&DataTable.api.build()}}(),function(){var _Api=DataTable.Api,_table_selector=function(selector,a){if("number"==typeof selector)return[a[selector]];var nodes=$.map(a,function(el,i){return el.nTable});return $(nodes).filter(selector).map(function(i){var idx=$.inArray(this,nodes);return a[idx]}).toArray()};_Api.register("tables()",function(selector,fn){"function"==typeof selector&&(fn=selector,selector=undefined);var a=[],context=selector?_table_selector(selector,this.context):this.context;if(fn)for(var i=0,ien=context.length;ien>i;i++){var ret=fn.call(this,context[i],i);ret!==undefined&&a.push(ret)}var api=selector||a.length?new _Api(context,a):this;return api}),_Api.register("tables().nodes()",function(){return this.tables(function(settings,i){return settings.nTable})})}(),function(){var _api=DataTable.Api;_api.register("draw()",function(resetPaging){return this.tables(function(settings){_fnReDraw(settings,resetPaging===!1)})})}(),function(){var _Api=DataTable.Api;_Api.register("page()",function(action){return action===undefined?this.page.info().page:this.tables(function(settings){_fnPageChange(settings,action),_fnCalculateEnd(settings)})}),_Api.register("page.info()",function(action){if(0===this.context.length)return undefined;var settings=this.context[0],start=settings._iDisplayStart,len=settings._iDisplayLength,visRecords=settings.fnRecordsDisplay(),all=-1===len;return{page:all?0:Math.ceil(start/len),pages:all?1:Math.ceil(visRecords/len),start:start,end:settings.fnDisplayEnd(),length:len,recordsTotal:settings.fnRecordsTotal(),recordsDisplay:visRecords}}),_Api.register("page.len()",function(len){return len===undefined?0!==this.context.length?this.context[0]._iDisplayLength:undefined:this.tables(function(settings){_fnLengthChange(settings,len),_fnCalculateEnd(settings)})})}(),function(){var _Api=DataTable.Api,_reload=function(settings,holdPosition){settings.oFeatures.bServerSide?_fnReDraw(settings,holdPosition):_fnBuildAjax(settings,[],function(json){_fnClearTable(settings);for(var data=_fnAjaxDataSrc(settings,json),i=0,ien=data.length;ien>i;i++)_fnAddData(settings,data[i]);_fnReDraw(settings,holdPosition)})};_Api.register("ajax.json()",function(){var ctx=this.context;if(ctx.length>0){var xhr=ctx[0].jqXHR;if(xhr)return $.parseJSON(xhr.responseText)}}),_Api.register("ajax.reload()",function(resetPaging){return this.tables(function(settings){_reload(settings,resetPaging===!1)})}),_Api.register("ajax.url()",function(url){var ctx=this.context;return url===undefined?0===ctx.length?undefined:(ctx=ctx[0],ctx.ajax?$.isPlainObject(ctx.ajax)?ctx.ajax.url:ctx.ajax:ctx.sAjaxSource):this.tables(function(settings){$.isPlainObject(settings.ajax)?settings.ajax.url=url:settings.ajax=url})}),_Api.register("ajax.url().load()",function(){return this.tables(_reload)})}(),function(){var _Api=DataTable.Api;_Api.register("order()",function(order,dir){var ctx=this.context;return order===undefined?0!==ctx.length?ctx[0].aaSorting:undefined:("number"==typeof order?order=[[order,dir]]:$.isArray(order[0])||(order=Array.prototype.slice.call(arguments)),this.tables(function(settings){settings.aaSorting=order}))}),_Api.register("order.listener()",function(node,column,callback){return this.tables(function(settings){_fnSortAttachListener(settings,node,column,callback)})})}(),DataTable.fnVersionCheck=function(sVersion){for(var iThis,iThat,aThis=DataTable.ext.sVersion.split("."),aThat=sVersion.split("."),i=0,iLen=aThat.length;iLen>i;i++)if(iThis=parseInt(aThis[i],10)||0,iThat=parseInt(aThat[i],10)||0,iThis!==iThat)return iThis>iThat;return!0},DataTable.fnIsDataTable=function(nTable){for(var o=DataTable.settings,i=0;i<o.length;i++)if(o[i].nTable===nTable||o[i].nScrollHead===nTable||o[i].nScrollFoot===nTable)return!0;return!1},DataTable.fnTables=function(bVisible){var out=[];return jQuery.each(DataTable.settings,function(i,o){(!bVisible||bVisible===!0&&$(o.nTable).is(":visible"))&&out.push(o.nTable)}),out},DataTable.version="1.10.0-dev",DataTable.settings=[],DataTable.models={},DataTable.models.ext={afnFiltering:[],afnSortData:[],aoFeatures:[],aTypes:[],fnVersionCheck:DataTable.fnVersionCheck,iApiIndex:0,ofnSearch:{},oApi:{},oStdClasses:{},oJUIClasses:{},oPagination:{},oSort:{},sVersion:DataTable.version,sErrMode:"alert",_oExternConfig:{iNextUnique:0}},DataTable.models.oSearch={bCaseInsensitive:!0,sSearch:"",bRegex:!1,bSmart:!0},DataTable.models.oRow={nTr:null,_aData:[],_aSortData:[],_anHidden:[],_sRowStripe:""},DataTable.models.oColumn={aDataSort:null,asSorting:null,bSearchable:null,bSortable:null,bVisible:null,_bAutoType:!0,fnCreatedCell:null,fnGetData:null,fnSetData:null,mData:null,mRender:null,nTh:null,nTf:null,sClass:null,sContentPadding:null,sDefaultContent:null,sName:null,sSortDataType:"std",sSortingClass:null,sSortingClassJUI:null,sTitle:null,sType:null,sWidth:null,sWidthOrig:null},DataTable.defaults={aaData:null,aaSorting:[[0,"asc"]],aaSortingFixed:null,ajax:null,aLengthMenu:[10,25,50,100],aoColumns:null,aoColumnDefs:null,aoSearchCols:[],asStripeClasses:null,bAutoWidth:!0,bDeferRender:!1,bDestroy:!1,bFilter:!0,bInfo:!0,bJQueryUI:!1,bLengthChange:!0,bPaginate:!0,bProcessing:!1,bRetrieve:!1,bScrollAutoCss:!0,bScrollCollapse:!1,bScrollInfinite:!1,bServerSide:!1,bSort:!0,bSortCellsTop:!1,bSortClasses:!0,bStateSave:!1,fnCreatedRow:null,fnDrawCallback:null,fnFooterCallback:null,fnFormatNumber:function(toFormat){if(1e3>toFormat)return toFormat;for(var s=toFormat+"",a=s.split(""),out="",iLen=s.length,i=0;iLen>i;i++)i%3===0&&0!==i&&(out=this.oLanguage.sInfoThousands+out),out=a[iLen-i-1]+out;return out},fnHeaderCallback:null,fnInfoCallback:null,fnInitComplete:null,fnPreDrawCallback:null,fnRowCallback:null,fnServerData:null,fnServerParams:null,fnStateLoadCallback:function(settings){try{return JSON.parse(localStorage.getItem("DataTables_"+settings.sInstance+"_"+window.location.pathname))}catch(e){}},fnStateLoadParams:null,fnStateLoaded:null,fnStateSaveCallback:function(settings,data){try{localStorage.setItem("DataTables_"+settings.sInstance+"_"+window.location.pathname,JSON.stringify(data))}catch(e){}},fnStateSaveParams:null,iStateDuration:7200,iDeferLoading:null,iDisplayLength:10,iDisplayStart:0,iScrollLoadGap:100,iTabIndex:0,oLanguage:{oAria:{sSortAscending:": activate to sort column ascending",sSortDescending:": activate to sort column descending"},oPaginate:{sFirst:"First",sLast:"Last",sNext:"Next",sPrevious:"Previous"},sEmptyTable:"No data available in table",sInfo:"Showing _START_ to _END_ of _TOTAL_ entries",sInfoEmpty:"Showing 0 to 0 of 0 entries",sInfoFiltered:"(filtered from _MAX_ total entries)",sInfoPostFix:"",sInfoThousands:",",sLengthMenu:"Show _MENU_ entries",sLoadingRecords:"Loading...",sProcessing:"Processing...",sSearch:"Search:",sUrl:"",sZeroRecords:"No matching records found"},oSearch:$.extend({},DataTable.models.oSearch),sAjaxDataProp:"aaData",sAjaxSource:null,sDom:"lfrtip",sPaginationType:"two_button",sScrollX:"",sScrollXInner:"",sScrollY:"",sServerMethod:"GET"},_fnHungarianMap(DataTable.defaults),DataTable.defaults.column={aDataSort:null,asSorting:["asc","desc"],bSearchable:!0,bSortable:!0,bVisible:!0,fnCreatedCell:null,iDataSort:-1,mData:null,mRender:null,sCellType:"td",sClass:"",sContentPadding:"",sDefaultContent:null,sName:"",sSortDataType:"std",sTitle:null,sType:null,sWidth:null},_fnHungarianMap(DataTable.defaults.column),DataTable.models.oSettings={oFeatures:{bAutoWidth:null,bDeferRender:null,bFilter:null,bInfo:null,bLengthChange:null,bPaginate:null,bProcessing:null,bServerSide:null,bSort:null,bSortClasses:null,bStateSave:null},oScroll:{bAutoCss:null,bCollapse:null,bInfinite:null,iBarWidth:0,iLoadGap:null,sX:null,sXInner:null,sY:null},oLanguage:{fnInfoCallback:null},oBrowser:{bScrollOversize:!1,bScrollbarLeft:!1},ajax:null,aanFeatures:[],aoData:[],aiDisplay:[],aiDisplayMaster:[],aoColumns:[],aoHeader:[],aoFooter:[],asDataSearch:[],oPreviousSearch:{},aoPreSearchCols:[],aaSorting:null,aaSortingFixed:null,asStripeClasses:null,asDestroyStripes:[],sDestroyWidth:0,aoRowCallback:[],aoHeaderCallback:[],aoFooterCallback:[],aoDrawCallback:[],aoRowCreatedCallback:[],aoPreDrawCallback:[],aoInitComplete:[],aoStateSaveParams:[],aoStateLoadParams:[],aoStateLoaded:[],sTableId:"",nTable:null,nTHead:null,nTFoot:null,nTBody:null,nTableWrapper:null,bDeferLoading:!1,bInitialised:!1,aoOpenRows:[],sDom:null,sPaginationType:"two_button",iStateDuration:0,aoStateSave:[],aoStateLoad:[],oLoadedState:null,sAjaxSource:null,sAjaxDataProp:null,bAjaxDataGet:!0,jqXHR:null,fnServerData:null,aoServerParams:[],sServerMethod:null,fnFormatNumber:null,aLengthMenu:null,iDraw:0,bDrawing:!1,iDrawError:-1,_iDisplayLength:10,_iDisplayStart:0,_iDisplayEnd:10,_iRecordsTotal:0,_iRecordsDisplay:0,bJUI:null,oClasses:{},bFiltered:!1,bSorted:!1,bSortCellsTop:null,oInit:null,aoDestroyCallback:[],fnRecordsTotal:function(){return this.oFeatures.bServerSide?parseInt(this._iRecordsTotal,10):this.aiDisplayMaster.length},fnRecordsDisplay:function(){return this.oFeatures.bServerSide?parseInt(this._iRecordsDisplay,10):this.aiDisplay.length},fnDisplayEnd:function(){return this.oFeatures.bServerSide?this.oFeatures.bPaginate===!1||-1==this._iDisplayLength?this._iDisplayStart+this.aiDisplay.length:Math.min(this._iDisplayStart+this._iDisplayLength,this._iRecordsDisplay):this._iDisplayEnd},oInstance:null,sInstance:null,iTabIndex:0,nScrollHead:null,nScrollFoot:null},DataTable.ext=$.extend(!0,{},DataTable.models.ext),$.extend(DataTable.ext.oStdClasses,{sTable:"dataTable",sPagePrevEnabled:"paginate_enabled_previous",sPagePrevDisabled:"paginate_disabled_previous",sPageNextEnabled:"paginate_enabled_next",sPageNextDisabled:"paginate_disabled_next",sPageJUINext:"",sPageJUIPrev:"",sPageButton:"paginate_button",sPageButtonActive:"paginate_active",sPageButtonStaticDisabled:"paginate_button paginate_button_disabled",sPageFirst:"first",sPagePrevious:"previous",sPageNext:"next",sPageLast:"last",sStripeOdd:"odd",sStripeEven:"even",sRowEmpty:"dataTables_empty",sWrapper:"dataTables_wrapper",sFilter:"dataTables_filter",sInfo:"dataTables_info",sPaging:"dataTables_paginate paging_",sLength:"dataTables_length",sProcessing:"dataTables_processing",sSortAsc:"sorting_asc",sSortDesc:"sorting_desc",sSortable:"sorting",sSortableAsc:"sorting_asc_disabled",sSortableDesc:"sorting_desc_disabled",sSortableNone:"sorting_disabled",sSortColumn:"sorting_",sSortJUIAsc:"",sSortJUIDesc:"",sSortJUI:"",sSortJUIAscAllowed:"",sSortJUIDescAllowed:"",sSortJUIWrapper:"",sSortIcon:"",sScrollWrapper:"dataTables_scroll",sScrollHead:"dataTables_scrollHead",sScrollHeadInner:"dataTables_scrollHeadInner",sScrollBody:"dataTables_scrollBody",sScrollFoot:"dataTables_scrollFoot",sScrollFootInner:"dataTables_scrollFootInner",sFooterTH:"",sJUIHeader:"",sJUIFooter:""}),$.extend(DataTable.ext.oJUIClasses,DataTable.ext.oStdClasses,{sPagePrevEnabled:"fg-button ui-button ui-state-default ui-corner-left",sPagePrevDisabled:"fg-button ui-button ui-state-default ui-corner-left ui-state-disabled",sPageNextEnabled:"fg-button ui-button ui-state-default ui-corner-right",sPageNextDisabled:"fg-button ui-button ui-state-default ui-corner-right ui-state-disabled",sPageJUINext:"ui-icon ui-icon-circle-arrow-e",sPageJUIPrev:"ui-icon ui-icon-circle-arrow-w",sPageButton:"fg-button ui-button ui-state-default",sPageButtonActive:"fg-button ui-button ui-state-default ui-state-disabled",sPageButtonStaticDisabled:"fg-button ui-button ui-state-default ui-state-disabled",sPageFirst:"first ui-corner-tl ui-corner-bl",sPageLast:"last ui-corner-tr ui-corner-br",sPaging:"dataTables_paginate fg-buttonset ui-buttonset fg-buttonset-multi ui-buttonset-multi paging_",sSortAsc:"ui-state-default",sSortDesc:"ui-state-default",sSortable:"ui-state-default",sSortableAsc:"ui-state-default",sSortableDesc:"ui-state-default",sSortableNone:"ui-state-default",sSortJUIAsc:"css_right ui-icon ui-icon-triangle-1-n",sSortJUIDesc:"css_right ui-icon ui-icon-triangle-1-s",sSortJUI:"css_right ui-icon ui-icon-carat-2-n-s",sSortJUIAscAllowed:"css_right ui-icon ui-icon-carat-1-n",sSortJUIDescAllowed:"css_right ui-icon ui-icon-carat-1-s",sSortJUIWrapper:"DataTables_sort_wrapper",sSortIcon:"DataTables_sort_icon",sScrollHead:"dataTables_scrollHead ui-state-default",sScrollFoot:"dataTables_scrollFoot ui-state-default",sFooterTH:"ui-state-default",sJUIHeader:"fg-toolbar ui-toolbar ui-widget-header ui-corner-tl ui-corner-tr ui-helper-clearfix",sJUIFooter:"fg-toolbar ui-toolbar ui-widget-header ui-corner-bl ui-corner-br ui-helper-clearfix"}),$.extend(DataTable.ext.oPagination,{two_button:{fnInit:function(oSettings,nPaging,fnCallbackDraw){var oLang=oSettings.oLanguage.oPaginate,fnClickHandler=(oSettings.oClasses,function(e){oSettings.oApi._fnPageChange(oSettings,e.data.action)&&fnCallbackDraw(oSettings)}),sAppend=oSettings.bJUI?'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUIPrev+'"></span></a><a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button"><span class="'+oSettings.oClasses.sPageJUINext+'"></span></a>':'<a class="'+oSettings.oClasses.sPagePrevDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sPrevious+'</a><a class="'+oSettings.oClasses.sPageNextDisabled+'" tabindex="'+oSettings.iTabIndex+'" role="button">'+oLang.sNext+"</a>";$(nPaging).append(sAppend);var els=$("a",nPaging),nPrevious=els[0],nNext=els[1];oSettings.oApi._fnBindAction(nPrevious,{action:"previous"},fnClickHandler),oSettings.oApi._fnBindAction(nNext,{action:"next"},fnClickHandler),oSettings.aanFeatures.p||(nPaging.id=oSettings.sTableId+"_paginate",nPrevious.id=oSettings.sTableId+"_previous",nNext.id=oSettings.sTableId+"_next",nPrevious.setAttribute("aria-controls",oSettings.sTableId),nNext.setAttribute("aria-controls",oSettings.sTableId))},fnUpdate:function(oSettings,fnCallbackDraw){if(oSettings.aanFeatures.p)for(var nNode,oClasses=oSettings.oClasses,an=oSettings.aanFeatures.p,i=0,iLen=an.length;iLen>i;i++)nNode=an[i].firstChild,nNode&&(nNode.className=0===oSettings._iDisplayStart?oClasses.sPagePrevDisabled:oClasses.sPagePrevEnabled,nNode=nNode.nextSibling,nNode.className=oSettings.fnDisplayEnd()==oSettings.fnRecordsDisplay()?oClasses.sPageNextDisabled:oClasses.sPageNextEnabled)}},iFullNumbersShowPages:5,full_numbers:{fnInit:function(oSettings,nPaging,fnCallbackDraw){var oLang=oSettings.oLanguage.oPaginate,oClasses=oSettings.oClasses,fnClickHandler=function(e){oSettings.oApi._fnPageChange(oSettings,e.data.action)&&fnCallbackDraw(oSettings)};$(nPaging).append('<a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageFirst+'">'+oLang.sFirst+'</a><a  tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPagePrevious+'">'+oLang.sPrevious+'</a><span></span><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageNext+'">'+oLang.sNext+'</a><a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+" "+oClasses.sPageLast+'">'+oLang.sLast+"</a>");var els=$("a",nPaging),nFirst=els[0],nPrev=els[1],nNext=els[2],nLast=els[3];oSettings.oApi._fnBindAction(nFirst,{action:"first"},fnClickHandler),oSettings.oApi._fnBindAction(nPrev,{action:"previous"},fnClickHandler),oSettings.oApi._fnBindAction(nNext,{action:"next"},fnClickHandler),oSettings.oApi._fnBindAction(nLast,{action:"last"},fnClickHandler),oSettings.aanFeatures.p||(nPaging.id=oSettings.sTableId+"_paginate",nFirst.id=oSettings.sTableId+"_first",nPrev.id=oSettings.sTableId+"_previous",nNext.id=oSettings.sTableId+"_next",nLast.id=oSettings.sTableId+"_last")},fnUpdate:function(oSettings,fnCallbackDraw){if(oSettings.aanFeatures.p){var iStartButton,iEndButton,i,iLen,anButtons,anStatic,nNode,iPageCount=DataTable.ext.oPagination.iFullNumbersShowPages,iPageCountHalf=Math.floor(iPageCount/2),iPages=Math.ceil(oSettings.fnRecordsDisplay()/oSettings._iDisplayLength),iCurrentPage=Math.ceil(oSettings._iDisplayStart/oSettings._iDisplayLength)+1,sList="",oClasses=oSettings.oClasses,an=oSettings.aanFeatures.p,fnBind=function(j){oSettings.oApi._fnBindAction(this,{page:j+iStartButton-1},function(e){oSettings.oApi._fnPageChange(oSettings,e.data.page),fnCallbackDraw(oSettings),e.preventDefault()})};for(-1===oSettings._iDisplayLength?(iStartButton=1,iEndButton=1,iCurrentPage=1):iPageCount>iPages?(iStartButton=1,iEndButton=iPages):iPageCountHalf>=iCurrentPage?(iStartButton=1,iEndButton=iPageCount):iCurrentPage>=iPages-iPageCountHalf?(iStartButton=iPages-iPageCount+1,iEndButton=iPages):(iStartButton=iCurrentPage-Math.ceil(iPageCount/2)+1,iEndButton=iStartButton+iPageCount-1),i=iStartButton;iEndButton>=i;i++)sList+=iCurrentPage!==i?'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButton+'">'+oSettings.fnFormatNumber(i)+"</a>":'<a tabindex="'+oSettings.iTabIndex+'" class="'+oClasses.sPageButtonActive+'">'+oSettings.fnFormatNumber(i)+"</a>";for(i=0,iLen=an.length;iLen>i;i++)nNode=an[i],nNode.hasChildNodes()&&($("span:eq(0)",nNode).html(sList).children("a").each(fnBind),anButtons=nNode.getElementsByTagName("a"),anStatic=[anButtons[0],anButtons[1],anButtons[anButtons.length-2],anButtons[anButtons.length-1]],$(anStatic).removeClass(oClasses.sPageButton+" "+oClasses.sPageButtonActive+" "+oClasses.sPageButtonStaticDisabled),$([anStatic[0],anStatic[1]]).addClass(1==iCurrentPage?oClasses.sPageButtonStaticDisabled:oClasses.sPageButton),$([anStatic[2],anStatic[3]]).addClass(0===iPages||iCurrentPage===iPages||-1===oSettings._iDisplayLength?oClasses.sPageButtonStaticDisabled:oClasses.sPageButton))}}}}),$.extend(DataTable.ext.oSort,{"string-pre":function(a){if("string"!=typeof a){if(null===a||a===undefined||!a.toString)return"";a=a.toString()}return a.toLowerCase()},"string-asc":function(x,y){return y>x?-1:x>y?1:0},"string-desc":function(x,y){return y>x?1:x>y?-1:0},"html-pre":function(a){return a.replace(/<.*?>/g,"").toLowerCase()},"date-pre":function(a){var x=Date.parse(a);return(isNaN(x)||""===x)&&(x=Date.parse("01/01/1970 00:00:00")),x},"numeric-pre":function(a){return"-"==a||""===a?-(1/0):1*a}}),$.extend(DataTable.ext.aTypes,[function(data){return""===data||"-"===data||!isNaN(parseFloat(data))&&isFinite(data)?"numeric":null},function(data){var parsed=Date.parse(data);return null!==parsed&&!isNaN(parsed)||"string"==typeof data&&0===data.length?"date":null},function(data){return"string"==typeof data&&-1!=data.indexOf("<")&&-1!=data.indexOf(">")?"html":null}]),$.fn.dataTable=DataTable,$.fn.DataTable=function(opts){return $(this).dataTable(opts).api()},$.fn.dataTableSettings=DataTable.settings,$.fn.dataTableExt=DataTable.ext})}(window,document),function(window,document,$){function args(elem){var newAttrs={},rinlinejQuery=/^jQuery\d+$/;return $.each(elem.attributes,function(i,attr){attr.specified&&!rinlinejQuery.test(attr.name)&&(newAttrs[attr.name]=attr.value)}),newAttrs}function clearPlaceholder(event,value){var input=this,$input=$(input);if(input.value==$input.attr("placeholder")&&$input.hasClass("placeholder"))if($input.data("placeholder-password")){if($input=$input.hide().next().show().attr("id",$input.removeAttr("id").data("placeholder-id")),event===!0)return $input[0].value=value;$input.focus()}else input.value="",$input.removeClass("placeholder"),input==safeActiveElement()&&input.select()}function setPlaceholder(){var $replacement,input=this,$input=$(input),id=this.id;if(""==input.value){if("password"==input.type){if(!$input.data("placeholder-textinput")){try{$replacement=$input.clone().attr({type:"text"})}catch(e){$replacement=$("<input>").attr($.extend(args(this),{type:"text"}))}$replacement.removeAttr("name").data({"placeholder-password":$input,"placeholder-id":id}).bind("focus.placeholder",clearPlaceholder),$input.data({"placeholder-textinput":$replacement,"placeholder-id":id}).before($replacement)}$input=$input.removeAttr("id").hide().prev().attr("id",id).show()}$input.addClass("placeholder"),$input[0].value=$input.attr("placeholder")}else $input.removeClass("placeholder")}function safeActiveElement(){try{return document.activeElement}catch(exception){}}var hooks,placeholder,isOperaMini="[object OperaMini]"==Object.prototype.toString.call(window.operamini),isInputSupported="placeholder"in document.createElement("input")&&!isOperaMini,isTextareaSupported="placeholder"in document.createElement("textarea")&&!isOperaMini,prototype=$.fn,valHooks=$.valHooks,propHooks=$.propHooks;isInputSupported&&isTextareaSupported?(placeholder=prototype.placeholder=function(){return this},placeholder.input=placeholder.textarea=!0):(placeholder=prototype.placeholder=function(){var $this=this;return $this.filter((isInputSupported?"textarea":":input")+"[placeholder]").not(".placeholder").bind({"focus.placeholder":clearPlaceholder,"blur.placeholder":setPlaceholder}).data("placeholder-enabled",!0).trigger("blur.placeholder"),$this},placeholder.input=isInputSupported,placeholder.textarea=isTextareaSupported,hooks={get:function(element){var $element=$(element),$passwordInput=$element.data("placeholder-password");return $passwordInput?$passwordInput[0].value:$element.data("placeholder-enabled")&&$element.hasClass("placeholder")?"":element.value},set:function(element,value){var $element=$(element),$passwordInput=$element.data("placeholder-password");return $passwordInput?$passwordInput[0].value=value:$element.data("placeholder-enabled")?(""==value?(element.value=value,element!=safeActiveElement()&&setPlaceholder.call(element)):$element.hasClass("placeholder")?clearPlaceholder.call(element,!0,value)||(element.value=value):element.value=value,$element):element.value=value}},isInputSupported||(valHooks.input=hooks,propHooks.value=hooks),isTextareaSupported||(valHooks.textarea=hooks,propHooks.value=hooks),$(function(){$(document).delegate("form","submit.placeholder",function(){var $inputs=$(".placeholder",this).each(clearPlaceholder);setTimeout(function(){$inputs.each(setPlaceholder)},10)})}),$(window).bind("beforeunload.placeholder",function(){$(".placeholder").each(function(){this.value=""})}))}(this,document,jQuery);var __bind=function(fn,me){return function(){return fn.apply(me,arguments)}},__slice=[].slice;!function($,window){var ResizableColumns,parseWidth,pointerX,setWidth;return parseWidth=function(node){return parseFloat(node.style.width.replace("%",""))},setWidth=function(node,width){return width=width.toFixed(2),node.style.width=""+width+"%"},pointerX=function(e){return 0===e.type.indexOf("touch")?(e.originalEvent.touches[0]||e.originalEvent.changedTouches[0]).pageX:e.pageX},ResizableColumns=function(){function ResizableColumns($table,options){this.pointerdown=__bind(this.pointerdown,this),this.constrainWidth=__bind(this.constrainWidth,this),this.options=$.extend({},this.defaults,options),this.$table=$table,this.setHeaders(),this.restoreColumnWidths(),this.syncHandleWidths(),$(window).on("resize.rc",function(_this){return function(){return _this.syncHandleWidths()}}(this)),this.options.start&&this.$table.bind("column:resize:start.rc",this.options.start),this.options.resize&&this.$table.bind("column:resize.rc",this.options.resize),this.options.stop&&this.$table.bind("column:resize:stop.rc",this.options.stop)}return ResizableColumns.prototype.defaults={selector:"tr th:visible",store:window.store,syncHandlers:!0,resizeFromBody:!0,maxWidth:null,minWidth:null},ResizableColumns.prototype.triggerEvent=function(type,args,original){var event;return event=$.Event(type),event.originalEvent=$.extend({},original),this.$table.trigger(event,[this].concat(args||[]))},ResizableColumns.prototype.getColumnId=function($el){return this.$table.data("resizable-columns-id")+"-"+$el.data("resizable-column-id")},ResizableColumns.prototype.setHeaders=function(){return this.$tableHeaders=this.$table.find(this.options.selector),this.assignPercentageWidths(),this.createHandles()},ResizableColumns.prototype.destroy=function(){return this.$handleContainer.remove(),this.$table.removeData("resizableColumns"),this.$table.add(window).off(".rc")},ResizableColumns.prototype.assignPercentageWidths=function(){return this.$tableHeaders.each(function(_this){return function(_,el){var $el;return $el=$(el),setWidth($el[0],$el.outerWidth()/_this.$table.width()*100)}}(this))},ResizableColumns.prototype.createHandles=function(){var _ref;return null!=(_ref=this.$handleContainer)&&_ref.remove(),this.$table.before(this.$handleContainer=$("<div class='rc-handle-container' />")),this.$tableHeaders.each(function(_this){return function(i,el){var $handle;if(0!==_this.$tableHeaders.eq(i+1).length&&null==_this.$tableHeaders.eq(i).attr("data-noresize")&&null==_this.$tableHeaders.eq(i+1).attr("data-noresize"))return $handle=$("<div class='rc-handle' />"),$handle.data("th",$(el)),$handle.appendTo(_this.$handleContainer)}}(this)),this.$handleContainer.on("mousedown touchstart",".rc-handle",this.pointerdown)},ResizableColumns.prototype.syncHandleWidths=function(){return this.$handleContainer.width(this.$table.width()).find(".rc-handle").each(function(_this){return function(_,el){var $el;return $el=$(el),$el.css({left:$el.data("th").outerWidth()+($el.data("th").offset().left-_this.$handleContainer.offset().left),height:_this.options.resizeFromBody?_this.$table.height():_this.$table.find("thead").height()})}}(this))},ResizableColumns.prototype.saveColumnWidths=function(){return this.$tableHeaders.each(function(_this){return function(_,el){var $el;return $el=$(el),null==$el.attr("data-noresize")&&null!=_this.options.store?_this.options.store.set(_this.getColumnId($el),parseWidth($el[0])):void 0}}(this))},ResizableColumns.prototype.restoreColumnWidths=function(){return this.$tableHeaders.each(function(_this){return function(_,el){var $el,width;return $el=$(el),null!=_this.options.store&&(width=_this.options.store.get(_this.getColumnId($el)))?setWidth($el[0],width):void 0}}(this))},ResizableColumns.prototype.totalColumnWidths=function(){var total;return total=0,this.$tableHeaders.each(function(_this){return function(_,el){return total+=parseFloat($(el)[0].style.width.replace("%",""))}}(this)),total},ResizableColumns.prototype.constrainWidth=function(width){return null!=this.options.minWidth&&(width=Math.max(this.options.minWidth,width)),null!=this.options.maxWidth&&(width=Math.min(this.options.maxWidth,width)),width},ResizableColumns.prototype.pointerdown=function(e){var $currentGrip,$leftColumn,$ownerDocument,$rightColumn,newWidths,startPosition,widths;return e.preventDefault(),$ownerDocument=$(e.currentTarget.ownerDocument),startPosition=pointerX(e),$currentGrip=$(e.currentTarget),$leftColumn=$currentGrip.data("th"),$rightColumn=this.$tableHeaders.eq(this.$tableHeaders.index($leftColumn)+1),widths={left:parseWidth($leftColumn[0]),right:parseWidth($rightColumn[0])},newWidths={left:widths.left,right:widths.right},this.$handleContainer.add(this.$table).addClass("rc-table-resizing"),$leftColumn.add($rightColumn).add($currentGrip).addClass("rc-column-resizing"),this.triggerEvent("column:resize:start",[$leftColumn,$rightColumn,newWidths.left,newWidths.right],e),$ownerDocument.on("mousemove.rc touchmove.rc",function(_this){return function(e){var difference;return difference=(pointerX(e)-startPosition)/_this.$table.width()*100,setWidth($leftColumn[0],newWidths.left=_this.constrainWidth(widths.left+difference)),setWidth($rightColumn[0],newWidths.right=_this.constrainWidth(widths.right-difference)),null!=_this.options.syncHandlers&&_this.syncHandleWidths(),_this.triggerEvent("column:resize",[$leftColumn,$rightColumn,newWidths.left,newWidths.right],e)}}(this)),$ownerDocument.one("mouseup touchend",function(_this){return function(){return $ownerDocument.off("mousemove.rc touchmove.rc"),_this.$handleContainer.add(_this.$table).removeClass("rc-table-resizing"),$leftColumn.add($rightColumn).add($currentGrip).removeClass("rc-column-resizing"),_this.syncHandleWidths(),_this.saveColumnWidths(),_this.triggerEvent("column:resize:stop",[$leftColumn,$rightColumn,newWidths.left,newWidths.right],e)}}(this))},ResizableColumns}(),$.fn.extend({resizableColumns:function(){var args,option;return option=arguments[0],args=2<=arguments.length?__slice.call(arguments,1):[],this.each(function(){var $table,data;return $table=$(this),data=$table.data("resizableColumns"),data||$table.data("resizableColumns",data=new ResizableColumns($table,option)),"string"==typeof option?data[option].apply(data,args):void 0;
})}})}(window.jQuery,window),L.Control.LegendToggle=L.Control.extend({options:{position:"topright"},_currentLegends:[],_legendControl:void 0,_legendEnabled:!0,_toggleClass:function(el,name){"use strict";L.DomUtil.hasClass(el,name)?L.DomUtil.removeClass(el,name):L.DomUtil.addClass(el,name)},_toggleLegend:function(e){"use strict";L.DomEvent.stopPropagation(e),L.DomEvent.preventDefault(e),this._legendEnabled=!this._legendEnabled,this._toggleClass(e.currentTarget,"leaflet-control-legend-toggle-active"),this.updateLegend()},updateLegend:function(layers){"use strict";var self=this;layers&&(this._currentLegends=layers),this._map&&this._legendControl&&this._map.removeControl(this._legendControl),this._legendEnabled?(this._legendControl||(this._legendControl=L.control({position:"bottomright"})),this._legendControl.onAdd=function(){var div=L.DomUtil.create("div","leaflet-control-legend");return div.innerHTML+="<strong>Layer Legend</strong><br/>",self._currentLegends.length>0?angular.forEach(self._currentLegends,function(legend){div.innerHTML+='<img src="'+legend+'" alt="legend"/><br/>'}):div.innerHTML+="No selected layers",div},this._map&&this._legendControl.addTo(this._map)):this._legendControl=void 0},onAdd:function(map){"use strict";this._map=map;var controlDiv=L.DomUtil.create("div","leaflet-control-legend-toggle leaflet-control-legend-toggle-active");return controlDiv.setAttribute("title","Toggle Layer Legend"),L.DomEvent.on(controlDiv,"click",this._toggleLegend,this),controlDiv},updateLayers:this.updateLegend}),L.control.layerLegend=function(options){"use strict";return new L.Control.LegendToggle(options)},L.Control.MousePosition=L.Control.extend({options:{position:"bottomleft",separator:" : ",emptyString:"Unavailable",lngFirst:!1,numDigits:5,lngFormatter:void 0,latFormatter:void 0,prefix:""},onAdd:function(map){"use strict";return this._container=L.DomUtil.create("div","leaflet-control-mouseposition"),L.DomEvent.disableClickPropagation(this._container),map.on("mousemove",this._onMouseMove,this),this._container.innerHTML=this.options.emptyString,this._container},onRemove:function(map){"use strict";map.off("mousemove",this._onMouseMove)},_onMouseMove:function(e){"use strict";var value;if(this.options.valFormatter)value=this.options.valFormatter(e.latlng);else{var lng=this.options.lngFormatter?this.options.lngFormatter(e.latlng.lng):L.Util.formatNum(e.latlng.lng,this.options.numDigits),lat=this.options.latFormatter?this.options.latFormatter(e.latlng.lat):L.Util.formatNum(e.latlng.lat,this.options.numDigits);value=this.options.lngFirst?lng+this.options.separator+lat:lat+this.options.separator+lng}var prefixAndValue=this.options.prefix+" "+value;this._container.innerHTML=prefixAndValue}}),L.Map.mergeOptions({positionControl:!1}),L.Map.addInitHook(function(){"use strict";this.options.positionControl&&(this.positionControl=new L.Control.MousePosition,this.addControl(this.positionControl))}),L.control.mousePosition=function(options){"use strict";return new L.Control.MousePosition(options)},function(window,document,undefined){L.drawVersion="0.2.4-dev",L.drawLocal={draw:{toolbar:{actions:{title:"Cancel drawing",text:"Cancel"},undo:{title:"Delete last point drawn",text:"Delete last point"},buttons:{polyline:"Draw a polyline",polygon:"Draw a polygon",rectangle:"Draw a rectangle",circle:"Draw a circle",marker:"Draw a marker"}},handlers:{circle:{tooltip:{start:"Click and drag to draw circle."}},marker:{tooltip:{start:"Click map to place marker."}},polygon:{tooltip:{start:"Click to start drawing shape.",cont:"Click to continue drawing shape.",end:"Click first point to close this shape."}},polyline:{error:"<strong>Error:</strong> shape edges cannot cross!",tooltip:{start:"Click to start drawing line.",cont:"Click to continue drawing line.",end:"Click last point to finish line."}},rectangle:{tooltip:{start:"Click and drag to draw rectangle."}},simpleshape:{tooltip:{end:"Release mouse to finish drawing."}}}},edit:{toolbar:{actions:{save:{title:"Save changes.",text:"Save"},cancel:{title:"Cancel editing, discards all changes.",text:"Cancel"}},buttons:{edit:"Edit layers.",editDisabled:"No layers to edit.",remove:"Delete layers.",removeDisabled:"No layers to delete."}},handlers:{edit:{tooltip:{text:"Drag handles, or marker to edit feature.",subtext:"Click cancel to undo changes."}},remove:{tooltip:{text:"Click on a feature to remove"}}}}},L.Draw={},L.Draw.Feature=L.Handler.extend({includes:L.Mixin.Events,initialize:function(map,options){this._map=map,this._container=map._container,this._overlayPane=map._panes.overlayPane,this._popupPane=map._panes.popupPane,options&&options.shapeOptions&&(options.shapeOptions=L.Util.extend({},this.options.shapeOptions,options.shapeOptions)),L.setOptions(this,options)},enable:function(){this._enabled||(this.fire("enabled",{handler:this.type}),this._map.fire("draw:drawstart",{layerType:this.type}),L.Handler.prototype.enable.call(this))},disable:function(){this._enabled&&(L.Handler.prototype.disable.call(this),this._map.fire("draw:drawstop",{layerType:this.type}),this.fire("disabled",{handler:this.type}))},addHooks:function(){var map=this._map;map&&(L.DomUtil.disableTextSelection(),map.getContainer().focus(),this._tooltip=new L.Tooltip(this._map),L.DomEvent.on(this._container,"keyup",this._cancelDrawing,this))},removeHooks:function(){this._map&&(L.DomUtil.enableTextSelection(),this._tooltip.dispose(),this._tooltip=null,L.DomEvent.off(this._container,"keyup",this._cancelDrawing,this))},setOptions:function(options){L.setOptions(this,options)},_fireCreatedEvent:function(layer){this._map.fire("draw:created",{layer:layer,layerType:this.type})},_cancelDrawing:function(e){27===e.keyCode&&this.disable()}}),L.Draw.Polyline=L.Draw.Feature.extend({statics:{TYPE:"polyline"},Poly:L.Polyline,options:{allowIntersection:!0,repeatMode:!1,drawError:{color:"#b00b00",timeout:2500},icon:new L.DivIcon({iconSize:new L.Point(8,8),className:"leaflet-div-icon leaflet-editing-icon"}),guidelineDistance:20,maxGuideLineLength:4e3,shapeOptions:{stroke:!0,color:"#f06eaa",weight:4,opacity:.5,fill:!1,clickable:!0},metric:!0,showLength:!0,zIndexOffset:2e3},initialize:function(map,options){this.options.drawError.message=L.drawLocal.draw.handlers.polyline.error,options&&options.drawError&&(options.drawError=L.Util.extend({},this.options.drawError,options.drawError)),this.type=L.Draw.Polyline.TYPE,L.Draw.Feature.prototype.initialize.call(this,map,options)},addHooks:function(){L.Draw.Feature.prototype.addHooks.call(this),this._map&&(this._markers=[],this._markerGroup=new L.LayerGroup,this._map.addLayer(this._markerGroup),this._poly=new L.Polyline([],this.options.shapeOptions),this._tooltip.updateContent(this._getTooltipText()),this._mouseMarker||(this._mouseMarker=L.marker(this._map.getCenter(),{icon:L.divIcon({className:"leaflet-mouse-marker",iconAnchor:[20,20],iconSize:[40,40]}),opacity:0,zIndexOffset:this.options.zIndexOffset})),this._mouseMarker.on("mousedown",this._onMouseDown,this).addTo(this._map),this._map.on("mousemove",this._onMouseMove,this).on("mouseup",this._onMouseUp,this).on("zoomend",this._onZoomEnd,this))},removeHooks:function(){L.Draw.Feature.prototype.removeHooks.call(this),this._clearHideErrorTimeout(),this._cleanUpShape(),this._map.removeLayer(this._markerGroup),delete this._markerGroup,delete this._markers,this._map.removeLayer(this._poly),delete this._poly,this._mouseMarker.off("mousedown",this._onMouseDown,this).off("mouseup",this._onMouseUp,this),this._map.removeLayer(this._mouseMarker),delete this._mouseMarker,this._clearGuides(),this._map.off("mousemove",this._onMouseMove,this).off("zoomend",this._onZoomEnd,this)},deleteLastVertex:function(){if(!(this._markers.length<=1)){var lastMarker=this._markers.pop(),poly=this._poly,latlng=this._poly.spliceLatLngs(poly.getLatLngs().length-1,1)[0];this._markerGroup.removeLayer(lastMarker),poly.getLatLngs().length<2&&this._map.removeLayer(poly),this._vertexChanged(latlng,!1)}},addVertex:function(latlng){var markersLength=this._markers.length;return markersLength>0&&!this.options.allowIntersection&&this._poly.newLatLngIntersects(latlng)?void this._showErrorTooltip():(this._errorShown&&this._hideErrorTooltip(),this._markers.push(this._createMarker(latlng)),this._poly.addLatLng(latlng),2===this._poly.getLatLngs().length&&this._map.addLayer(this._poly),void this._vertexChanged(latlng,!0))},_finishShape:function(){var intersects=this._poly.newLatLngIntersects(this._poly.getLatLngs()[0],!0);return!this.options.allowIntersection&&intersects||!this._shapeIsValid()?void this._showErrorTooltip():(this._fireCreatedEvent(),this.disable(),void(this.options.repeatMode&&this.enable()))},_shapeIsValid:function(){return!0},_onZoomEnd:function(){this._updateGuide()},_onMouseMove:function(e){var newPos=e.layerPoint,latlng=e.latlng;this._currentLatLng=latlng,this._updateTooltip(latlng),this._updateGuide(newPos),this._mouseMarker.setLatLng(latlng),L.DomEvent.preventDefault(e.originalEvent)},_vertexChanged:function(latlng,added){this._updateFinishHandler(),this._updateRunningMeasure(latlng,added),this._clearGuides(),this._updateTooltip()},_onMouseDown:function(e){var originalEvent=e.originalEvent;this._mouseDownOrigin=L.point(originalEvent.clientX,originalEvent.clientY)},_onMouseUp:function(e){if(this._mouseDownOrigin){var distance=L.point(e.originalEvent.clientX,e.originalEvent.clientY).distanceTo(this._mouseDownOrigin);Math.abs(distance)<9*(window.devicePixelRatio||1)&&this.addVertex(e.latlng)}this._mouseDownOrigin=null},_updateFinishHandler:function(){var markerCount=this._markers.length;markerCount>1&&this._markers[markerCount-1].on("click",this._finishShape,this),markerCount>2&&this._markers[markerCount-2].off("click",this._finishShape,this)},_createMarker:function(latlng){var marker=new L.Marker(latlng,{icon:this.options.icon,zIndexOffset:2*this.options.zIndexOffset});return this._markerGroup.addLayer(marker),marker},_updateGuide:function(newPos){var markerCount=this._markers.length;markerCount>0&&(newPos=newPos||this._map.latLngToLayerPoint(this._currentLatLng),this._clearGuides(),this._drawGuide(this._map.latLngToLayerPoint(this._markers[markerCount-1].getLatLng()),newPos))},_updateTooltip:function(latLng){var text=this._getTooltipText();latLng&&this._tooltip.updatePosition(latLng),this._errorShown||this._tooltip.updateContent(text)},_drawGuide:function(pointA,pointB){var fraction,dashPoint,dash,length=Math.floor(Math.sqrt(Math.pow(pointB.x-pointA.x,2)+Math.pow(pointB.y-pointA.y,2))),guidelineDistance=this.options.guidelineDistance,maxGuideLineLength=this.options.maxGuideLineLength,i=length>maxGuideLineLength?length-maxGuideLineLength:guidelineDistance;for(this._guidesContainer||(this._guidesContainer=L.DomUtil.create("div","leaflet-draw-guides",this._overlayPane));length>i;i+=this.options.guidelineDistance)fraction=i/length,dashPoint={x:Math.floor(pointA.x*(1-fraction)+fraction*pointB.x),y:Math.floor(pointA.y*(1-fraction)+fraction*pointB.y)},dash=L.DomUtil.create("div","leaflet-draw-guide-dash",this._guidesContainer),dash.style.backgroundColor=this._errorShown?this.options.drawError.color:this.options.shapeOptions.color,L.DomUtil.setPosition(dash,dashPoint)},_updateGuideColor:function(color){if(this._guidesContainer)for(var i=0,l=this._guidesContainer.childNodes.length;l>i;i++)this._guidesContainer.childNodes[i].style.backgroundColor=color},_clearGuides:function(){if(this._guidesContainer)for(;this._guidesContainer.firstChild;)this._guidesContainer.removeChild(this._guidesContainer.firstChild)},_getTooltipText:function(){var labelText,distanceStr,showLength=this.options.showLength;return 0===this._markers.length?labelText={text:L.drawLocal.draw.handlers.polyline.tooltip.start}:(distanceStr=showLength?this._getMeasurementString():"",labelText=1===this._markers.length?{text:L.drawLocal.draw.handlers.polyline.tooltip.cont,subtext:distanceStr}:{text:L.drawLocal.draw.handlers.polyline.tooltip.end,subtext:distanceStr}),labelText},_updateRunningMeasure:function(latlng,added){var previousMarkerIndex,distance,markersLength=this._markers.length;1===this._markers.length?this._measurementRunningTotal=0:(previousMarkerIndex=markersLength-(added?2:1),distance=latlng.distanceTo(this._markers[previousMarkerIndex].getLatLng()),this._measurementRunningTotal+=distance*(added?1:-1))},_getMeasurementString:function(){var distance,currentLatLng=this._currentLatLng,previousLatLng=this._markers[this._markers.length-1].getLatLng();return distance=this._measurementRunningTotal+currentLatLng.distanceTo(previousLatLng),L.GeometryUtil.readableDistance(distance,this.options.metric)},_showErrorTooltip:function(){this._errorShown=!0,this._tooltip.showAsError().updateContent({text:this.options.drawError.message}),this._updateGuideColor(this.options.drawError.color),this._poly.setStyle({color:this.options.drawError.color}),this._clearHideErrorTimeout(),this._hideErrorTimeout=setTimeout(L.Util.bind(this._hideErrorTooltip,this),this.options.drawError.timeout)},_hideErrorTooltip:function(){this._errorShown=!1,this._clearHideErrorTimeout(),this._tooltip.removeError().updateContent(this._getTooltipText()),this._updateGuideColor(this.options.shapeOptions.color),this._poly.setStyle({color:this.options.shapeOptions.color})},_clearHideErrorTimeout:function(){this._hideErrorTimeout&&(clearTimeout(this._hideErrorTimeout),this._hideErrorTimeout=null)},_cleanUpShape:function(){this._markers.length>1&&this._markers[this._markers.length-1].off("click",this._finishShape,this)},_fireCreatedEvent:function(){var poly=new this.Poly(this._poly.getLatLngs(),this.options.shapeOptions);L.Draw.Feature.prototype._fireCreatedEvent.call(this,poly)}}),L.Draw.Polygon=L.Draw.Polyline.extend({statics:{TYPE:"polygon"},Poly:L.Polygon,options:{showArea:!1,shapeOptions:{stroke:!0,color:"#f06eaa",weight:4,opacity:.5,fill:!0,fillColor:null,fillOpacity:.2,clickable:!0}},initialize:function(map,options){L.Draw.Polyline.prototype.initialize.call(this,map,options),this.type=L.Draw.Polygon.TYPE},_updateFinishHandler:function(){var markerCount=this._markers.length;1===markerCount&&this._markers[0].on("click",this._finishShape,this),markerCount>2&&(this._markers[markerCount-1].on("dblclick",this._finishShape,this),markerCount>3&&this._markers[markerCount-2].off("dblclick",this._finishShape,this))},_getTooltipText:function(){var text,subtext;return 0===this._markers.length?text=L.drawLocal.draw.handlers.polygon.tooltip.start:this._markers.length<3?text=L.drawLocal.draw.handlers.polygon.tooltip.cont:(text=L.drawLocal.draw.handlers.polygon.tooltip.end,subtext=this._getMeasurementString()),{text:text,subtext:subtext}},_getMeasurementString:function(){var area=this._area;return area?L.GeometryUtil.readableArea(area,this.options.metric):null},_shapeIsValid:function(){return this._markers.length>=3},_vertexChanged:function(latlng,added){var latLngs;!this.options.allowIntersection&&this.options.showArea&&(latLngs=this._poly.getLatLngs(),this._area=L.GeometryUtil.geodesicArea(latLngs)),L.Draw.Polyline.prototype._vertexChanged.call(this,latlng,added)},_cleanUpShape:function(){var markerCount=this._markers.length;markerCount>0&&(this._markers[0].off("click",this._finishShape,this),markerCount>2&&this._markers[markerCount-1].off("dblclick",this._finishShape,this))}}),L.SimpleShape={},L.Draw.SimpleShape=L.Draw.Feature.extend({options:{repeatMode:!1},initialize:function(map,options){this._endLabelText=L.drawLocal.draw.handlers.simpleshape.tooltip.end,L.Draw.Feature.prototype.initialize.call(this,map,options)},addHooks:function(){L.Draw.Feature.prototype.addHooks.call(this),this._map&&(this._mapDraggable=this._map.dragging.enabled(),this._mapDraggable&&this._map.dragging.disable(),this._container.style.cursor="crosshair",this._tooltip.updateContent({text:this._initialLabelText}),this._map.on("mousedown",this._onMouseDown,this).on("mousemove",this._onMouseMove,this))},removeHooks:function(){L.Draw.Feature.prototype.removeHooks.call(this),this._map&&(this._mapDraggable&&this._map.dragging.enable(),this._container.style.cursor="",this._map.off("mousedown",this._onMouseDown,this).off("mousemove",this._onMouseMove,this),L.DomEvent.off(document,"mouseup",this._onMouseUp,this),this._shape&&(this._map.removeLayer(this._shape),delete this._shape)),this._isDrawing=!1},_onMouseDown:function(e){this._isDrawing=!0,this._startLatLng=e.latlng,L.DomEvent.on(document,"mouseup",this._onMouseUp,this).preventDefault(e.originalEvent)},_onMouseMove:function(e){var latlng=e.latlng;this._tooltip.updatePosition(latlng),this._isDrawing&&(this._tooltip.updateContent({text:this._endLabelText}),this._drawShape(latlng))},_onMouseUp:function(){this._shape&&this._fireCreatedEvent(),this.disable(),this.options.repeatMode&&this.enable()}}),L.Draw.Rectangle=L.Draw.SimpleShape.extend({statics:{TYPE:"rectangle"},options:{shapeOptions:{stroke:!0,color:"#f06eaa",weight:4,opacity:.5,fill:!0,fillColor:null,fillOpacity:.2,clickable:!0}},initialize:function(map,options){this.type=L.Draw.Rectangle.TYPE,this._initialLabelText=L.drawLocal.draw.handlers.rectangle.tooltip.start,L.Draw.SimpleShape.prototype.initialize.call(this,map,options)},_drawShape:function(latlng){this._shape?this._shape.setBounds(new L.LatLngBounds(this._startLatLng,latlng)):(this._shape=new L.Rectangle(new L.LatLngBounds(this._startLatLng,latlng),this.options.shapeOptions),this._map.addLayer(this._shape))},_fireCreatedEvent:function(){var rectangle=new L.Rectangle(this._shape.getBounds(),this.options.shapeOptions);L.Draw.SimpleShape.prototype._fireCreatedEvent.call(this,rectangle)}}),L.Draw.Circle=L.Draw.SimpleShape.extend({statics:{TYPE:"circle"},options:{shapeOptions:{stroke:!0,color:"#f06eaa",weight:4,opacity:.5,fill:!0,fillColor:null,fillOpacity:.2,clickable:!0},showRadius:!0,metric:!0},initialize:function(map,options){this.type=L.Draw.Circle.TYPE,this._initialLabelText=L.drawLocal.draw.handlers.circle.tooltip.start,L.Draw.SimpleShape.prototype.initialize.call(this,map,options)},_drawShape:function(latlng){this._shape?this._shape.setRadius(this._startLatLng.distanceTo(latlng)):(this._shape=new L.Circle(this._startLatLng,this._startLatLng.distanceTo(latlng),this.options.shapeOptions),this._map.addLayer(this._shape))},_fireCreatedEvent:function(){var circle=new L.Circle(this._startLatLng,this._shape.getRadius(),this.options.shapeOptions);L.Draw.SimpleShape.prototype._fireCreatedEvent.call(this,circle)},_onMouseMove:function(e){var radius,latlng=e.latlng,showRadius=this.options.showRadius,useMetric=this.options.metric;this._tooltip.updatePosition(latlng),this._isDrawing&&(this._drawShape(latlng),radius=this._shape.getRadius().toFixed(1),this._tooltip.updateContent({text:this._endLabelText,subtext:showRadius?"Radius: "+L.GeometryUtil.readableDistance(radius,useMetric):""}))}}),L.Draw.Marker=L.Draw.Feature.extend({statics:{TYPE:"marker"},options:{icon:new L.Icon.Default,repeatMode:!1,zIndexOffset:2e3},initialize:function(map,options){this.type=L.Draw.Marker.TYPE,L.Draw.Feature.prototype.initialize.call(this,map,options)},addHooks:function(){L.Draw.Feature.prototype.addHooks.call(this),this._map&&(this._tooltip.updateContent({text:L.drawLocal.draw.handlers.marker.tooltip.start}),this._mouseMarker||(this._mouseMarker=L.marker(this._map.getCenter(),{icon:L.divIcon({className:"leaflet-mouse-marker",iconAnchor:[20,20],iconSize:[40,40]}),opacity:0,zIndexOffset:this.options.zIndexOffset})),this._mouseMarker.on("click",this._onClick,this).addTo(this._map),this._map.on("mousemove",this._onMouseMove,this))},removeHooks:function(){L.Draw.Feature.prototype.removeHooks.call(this),this._map&&(this._marker&&(this._marker.off("click",this._onClick,this),this._map.off("click",this._onClick,this).removeLayer(this._marker),delete this._marker),this._mouseMarker.off("click",this._onClick,this),this._map.removeLayer(this._mouseMarker),delete this._mouseMarker,this._map.off("mousemove",this._onMouseMove,this))},_onMouseMove:function(e){var latlng=e.latlng;this._tooltip.updatePosition(latlng),this._mouseMarker.setLatLng(latlng),this._marker?(latlng=this._mouseMarker.getLatLng(),this._marker.setLatLng(latlng)):(this._marker=new L.Marker(latlng,{icon:this.options.icon,zIndexOffset:this.options.zIndexOffset}),this._marker.on("click",this._onClick,this),this._map.on("click",this._onClick,this).addLayer(this._marker))},_onClick:function(){this._fireCreatedEvent(),this.disable(),this.options.repeatMode&&this.enable()},_fireCreatedEvent:function(){var marker=new L.Marker(this._marker.getLatLng(),{icon:this.options.icon});L.Draw.Feature.prototype._fireCreatedEvent.call(this,marker)}}),L.Edit=L.Edit||{},L.Edit.Poly=L.Handler.extend({options:{icon:new L.DivIcon({iconSize:new L.Point(8,8),className:"leaflet-div-icon leaflet-editing-icon"})},initialize:function(poly,options){this._poly=poly,L.setOptions(this,options)},addHooks:function(){this._poly._map&&(this._markerGroup||this._initMarkers(),this._poly._map.addLayer(this._markerGroup))},removeHooks:function(){this._poly._map&&(this._poly._map.removeLayer(this._markerGroup),delete this._markerGroup,delete this._markers)},updateMarkers:function(){this._markerGroup.clearLayers(),this._initMarkers()},_initMarkers:function(){this._markerGroup||(this._markerGroup=new L.LayerGroup),this._markers=[];var i,j,len,marker,latlngs=this._poly._latlngs;for(i=0,len=latlngs.length;len>i;i++)marker=this._createMarker(latlngs[i],i),marker.on("click",this._onMarkerClick,this),this._markers.push(marker);var markerLeft,markerRight;for(i=0,j=len-1;len>i;j=i++)(0!==i||L.Polygon&&this._poly instanceof L.Polygon)&&(markerLeft=this._markers[j],markerRight=this._markers[i],this._createMiddleMarker(markerLeft,markerRight),this._updatePrevNext(markerLeft,markerRight))},_createMarker:function(latlng,index){var marker=new L.Marker(latlng,{draggable:!0,icon:this.options.icon});return marker._origLatLng=latlng,marker._index=index,marker.on("drag",this._onMarkerDrag,this),marker.on("dragend",this._fireEdit,this),this._markerGroup.addLayer(marker),marker},_removeMarker:function(marker){var i=marker._index;this._markerGroup.removeLayer(marker),this._markers.splice(i,1),this._poly.spliceLatLngs(i,1),this._updateIndexes(i,-1),marker.off("drag",this._onMarkerDrag,this).off("dragend",this._fireEdit,this).off("click",this._onMarkerClick,this)},_fireEdit:function(){this._poly.edited=!0,this._poly.fire("edit")},_onMarkerDrag:function(e){var marker=e.target;L.extend(marker._origLatLng,marker._latlng),marker._middleLeft&&marker._middleLeft.setLatLng(this._getMiddleLatLng(marker._prev,marker)),marker._middleRight&&marker._middleRight.setLatLng(this._getMiddleLatLng(marker,marker._next)),this._poly.redraw()},_onMarkerClick:function(e){var minPoints=L.Polygon&&this._poly instanceof L.Polygon?4:3,marker=e.target;this._poly._latlngs.length<minPoints||(this._removeMarker(marker),this._updatePrevNext(marker._prev,marker._next),marker._middleLeft&&this._markerGroup.removeLayer(marker._middleLeft),marker._middleRight&&this._markerGroup.removeLayer(marker._middleRight),marker._prev&&marker._next?this._createMiddleMarker(marker._prev,marker._next):marker._prev?marker._next||(marker._prev._middleRight=null):marker._next._middleLeft=null,this._fireEdit())},_updateIndexes:function(index,delta){this._markerGroup.eachLayer(function(marker){marker._index>index&&(marker._index+=delta)})},_createMiddleMarker:function(marker1,marker2){var onClick,onDragStart,onDragEnd,latlng=this._getMiddleLatLng(marker1,marker2),marker=this._createMarker(latlng);marker.setOpacity(.6),marker1._middleRight=marker2._middleLeft=marker,onDragStart=function(){var i=marker2._index;marker._index=i,marker.off("click",onClick,this).on("click",this._onMarkerClick,this),latlng.lat=marker.getLatLng().lat,latlng.lng=marker.getLatLng().lng,this._poly.spliceLatLngs(i,0,latlng),this._markers.splice(i,0,marker),marker.setOpacity(1),this._updateIndexes(i,1),marker2._index++,this._updatePrevNext(marker1,marker),this._updatePrevNext(marker,marker2),this._poly.fire("editstart")},onDragEnd=function(){marker.off("dragstart",onDragStart,this),marker.off("dragend",onDragEnd,this),this._createMiddleMarker(marker1,marker),this._createMiddleMarker(marker,marker2)},onClick=function(){onDragStart.call(this),onDragEnd.call(this),this._fireEdit()},marker.on("click",onClick,this).on("dragstart",onDragStart,this).on("dragend",onDragEnd,this),this._markerGroup.addLayer(marker)},_updatePrevNext:function(marker1,marker2){marker1&&(marker1._next=marker2),marker2&&(marker2._prev=marker1)},_getMiddleLatLng:function(marker1,marker2){var map=this._poly._map,p1=map.project(marker1.getLatLng()),p2=map.project(marker2.getLatLng());return map.unproject(p1._add(p2)._divideBy(2))}}),L.Polyline.addInitHook(function(){this.editing||(L.Edit.Poly&&(this.editing=new L.Edit.Poly(this),this.options.editable&&this.editing.enable()),this.on("add",function(){this.editing&&this.editing.enabled()&&this.editing.addHooks()}),this.on("remove",function(){this.editing&&this.editing.enabled()&&this.editing.removeHooks()}))}),L.Edit=L.Edit||{},L.Edit.SimpleShape=L.Handler.extend({options:{moveIcon:new L.DivIcon({iconSize:new L.Point(8,8),className:"leaflet-div-icon leaflet-editing-icon leaflet-edit-move"}),resizeIcon:new L.DivIcon({iconSize:new L.Point(8,8),className:"leaflet-div-icon leaflet-editing-icon leaflet-edit-resize"})},initialize:function(shape,options){this._shape=shape,L.Util.setOptions(this,options)},addHooks:function(){this._shape._map&&(this._map=this._shape._map,this._markerGroup||this._initMarkers(),this._map.addLayer(this._markerGroup))},removeHooks:function(){if(this._shape._map){this._unbindMarker(this._moveMarker);for(var i=0,l=this._resizeMarkers.length;l>i;i++)this._unbindMarker(this._resizeMarkers[i]);this._resizeMarkers=null,this._map.removeLayer(this._markerGroup),delete this._markerGroup}this._map=null},updateMarkers:function(){this._markerGroup.clearLayers(),this._initMarkers()},_initMarkers:function(){this._markerGroup||(this._markerGroup=new L.LayerGroup),this._createMoveMarker(),this._createResizeMarker()},_createMoveMarker:function(){},_createResizeMarker:function(){},_createMarker:function(latlng,icon){var marker=new L.Marker(latlng,{draggable:!0,icon:icon,zIndexOffset:10});return this._bindMarker(marker),this._markerGroup.addLayer(marker),marker},_bindMarker:function(marker){marker.on("dragstart",this._onMarkerDragStart,this).on("drag",this._onMarkerDrag,this).on("dragend",this._onMarkerDragEnd,this)},_unbindMarker:function(marker){marker.off("dragstart",this._onMarkerDragStart,this).off("drag",this._onMarkerDrag,this).off("dragend",this._onMarkerDragEnd,this)},_onMarkerDragStart:function(e){var marker=e.target;marker.setOpacity(0),this._shape.fire("editstart")},_fireEdit:function(){this._shape.edited=!0,this._shape.fire("edit")},_onMarkerDrag:function(e){var marker=e.target,latlng=marker.getLatLng();marker===this._moveMarker?this._move(latlng):this._resize(latlng),this._shape.redraw()},_onMarkerDragEnd:function(e){var marker=e.target;marker.setOpacity(1),this._fireEdit()},_move:function(){},_resize:function(){}}),L.Edit=L.Edit||{},L.Edit.Rectangle=L.Edit.SimpleShape.extend({_createMoveMarker:function(){var bounds=this._shape.getBounds(),center=bounds.getCenter();this._moveMarker=this._createMarker(center,this.options.moveIcon)},_createResizeMarker:function(){var corners=this._getCorners();this._resizeMarkers=[];for(var i=0,l=corners.length;l>i;i++)this._resizeMarkers.push(this._createMarker(corners[i],this.options.resizeIcon)),this._resizeMarkers[i]._cornerIndex=i},_onMarkerDragStart:function(e){L.Edit.SimpleShape.prototype._onMarkerDragStart.call(this,e);var corners=this._getCorners(),marker=e.target,currentCornerIndex=marker._cornerIndex;this._oppositeCorner=corners[(currentCornerIndex+2)%4],this._toggleCornerMarkers(0,currentCornerIndex)},_onMarkerDragEnd:function(e){var bounds,center,marker=e.target;marker===this._moveMarker&&(bounds=this._shape.getBounds(),center=bounds.getCenter(),marker.setLatLng(center)),this._toggleCornerMarkers(1),this._repositionCornerMarkers(),L.Edit.SimpleShape.prototype._onMarkerDragEnd.call(this,e)},_move:function(newCenter){for(var offset,latlngs=this._shape.getLatLngs(),bounds=this._shape.getBounds(),center=bounds.getCenter(),newLatLngs=[],i=0,l=latlngs.length;l>i;i++)offset=[latlngs[i].lat-center.lat,latlngs[i].lng-center.lng],newLatLngs.push([newCenter.lat+offset[0],newCenter.lng+offset[1]]);this._shape.setLatLngs(newLatLngs),this._repositionCornerMarkers()},_resize:function(latlng){var bounds;this._shape.setBounds(L.latLngBounds(latlng,this._oppositeCorner)),bounds=this._shape.getBounds(),this._moveMarker.setLatLng(bounds.getCenter())},_getCorners:function(){var bounds=this._shape.getBounds(),nw=bounds.getNorthWest(),ne=bounds.getNorthEast(),se=bounds.getSouthEast(),sw=bounds.getSouthWest();return[nw,ne,se,sw]},_toggleCornerMarkers:function(opacity){for(var i=0,l=this._resizeMarkers.length;l>i;i++)this._resizeMarkers[i].setOpacity(opacity)},_repositionCornerMarkers:function(){for(var corners=this._getCorners(),i=0,l=this._resizeMarkers.length;l>i;i++)this._resizeMarkers[i].setLatLng(corners[i])}}),L.Rectangle.addInitHook(function(){L.Edit.Rectangle&&(this.editing=new L.Edit.Rectangle(this),this.options.editable&&this.editing.enable())}),L.Edit=L.Edit||{},L.Edit.Circle=L.Edit.SimpleShape.extend({_createMoveMarker:function(){var center=this._shape.getLatLng();this._moveMarker=this._createMarker(center,this.options.moveIcon)},_createResizeMarker:function(){var center=this._shape.getLatLng(),resizemarkerPoint=this._getResizeMarkerPoint(center);this._resizeMarkers=[],this._resizeMarkers.push(this._createMarker(resizemarkerPoint,this.options.resizeIcon))},_getResizeMarkerPoint:function(latlng){var delta=this._shape._radius*Math.cos(Math.PI/4),point=this._map.project(latlng);return this._map.unproject([point.x+delta,point.y-delta])},_move:function(latlng){var resizemarkerPoint=this._getResizeMarkerPoint(latlng);this._resizeMarkers[0].setLatLng(resizemarkerPoint),this._shape.setLatLng(latlng)},_resize:function(latlng){var moveLatLng=this._moveMarker.getLatLng(),radius=moveLatLng.distanceTo(latlng);this._shape.setRadius(radius)}}),L.Circle.addInitHook(function(){L.Edit.Circle&&(this.editing=new L.Edit.Circle(this),this.options.editable&&this.editing.enable()),this.on("add",function(){this.editing&&this.editing.enabled()&&this.editing.addHooks()}),this.on("remove",function(){this.editing&&this.editing.enabled()&&this.editing.removeHooks()})}),L.LatLngUtil={cloneLatLngs:function(latlngs){for(var clone=[],i=0,l=latlngs.length;l>i;i++)clone.push(this.cloneLatLng(latlngs[i]));return clone},cloneLatLng:function(latlng){return L.latLng(latlng.lat,latlng.lng)}},L.GeometryUtil=L.extend(L.GeometryUtil||{},{geodesicArea:function(latLngs){var p1,p2,pointsCount=latLngs.length,area=0,d2r=L.LatLng.DEG_TO_RAD;if(pointsCount>2){for(var i=0;pointsCount>i;i++)p1=latLngs[i],p2=latLngs[(i+1)%pointsCount],area+=(p2.lng-p1.lng)*d2r*(2+Math.sin(p1.lat*d2r)+Math.sin(p2.lat*d2r));area=6378137*area*6378137/2}return Math.abs(area)},readableArea:function(area,isMetric){var areaStr;return isMetric?areaStr=area>=1e4?(1e-4*area).toFixed(2)+" ha":area.toFixed(2)+" m&sup2;":(area*=.836127,areaStr=area>=3097600?(area/3097600).toFixed(2)+" mi&sup2;":area>=4840?(area/4840).toFixed(2)+" acres":Math.ceil(area)+" yd&sup2;"),areaStr},readableDistance:function(distance,isMetric){var distanceStr;return isMetric?distanceStr=distance>1e3?(distance/1e3).toFixed(2)+" km":Math.ceil(distance)+" m":(distance*=1.09361,distanceStr=distance>1760?(distance/1760).toFixed(2)+" miles":Math.ceil(distance)+" yd"),distanceStr}}),L.Util.extend(L.LineUtil,{segmentsIntersect:function(p,p1,p2,p3){return this._checkCounterclockwise(p,p2,p3)!==this._checkCounterclockwise(p1,p2,p3)&&this._checkCounterclockwise(p,p1,p2)!==this._checkCounterclockwise(p,p1,p3)},_checkCounterclockwise:function(p,p1,p2){return(p2.y-p.y)*(p1.x-p.x)>(p1.y-p.y)*(p2.x-p.x)}}),L.Polyline.include({
intersects:function(){var i,p,p1,points=this._originalPoints,len=points?points.length:0;if(this._tooFewPointsForIntersection())return!1;for(i=len-1;i>=3;i--)if(p=points[i-1],p1=points[i],this._lineSegmentsIntersectsRange(p,p1,i-2))return!0;return!1},newLatLngIntersects:function(latlng,skipFirst){return this._map?this.newPointIntersects(this._map.latLngToLayerPoint(latlng),skipFirst):!1},newPointIntersects:function(newPoint,skipFirst){var points=this._originalPoints,len=points?points.length:0,lastPoint=points?points[len-1]:null,maxIndex=len-2;return this._tooFewPointsForIntersection(1)?!1:this._lineSegmentsIntersectsRange(lastPoint,newPoint,maxIndex,skipFirst?1:0)},_tooFewPointsForIntersection:function(extraPoints){var points=this._originalPoints,len=points?points.length:0;return len+=extraPoints||0,!this._originalPoints||3>=len},_lineSegmentsIntersectsRange:function(p,p1,maxIndex,minIndex){var p2,p3,points=this._originalPoints;minIndex=minIndex||0;for(var j=maxIndex;j>minIndex;j--)if(p2=points[j-1],p3=points[j],L.LineUtil.segmentsIntersect(p,p1,p2,p3))return!0;return!1}}),L.Polygon.include({intersects:function(){var polylineIntersects,len,firstPoint,lastPoint,maxIndex,points=this._originalPoints;return this._tooFewPointsForIntersection()?!1:(polylineIntersects=L.Polyline.prototype.intersects.call(this))?!0:(len=points.length,firstPoint=points[0],lastPoint=points[len-1],maxIndex=len-2,this._lineSegmentsIntersectsRange(lastPoint,firstPoint,maxIndex,1))}}),L.Control.Draw=L.Control.extend({options:{position:"topleft",draw:{},edit:!1},initialize:function(options){if(L.version<"0.7")throw new Error("Leaflet.draw 0.2.3+ requires Leaflet 0.7.0+. Download latest from https://github.com/Leaflet/Leaflet/");L.Control.prototype.initialize.call(this,options);var id,toolbar;this._toolbars={},L.DrawToolbar&&this.options.draw&&(toolbar=new L.DrawToolbar(this.options.draw),id=L.stamp(toolbar),this._toolbars[id]=toolbar,this._toolbars[id].on("enable",this._toolbarEnabled,this)),L.EditToolbar&&this.options.edit&&(toolbar=new L.EditToolbar(this.options.edit),id=L.stamp(toolbar),this._toolbars[id]=toolbar,this._toolbars[id].on("enable",this._toolbarEnabled,this))},onAdd:function(map){var toolbarContainer,container=L.DomUtil.create("div","leaflet-draw"),addedTopClass=!1,topClassName="leaflet-draw-toolbar-top";for(var toolbarId in this._toolbars)this._toolbars.hasOwnProperty(toolbarId)&&(toolbarContainer=this._toolbars[toolbarId].addToolbar(map),toolbarContainer&&(addedTopClass||(L.DomUtil.hasClass(toolbarContainer,topClassName)||L.DomUtil.addClass(toolbarContainer.childNodes[0],topClassName),addedTopClass=!0),container.appendChild(toolbarContainer)));return container},onRemove:function(){for(var toolbarId in this._toolbars)this._toolbars.hasOwnProperty(toolbarId)&&this._toolbars[toolbarId].removeToolbar()},setDrawingOptions:function(options){for(var toolbarId in this._toolbars)this._toolbars[toolbarId]instanceof L.DrawToolbar&&this._toolbars[toolbarId].setOptions(options)},_toolbarEnabled:function(e){var id=""+L.stamp(e.target);for(var toolbarId in this._toolbars)this._toolbars.hasOwnProperty(toolbarId)&&toolbarId!==id&&this._toolbars[toolbarId].disable()}}),L.Map.mergeOptions({drawControlTooltips:!0,drawControl:!1}),L.Map.addInitHook(function(){this.options.drawControl&&(this.drawControl=new L.Control.Draw,this.addControl(this.drawControl))}),L.Toolbar=L.Class.extend({includes:[L.Mixin.Events],initialize:function(options){L.setOptions(this,options),this._modes={},this._actionButtons=[],this._activeMode=null},enabled:function(){return null!==this._activeMode},disable:function(){this.enabled()&&this._activeMode.handler.disable()},addToolbar:function(map){var i,container=L.DomUtil.create("div","leaflet-draw-section"),buttonIndex=0,buttonClassPrefix=this._toolbarClass||"",modeHandlers=this.getModeHandlers(map);for(this._toolbarContainer=L.DomUtil.create("div","leaflet-draw-toolbar leaflet-bar"),this._map=map,i=0;i<modeHandlers.length;i++)modeHandlers[i].enabled&&this._initModeHandler(modeHandlers[i].handler,this._toolbarContainer,buttonIndex++,buttonClassPrefix,modeHandlers[i].title);return buttonIndex?(this._lastButtonIndex=--buttonIndex,this._actionsContainer=L.DomUtil.create("ul","leaflet-draw-actions"),container.appendChild(this._toolbarContainer),container.appendChild(this._actionsContainer),container):void 0},removeToolbar:function(){for(var handlerId in this._modes)this._modes.hasOwnProperty(handlerId)&&(this._disposeButton(this._modes[handlerId].button,this._modes[handlerId].handler.enable,this._modes[handlerId].handler),this._modes[handlerId].handler.disable(),this._modes[handlerId].handler.off("enabled",this._handlerActivated,this).off("disabled",this._handlerDeactivated,this));this._modes={};for(var i=0,l=this._actionButtons.length;l>i;i++)this._disposeButton(this._actionButtons[i].button,this._actionButtons[i].callback,this);this._actionButtons=[],this._actionsContainer=null},_initModeHandler:function(handler,container,buttonIndex,classNamePredix,buttonTitle){var type=handler.type;this._modes[type]={},this._modes[type].handler=handler,this._modes[type].button=this._createButton({title:buttonTitle,className:classNamePredix+"-"+type,container:container,callback:this._modes[type].handler.enable,context:this._modes[type].handler}),this._modes[type].buttonIndex=buttonIndex,this._modes[type].handler.on("enabled",this._handlerActivated,this).on("disabled",this._handlerDeactivated,this)},_createButton:function(options){var link=L.DomUtil.create("a",options.className||"",options.container);return link.href="#",options.text&&(link.innerHTML=options.text),options.title&&(link.title=options.title),L.DomEvent.on(link,"click",L.DomEvent.stopPropagation).on(link,"mousedown",L.DomEvent.stopPropagation).on(link,"dblclick",L.DomEvent.stopPropagation).on(link,"click",L.DomEvent.preventDefault).on(link,"click",options.callback,options.context),link},_disposeButton:function(button,callback){L.DomEvent.off(button,"click",L.DomEvent.stopPropagation).off(button,"mousedown",L.DomEvent.stopPropagation).off(button,"dblclick",L.DomEvent.stopPropagation).off(button,"click",L.DomEvent.preventDefault).off(button,"click",callback)},_handlerActivated:function(e){this.disable(),this._activeMode=this._modes[e.handler],L.DomUtil.addClass(this._activeMode.button,"leaflet-draw-toolbar-button-enabled"),this._showActionsToolbar(),this.fire("enable")},_handlerDeactivated:function(){this._hideActionsToolbar(),L.DomUtil.removeClass(this._activeMode.button,"leaflet-draw-toolbar-button-enabled"),this._activeMode=null,this.fire("disable")},_createActions:function(handler){var li,di,dl,button,container=this._actionsContainer,buttons=this.getActions(handler),l=buttons.length;for(di=0,dl=this._actionButtons.length;dl>di;di++)this._disposeButton(this._actionButtons[di].button,this._actionButtons[di].callback);for(this._actionButtons=[];container.firstChild;)container.removeChild(container.firstChild);for(var i=0;l>i;i++)"enabled"in buttons[i]&&!buttons[i].enabled||(li=L.DomUtil.create("li","",container),button=this._createButton({title:buttons[i].title,text:buttons[i].text,container:li,callback:buttons[i].callback,context:buttons[i].context}),this._actionButtons.push({button:button,callback:buttons[i].callback}))},_showActionsToolbar:function(){var buttonIndex=this._activeMode.buttonIndex,lastButtonIndex=this._lastButtonIndex,toolbarPosition=this._activeMode.button.offsetTop-1;this._createActions(this._activeMode.handler),this._actionsContainer.style.top=toolbarPosition+"px",0===buttonIndex&&(L.DomUtil.addClass(this._toolbarContainer,"leaflet-draw-toolbar-notop"),L.DomUtil.addClass(this._actionsContainer,"leaflet-draw-actions-top")),buttonIndex===lastButtonIndex&&(L.DomUtil.addClass(this._toolbarContainer,"leaflet-draw-toolbar-nobottom"),L.DomUtil.addClass(this._actionsContainer,"leaflet-draw-actions-bottom")),this._actionsContainer.style.display="block"},_hideActionsToolbar:function(){this._actionsContainer.style.display="none",L.DomUtil.removeClass(this._toolbarContainer,"leaflet-draw-toolbar-notop"),L.DomUtil.removeClass(this._toolbarContainer,"leaflet-draw-toolbar-nobottom"),L.DomUtil.removeClass(this._actionsContainer,"leaflet-draw-actions-top"),L.DomUtil.removeClass(this._actionsContainer,"leaflet-draw-actions-bottom")}}),L.Tooltip=L.Class.extend({initialize:function(map){this._map=map,this._popupPane=map._panes.popupPane,this._container=map.options.drawControlTooltips?L.DomUtil.create("div","leaflet-draw-tooltip",this._popupPane):null,this._singleLineLabel=!1},dispose:function(){this._container&&(this._popupPane.removeChild(this._container),this._container=null)},updateContent:function(labelText){return this._container?(labelText.subtext=labelText.subtext||"",0!==labelText.subtext.length||this._singleLineLabel?labelText.subtext.length>0&&this._singleLineLabel&&(L.DomUtil.removeClass(this._container,"leaflet-draw-tooltip-single"),this._singleLineLabel=!1):(L.DomUtil.addClass(this._container,"leaflet-draw-tooltip-single"),this._singleLineLabel=!0),this._container.innerHTML=(labelText.subtext.length>0?'<span class="leaflet-draw-tooltip-subtext">'+labelText.subtext+"</span><br />":"")+"<span>"+labelText.text+"</span>",this):this},updatePosition:function(latlng){var pos=this._map.latLngToLayerPoint(latlng),tooltipContainer=this._container;return this._container&&(tooltipContainer.style.visibility="inherit",L.DomUtil.setPosition(tooltipContainer,pos)),this},showAsError:function(){return this._container&&L.DomUtil.addClass(this._container,"leaflet-error-draw-tooltip"),this},removeError:function(){return this._container&&L.DomUtil.removeClass(this._container,"leaflet-error-draw-tooltip"),this}}),L.DrawToolbar=L.Toolbar.extend({options:{polyline:{},polygon:{},rectangle:{},circle:{},marker:{}},initialize:function(options){for(var type in this.options)this.options.hasOwnProperty(type)&&options[type]&&(options[type]=L.extend({},this.options[type],options[type]));this._toolbarClass="leaflet-draw-draw",L.Toolbar.prototype.initialize.call(this,options)},getModeHandlers:function(map){return[{enabled:this.options.polyline,handler:new L.Draw.Polyline(map,this.options.polyline),title:L.drawLocal.draw.toolbar.buttons.polyline},{enabled:this.options.polygon,handler:new L.Draw.Polygon(map,this.options.polygon),title:L.drawLocal.draw.toolbar.buttons.polygon},{enabled:this.options.rectangle,handler:new L.Draw.Rectangle(map,this.options.rectangle),title:L.drawLocal.draw.toolbar.buttons.rectangle},{enabled:this.options.circle,handler:new L.Draw.Circle(map,this.options.circle),title:L.drawLocal.draw.toolbar.buttons.circle},{enabled:this.options.marker,handler:new L.Draw.Marker(map,this.options.marker),title:L.drawLocal.draw.toolbar.buttons.marker}]},getActions:function(handler){return[{enabled:handler.deleteLastVertex,title:L.drawLocal.draw.toolbar.undo.title,text:L.drawLocal.draw.toolbar.undo.text,callback:handler.deleteLastVertex,context:handler},{title:L.drawLocal.draw.toolbar.actions.title,text:L.drawLocal.draw.toolbar.actions.text,callback:this.disable,context:this}]},setOptions:function(options){L.setOptions(this,options);for(var type in this._modes)this._modes.hasOwnProperty(type)&&options.hasOwnProperty(type)&&this._modes[type].handler.setOptions(options[type])}}),L.EditToolbar=L.Toolbar.extend({options:{edit:{selectedPathOptions:{color:"#fe57a1",opacity:.6,dashArray:"10, 10",fill:!0,fillColor:"#fe57a1",fillOpacity:.1}},remove:{},featureGroup:null},initialize:function(options){options.edit&&("undefined"==typeof options.edit.selectedPathOptions&&(options.edit.selectedPathOptions=this.options.edit.selectedPathOptions),options.edit=L.extend({},this.options.edit,options.edit)),options.remove&&(options.remove=L.extend({},this.options.remove,options.remove)),this._toolbarClass="leaflet-draw-edit",L.Toolbar.prototype.initialize.call(this,options),this._selectedFeatureCount=0},getModeHandlers:function(map){var featureGroup=this.options.featureGroup;return[{enabled:this.options.edit,handler:new L.EditToolbar.Edit(map,{featureGroup:featureGroup,selectedPathOptions:this.options.edit.selectedPathOptions}),title:L.drawLocal.edit.toolbar.buttons.edit},{enabled:this.options.remove,handler:new L.EditToolbar.Delete(map,{featureGroup:featureGroup}),title:L.drawLocal.edit.toolbar.buttons.remove}]},getActions:function(){return[{title:L.drawLocal.edit.toolbar.actions.save.title,text:L.drawLocal.edit.toolbar.actions.save.text,callback:this._save,context:this},{title:L.drawLocal.edit.toolbar.actions.cancel.title,text:L.drawLocal.edit.toolbar.actions.cancel.text,callback:this.disable,context:this}]},addToolbar:function(map){var container=L.Toolbar.prototype.addToolbar.call(this,map);return this._checkDisabled(),this.options.featureGroup.on("layeradd layerremove",this._checkDisabled,this),container},removeToolbar:function(){this.options.featureGroup.off("layeradd layerremove",this._checkDisabled,this),L.Toolbar.prototype.removeToolbar.call(this)},disable:function(){this.enabled()&&(this._activeMode.handler.revertLayers(),L.Toolbar.prototype.disable.call(this))},_save:function(){this._activeMode.handler.save(),this._activeMode.handler.disable()},_checkDisabled:function(){var button,featureGroup=this.options.featureGroup,hasLayers=0!==featureGroup.getLayers().length;this.options.edit&&(button=this._modes[L.EditToolbar.Edit.TYPE].button,hasLayers?L.DomUtil.removeClass(button,"leaflet-disabled"):L.DomUtil.addClass(button,"leaflet-disabled"),button.setAttribute("title",hasLayers?L.drawLocal.edit.toolbar.buttons.edit:L.drawLocal.edit.toolbar.buttons.editDisabled)),this.options.remove&&(button=this._modes[L.EditToolbar.Delete.TYPE].button,hasLayers?L.DomUtil.removeClass(button,"leaflet-disabled"):L.DomUtil.addClass(button,"leaflet-disabled"),button.setAttribute("title",hasLayers?L.drawLocal.edit.toolbar.buttons.remove:L.drawLocal.edit.toolbar.buttons.removeDisabled))}}),L.EditToolbar.Edit=L.Handler.extend({statics:{TYPE:"edit"},includes:L.Mixin.Events,initialize:function(map,options){if(L.Handler.prototype.initialize.call(this,map),this._selectedPathOptions=options.selectedPathOptions,this._featureGroup=options.featureGroup,!(this._featureGroup instanceof L.FeatureGroup))throw new Error("options.featureGroup must be a L.FeatureGroup");this._uneditedLayerProps={},this.type=L.EditToolbar.Edit.TYPE},enable:function(){!this._enabled&&this._hasAvailableLayers()&&(this.fire("enabled",{handler:this.type}),this._map.fire("draw:editstart",{handler:this.type}),L.Handler.prototype.enable.call(this),this._featureGroup.on("layeradd",this._enableLayerEdit,this).on("layerremove",this._disableLayerEdit,this))},disable:function(){this._enabled&&(this._featureGroup.off("layeradd",this._enableLayerEdit,this).off("layerremove",this._disableLayerEdit,this),L.Handler.prototype.disable.call(this),this._map.fire("draw:editstop",{handler:this.type}),this.fire("disabled",{handler:this.type}))},addHooks:function(){var map=this._map;map&&(map.getContainer().focus(),this._featureGroup.eachLayer(this._enableLayerEdit,this),this._tooltip=new L.Tooltip(this._map),this._tooltip.updateContent({text:L.drawLocal.edit.handlers.edit.tooltip.text,subtext:L.drawLocal.edit.handlers.edit.tooltip.subtext}),this._map.on("mousemove",this._onMouseMove,this))},removeHooks:function(){this._map&&(this._featureGroup.eachLayer(this._disableLayerEdit,this),this._uneditedLayerProps={},this._tooltip.dispose(),this._tooltip=null,this._map.off("mousemove",this._onMouseMove,this))},revertLayers:function(){this._featureGroup.eachLayer(function(layer){this._revertLayer(layer)},this)},save:function(){var editedLayers=new L.LayerGroup;this._featureGroup.eachLayer(function(layer){layer.edited&&(editedLayers.addLayer(layer),layer.edited=!1)}),this._map.fire("draw:edited",{layers:editedLayers})},_backupLayer:function(layer){var id=L.Util.stamp(layer);this._uneditedLayerProps[id]||(layer instanceof L.Polyline||layer instanceof L.Polygon||layer instanceof L.Rectangle?this._uneditedLayerProps[id]={latlngs:L.LatLngUtil.cloneLatLngs(layer.getLatLngs())}:layer instanceof L.Circle?this._uneditedLayerProps[id]={latlng:L.LatLngUtil.cloneLatLng(layer.getLatLng()),radius:layer.getRadius()}:layer instanceof L.Marker&&(this._uneditedLayerProps[id]={latlng:L.LatLngUtil.cloneLatLng(layer.getLatLng())}))},_revertLayer:function(layer){var id=L.Util.stamp(layer);layer.edited=!1,this._uneditedLayerProps.hasOwnProperty(id)&&(layer instanceof L.Polyline||layer instanceof L.Polygon||layer instanceof L.Rectangle?layer.setLatLngs(this._uneditedLayerProps[id].latlngs):layer instanceof L.Circle?(layer.setLatLng(this._uneditedLayerProps[id].latlng),layer.setRadius(this._uneditedLayerProps[id].radius)):layer instanceof L.Marker&&layer.setLatLng(this._uneditedLayerProps[id].latlng))},_toggleMarkerHighlight:function(marker){if(marker._icon){var icon=marker._icon;icon.style.display="none",L.DomUtil.hasClass(icon,"leaflet-edit-marker-selected")?(L.DomUtil.removeClass(icon,"leaflet-edit-marker-selected"),this._offsetMarker(icon,-4)):(L.DomUtil.addClass(icon,"leaflet-edit-marker-selected"),this._offsetMarker(icon,4)),icon.style.display=""}},_offsetMarker:function(icon,offset){var iconMarginTop=parseInt(icon.style.marginTop,10)-offset,iconMarginLeft=parseInt(icon.style.marginLeft,10)-offset;icon.style.marginTop=iconMarginTop+"px",icon.style.marginLeft=iconMarginLeft+"px"},_enableLayerEdit:function(e){var pathOptions,layer=e.layer||e.target||e,isMarker=layer instanceof L.Marker;isMarker&&!layer._icon||(this._backupLayer(layer),this._selectedPathOptions&&(pathOptions=L.Util.extend({},this._selectedPathOptions),isMarker?this._toggleMarkerHighlight(layer):(layer.options.previousOptions=L.Util.extend({dashArray:null},layer.options),layer instanceof L.Circle||layer instanceof L.Polygon||layer instanceof L.Rectangle||(pathOptions.fill=!1),layer.setStyle(pathOptions))),isMarker?(layer.dragging.enable(),layer.on("dragend",this._onMarkerDragEnd)):layer.editing.enable())},_disableLayerEdit:function(e){var layer=e.layer||e.target||e;layer.edited=!1,this._selectedPathOptions&&(layer instanceof L.Marker?this._toggleMarkerHighlight(layer):(layer.setStyle(layer.options.previousOptions),delete layer.options.previousOptions)),layer instanceof L.Marker?(layer.dragging.disable(),layer.off("dragend",this._onMarkerDragEnd,this)):layer.editing.disable()},_onMarkerDragEnd:function(e){var layer=e.target;layer.edited=!0},_onMouseMove:function(e){this._tooltip.updatePosition(e.latlng)},_hasAvailableLayers:function(){return 0!==this._featureGroup.getLayers().length}}),L.EditToolbar.Delete=L.Handler.extend({statics:{TYPE:"remove"},includes:L.Mixin.Events,initialize:function(map,options){if(L.Handler.prototype.initialize.call(this,map),L.Util.setOptions(this,options),this._deletableLayers=this.options.featureGroup,!(this._deletableLayers instanceof L.FeatureGroup))throw new Error("options.featureGroup must be a L.FeatureGroup");this.type=L.EditToolbar.Delete.TYPE},enable:function(){!this._enabled&&this._hasAvailableLayers()&&(this.fire("enabled",{handler:this.type}),this._map.fire("draw:deletestart",{handler:this.type}),L.Handler.prototype.enable.call(this),this._deletableLayers.on("layeradd",this._enableLayerDelete,this).on("layerremove",this._disableLayerDelete,this))},disable:function(){this._enabled&&(this._deletableLayers.off("layeradd",this._enableLayerDelete,this).off("layerremove",this._disableLayerDelete,this),L.Handler.prototype.disable.call(this),this._map.fire("draw:deletestop",{handler:this.type}),this.fire("disabled",{handler:this.type}))},addHooks:function(){var map=this._map;map&&(map.getContainer().focus(),this._deletableLayers.eachLayer(this._enableLayerDelete,this),this._deletedLayers=new L.layerGroup,this._tooltip=new L.Tooltip(this._map),this._tooltip.updateContent({text:L.drawLocal.edit.handlers.remove.tooltip.text}),this._map.on("mousemove",this._onMouseMove,this))},removeHooks:function(){this._map&&(this._deletableLayers.eachLayer(this._disableLayerDelete,this),this._deletedLayers=null,this._tooltip.dispose(),this._tooltip=null,this._map.off("mousemove",this._onMouseMove,this))},revertLayers:function(){this._deletedLayers.eachLayer(function(layer){this._deletableLayers.addLayer(layer)},this)},save:function(){this._map.fire("draw:deleted",{layers:this._deletedLayers})},_enableLayerDelete:function(e){var layer=e.layer||e.target||e;layer.on("click",this._removeLayer,this)},_disableLayerDelete:function(e){var layer=e.layer||e.target||e;layer.off("click",this._removeLayer,this),this._deletedLayers.removeLayer(layer)},_removeLayer:function(e){var layer=e.layer||e.target||e;this._deletableLayers.removeLayer(layer),this._deletedLayers.addLayer(layer)},_onMouseMove:function(e){this._tooltip.updatePosition(e.latlng)},_hasAvailableLayers:function(){return 0!==this._deletableLayers.getLayers().length}})}(window,document),function(e,t){e.Mustache=t({})}(this,function(e){function r(e){return"function"==typeof e}function i(e){return e.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g,"\\$&")}function o(e,t){return s.call(e,t)}function a(e){return!o(u,e)}function l(e){return String(e).replace(/[&<>"'\/]/g,function(e){return f[e]})}function m(t,r){function m(){if(f&&!l)for(;u.length;)delete o[u.pop()];else u=[];f=!1,l=!1}function x(e){if("string"==typeof e&&(e=e.split(h,2)),!n(e)||2!==e.length)throw new Error("Invalid tags: "+e);w=new RegExp(i(e[0])+"\\s*"),E=new RegExp("\\s*"+i(e[1])),S=new RegExp("\\s*"+i("}"+e[1]))}if(!t)return[];var w,E,S,s=[],o=[],u=[],f=!1,l=!1;x(r||e.tags);for(var N,C,k,L,A,O,T=new b(t);!T.eos();){if(N=T.pos,k=T.scanUntil(w))for(var M=0,_=k.length;_>M;++M)L=k.charAt(M),a(L)?u.push(o.length):l=!0,o.push(["text",L,N,N+1]),N+=1,"\n"===L&&m();if(!T.scan(w))break;if(f=!0,C=T.scan(v)||"name",T.scan(c),"="===C?(k=T.scanUntil(p),T.scan(p),T.scanUntil(E)):"{"===C?(k=T.scanUntil(S),T.scan(d),T.scanUntil(E),C="&"):k=T.scanUntil(E),!T.scan(E))throw new Error("Unclosed tag at "+T.pos);if(A=[C,k,N,T.pos],o.push(A),"#"===C||"^"===C)s.push(A);else if("/"===C){if(O=s.pop(),!O)throw new Error('Unopened section "'+k+'" at '+N);if(O[1]!==k)throw new Error('Unclosed section "'+O[1]+'" at '+N)}else"name"===C||"{"===C||"&"===C?l=!0:"="===C&&x(k)}if(O=s.pop())throw new Error('Unclosed section "'+O[1]+'" at '+T.pos);return y(g(o))}function g(e){for(var n,r,t=[],i=0,s=e.length;s>i;++i)n=e[i],n&&("text"===n[0]&&r&&"text"===r[0]?(r[1]+=n[1],r[3]=n[3]):(t.push(n),r=n));return t}function y(e){for(var i,s,t=[],n=t,r=[],o=0,u=e.length;u>o;++o)switch(i=e[o],i[0]){case"#":case"^":n.push(i),r.push(i),n=i[4]=[];break;case"/":s=r.pop(),s[5]=i[2],n=r.length>0?r[r.length-1][4]:t;break;default:n.push(i)}return t}function b(e){this.string=e,this.tail=e,this.pos=0}function w(e,t){this.view=null==e?{}:e,this.cache={".":this.view},this.parent=t}function E(){this.cache={}}var t=Object.prototype.toString,n=Array.isArray||function(e){return"[object Array]"===t.call(e)},s=RegExp.prototype.test,u=/\S/,f={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"},c=/\s*/,h=/\s+/,p=/\s*=/,d=/\s*\}/,v=/#|\^|\/|>|\{|&|=|!/;b.prototype.eos=function(){return""===this.tail},b.prototype.scan=function(e){var t=this.tail.match(e);if(!t||0!==t.index)return"";var n=t[0];return this.tail=this.tail.substring(n.length),this.pos+=n.length,n},b.prototype.scanUntil=function(e){var n,t=this.tail.search(e);switch(t){case-1:n=this.tail,this.tail="";break;case 0:n="";break;default:n=this.tail.substring(0,t),this.tail=this.tail.substring(t)}return this.pos+=n.length,n},w.prototype.push=function(e){return new w(e,this)},w.prototype.lookup=function(e){var n,t=this.cache;if(e in t)n=t[e];else{for(var s,o,i=this;i;){if(e.indexOf(".")>0)for(n=i.view,s=e.split("."),o=0;null!=n&&o<s.length;)n=n[s[o++]];else n=i.view[e];if(null!=n)break;i=i.parent}t[e]=n}return r(n)&&(n=n.call(this.view)),n},E.prototype.clearCache=function(){this.cache={}},E.prototype.parse=function(e,t){var n=this.cache,r=n[e];return null==r&&(r=n[e]=m(e,t)),r},E.prototype.render=function(e,t,n){var r=this.parse(e),i=t instanceof w?t:new w(t);return this.renderTokens(r,i,n,e)},E.prototype.renderTokens=function(t,i,s,o){function f(e){return a.render(e,i,s)}for(var l,c,u="",a=this,h=0,p=t.length;p>h;++h)switch(l=t[h],l[0]){case"#":if(c=i.lookup(l[1]),!c)continue;if(n(c))for(var d=0,v=c.length;v>d;++d)u+=this.renderTokens(l[4],i.push(c[d]),s,o);else if("object"==typeof c||"string"==typeof c)u+=this.renderTokens(l[4],i.push(c),s,o);else if(r(c)){if("string"!=typeof o)throw new Error("Cannot use higher-order sections without the original template");c=c.call(i.view,o.slice(l[3],l[5]),f),null!=c&&(u+=c)}else u+=this.renderTokens(l[4],i,s,o);break;case"^":c=i.lookup(l[1]),(!c||n(c)&&0===c.length)&&(u+=this.renderTokens(l[4],i,s,o));break;case">":if(!s)continue;c=r(s)?s(l[1]):s[l[1]],null!=c&&(u+=this.renderTokens(this.parse(c),i,s,c));break;case"&":c=i.lookup(l[1]),null!=c&&(u+=c);break;case"name":c=i.lookup(l[1]),null!=c&&(u+=e.escape(c));break;case"text":u+=l[1]}return u},e.name="mustache.js",e.version="0.8.1",e.tags=["{{","}}"];var S=new E;return e.clearCache=function(){return S.clearCache()},e.parse=function(e,t){return S.parse(e,t)},e.render=function(e,t,n){return S.render(e,t,n)},e.to_html=function(t,n,i,s){var o=e.render(t,n,i);return r(s)?void s(o):o},e.escape=l,e.Scanner=b,e.Context=w,e.Writer=E,e}),angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.position","ui.bootstrap.datepicker","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["template/accordion/accordion-group.html","template/accordion/accordion.html","template/alert/alert.html","template/carousel/carousel.html","template/carousel/slide.html","template/datepicker/datepicker.html","template/datepicker/day.html","template/datepicker/month.html","template/datepicker/popup.html","template/datepicker/year.html","template/modal/backdrop.html","template/modal/window.html","template/pagination/pager.html","template/pagination/pagination.html","template/tooltip/tooltip-html-popup.html","template/tooltip/tooltip-popup.html","template/tooltip/tooltip-template-popup.html","template/popover/popover-html.html","template/popover/popover-template.html","template/popover/popover.html","template/progressbar/bar.html","template/progressbar/progress.html","template/progressbar/progressbar.html","template/rating/rating.html","template/tabs/tab.html","template/tabs/tabset.html","template/timepicker/timepicker.html","template/typeahead/typeahead-match.html","template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$injector",function($animate,$injector){var $animateCss=$injector.has("$animateCss")?$injector.get("$animateCss"):null;return{link:function(scope,element,attrs){function expand(){element.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),$animateCss?$animateCss(element,{addClass:"in",easing:"ease",to:{height:element[0].scrollHeight+"px"}}).start()["finally"](expandDone):$animate.addClass(element,"in",{to:{height:element[0].scrollHeight+"px"}}).then(expandDone)}function expandDone(){element.removeClass("collapsing").addClass("collapse").css({height:"auto"})}function collapse(){return element.hasClass("collapse")||element.hasClass("in")?(element.css({height:element[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),void($animateCss?$animateCss(element,{removeClass:"in",to:{height:"0"}}).start()["finally"](collapseDone):$animate.removeClass(element,"in",{to:{height:"0"}}).then(collapseDone))):collapseDone()}function collapseDone(){element.css({height:"0"}),element.removeClass("collapsing").addClass("collapse")}scope.$watch(attrs.uibCollapse,function(shouldCollapse){shouldCollapse?collapse():expand()})}}}]),angular.module("ui.bootstrap.collapse").value("$collapseSuppressWarning",!1).directive("collapse",["$animate","$injector","$log","$collapseSuppressWarning",function($animate,$injector,$log,$collapseSuppressWarning){var $animateCss=$injector.has("$animateCss")?$injector.get("$animateCss"):null;return{link:function(scope,element,attrs){function expand(){element.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),$animateCss?$animateCss(element,{easing:"ease",to:{height:element[0].scrollHeight+"px"}}).start().done(expandDone):$animate.animate(element,{},{height:element[0].scrollHeight+"px"}).then(expandDone)}function expandDone(){element.removeClass("collapsing").addClass("collapse in").css({height:"auto"})}function collapse(){return element.hasClass("collapse")||element.hasClass("in")?(element.css({height:element[0].scrollHeight+"px"}).removeClass("collapse in").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),void($animateCss?$animateCss(element,{to:{height:"0"}}).start().done(collapseDone):$animate.animate(element,{},{height:"0"}).then(collapseDone))):collapseDone()}function collapseDone(){element.css({height:"0"}),element.removeClass("collapsing").addClass("collapse")}$collapseSuppressWarning||$log.warn("collapse is now deprecated. Use uib-collapse instead."),scope.$watch(attrs.collapse,function(shouldCollapse){shouldCollapse?collapse():expand()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function($scope,$attrs,accordionConfig){this.groups=[],this.closeOthers=function(openGroup){var closeOthers=angular.isDefined($attrs.closeOthers)?$scope.$eval($attrs.closeOthers):accordionConfig.closeOthers;closeOthers&&angular.forEach(this.groups,function(group){group!==openGroup&&(group.isOpen=!1)})},this.addGroup=function(groupScope){var that=this;this.groups.push(groupScope),groupScope.$on("$destroy",function(event){that.removeGroup(groupScope)})},this.removeGroup=function(group){var index=this.groups.indexOf(group);-1!==index&&this.groups.splice(index,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(element){this.heading=element}},link:function(scope,element,attrs,accordionCtrl){accordionCtrl.addGroup(scope),scope.openClass=attrs.openClass||"panel-open",scope.panelClass=attrs.panelClass,scope.$watch("isOpen",function(value){element.toggleClass(scope.openClass,!!value),value&&accordionCtrl.closeOthers(scope)}),scope.toggleOpen=function($event){scope.isDisabled||$event&&32!==$event.which||(scope.isOpen=!scope.isOpen)}}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(scope,element,attrs,accordionGroupCtrl,transclude){accordionGroupCtrl.setHeading(transclude(scope,angular.noop))}}}).directive("uibAccordionTransclude",function(){return{require:["?^uibAccordionGroup","?^accordionGroup"],link:function(scope,element,attrs,controller){controller=controller[0]?controller[0]:controller[1],scope.$watch(function(){return controller[attrs.uibAccordionTransclude]},function(heading){heading&&(element.find("span").html(""),element.find("span").append(heading));
})}}}),angular.module("ui.bootstrap.accordion").value("$accordionSuppressWarning",!1).controller("AccordionController",["$scope","$attrs","$controller","$log","$accordionSuppressWarning",function($scope,$attrs,$controller,$log,$accordionSuppressWarning){$accordionSuppressWarning||$log.warn("AccordionController is now deprecated. Use UibAccordionController instead."),angular.extend(this,$controller("UibAccordionController",{$scope:$scope,$attrs:$attrs}))}]).directive("accordion",["$log","$accordionSuppressWarning",function($log,$accordionSuppressWarning){return{restrict:"EA",controller:"AccordionController",controllerAs:"accordion",transclude:!0,replace:!1,templateUrl:function(element,attrs){return attrs.templateUrl||"template/accordion/accordion.html"},link:function(){$accordionSuppressWarning||$log.warn("accordion is now deprecated. Use uib-accordion instead.")}}}]).directive("accordionGroup",["$log","$accordionSuppressWarning",function($log,$accordionSuppressWarning){return{require:"^accordion",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/accordion/accordion-group.html"},scope:{heading:"@",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(element){this.heading=element}},link:function(scope,element,attrs,accordionCtrl){$accordionSuppressWarning||$log.warn("accordion-group is now deprecated. Use uib-accordion-group instead."),accordionCtrl.addGroup(scope),scope.openClass=attrs.openClass||"panel-open",scope.panelClass=attrs.panelClass,scope.$watch("isOpen",function(value){element.toggleClass(scope.openClass,!!value),value&&accordionCtrl.closeOthers(scope)}),scope.toggleOpen=function($event){scope.isDisabled||$event&&32!==$event.which||(scope.isOpen=!scope.isOpen)}}}}]).directive("accordionHeading",["$log","$accordionSuppressWarning",function($log,$accordionSuppressWarning){return{restrict:"EA",transclude:!0,template:"",replace:!0,require:"^accordionGroup",link:function(scope,element,attr,accordionGroupCtrl,transclude){$accordionSuppressWarning||$log.warn("accordion-heading is now deprecated. Use uib-accordion-heading instead."),accordionGroupCtrl.setHeading(transclude(scope,angular.noop))}}}]).directive("accordionTransclude",["$log","$accordionSuppressWarning",function($log,$accordionSuppressWarning){return{require:"^accordionGroup",link:function(scope,element,attr,controller){$accordionSuppressWarning||$log.warn("accordion-transclude is now deprecated. Use uib-accordion-transclude instead."),scope.$watch(function(){return controller[attr.accordionTransclude]},function(heading){heading&&(element.find("span").html(""),element.find("span").append(heading))})}}}]),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$attrs","$interpolate","$timeout",function($scope,$attrs,$interpolate,$timeout){$scope.closeable=!!$attrs.close;var dismissOnTimeout=angular.isDefined($attrs.dismissOnTimeout)?$interpolate($attrs.dismissOnTimeout)($scope.$parent):null;dismissOnTimeout&&$timeout(function(){$scope.close()},parseInt(dismissOnTimeout,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",templateUrl:function(element,attrs){return attrs.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.alert").value("$alertSuppressWarning",!1).controller("AlertController",["$scope","$attrs","$controller","$log","$alertSuppressWarning",function($scope,$attrs,$controller,$log,$alertSuppressWarning){$alertSuppressWarning||$log.warn("AlertController is now deprecated. Use UibAlertController instead."),angular.extend(this,$controller("UibAlertController",{$scope:$scope,$attrs:$attrs}))}]).directive("alert",["$log","$alertSuppressWarning",function($log,$alertSuppressWarning){return{controller:"AlertController",controllerAs:"alert",templateUrl:function(element,attrs){return attrs.templateUrl||"template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"},link:function(){$alertSuppressWarning||$log.warn("alert is now deprecated. Use uib-alert instead.")}}}]),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(buttonConfig){this.activeClass=buttonConfig.activeClass||"active",this.toggleEvent=buttonConfig.toggleEvent||"click"}]).directive("uibBtnRadio",function(){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(scope,element,attrs,ctrls){var buttonsCtrl=ctrls[0],ngModelCtrl=ctrls[1];element.find("input").css({display:"none"}),ngModelCtrl.$render=function(){element.toggleClass(buttonsCtrl.activeClass,angular.equals(ngModelCtrl.$modelValue,scope.$eval(attrs.uibBtnRadio)))},element.on(buttonsCtrl.toggleEvent,function(){if(!attrs.disabled){var isActive=element.hasClass(buttonsCtrl.activeClass);isActive&&!angular.isDefined(attrs.uncheckable)||scope.$apply(function(){ngModelCtrl.$setViewValue(isActive?null:scope.$eval(attrs.uibBtnRadio)),ngModelCtrl.$render()})}})}}}).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(scope,element,attrs,ctrls){function getTrueValue(){return getCheckboxValue(attrs.btnCheckboxTrue,!0)}function getFalseValue(){return getCheckboxValue(attrs.btnCheckboxFalse,!1)}function getCheckboxValue(attribute,defaultValue){return angular.isDefined(attribute)?scope.$eval(attribute):defaultValue}var buttonsCtrl=ctrls[0],ngModelCtrl=ctrls[1];element.find("input").css({display:"none"}),ngModelCtrl.$render=function(){element.toggleClass(buttonsCtrl.activeClass,angular.equals(ngModelCtrl.$modelValue,getTrueValue()))},element.on(buttonsCtrl.toggleEvent,function(){attrs.disabled||scope.$apply(function(){ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass)?getFalseValue():getTrueValue()),ngModelCtrl.$render()})})}}}),angular.module("ui.bootstrap.buttons").value("$buttonsSuppressWarning",!1).controller("ButtonsController",["$controller","$log","$buttonsSuppressWarning",function($controller,$log,$buttonsSuppressWarning){$buttonsSuppressWarning||$log.warn("ButtonsController is now deprecated. Use UibButtonsController instead."),angular.extend(this,$controller("UibButtonsController"))}]).directive("btnRadio",["$log","$buttonsSuppressWarning",function($log,$buttonsSuppressWarning){return{require:["btnRadio","ngModel"],controller:"ButtonsController",controllerAs:"buttons",link:function(scope,element,attrs,ctrls){$buttonsSuppressWarning||$log.warn("btn-radio is now deprecated. Use uib-btn-radio instead.");var buttonsCtrl=ctrls[0],ngModelCtrl=ctrls[1];element.find("input").css({display:"none"}),ngModelCtrl.$render=function(){element.toggleClass(buttonsCtrl.activeClass,angular.equals(ngModelCtrl.$modelValue,scope.$eval(attrs.btnRadio)))},element.bind(buttonsCtrl.toggleEvent,function(){if(!attrs.disabled){var isActive=element.hasClass(buttonsCtrl.activeClass);isActive&&!angular.isDefined(attrs.uncheckable)||scope.$apply(function(){ngModelCtrl.$setViewValue(isActive?null:scope.$eval(attrs.btnRadio)),ngModelCtrl.$render()})}})}}}]).directive("btnCheckbox",["$document","$log","$buttonsSuppressWarning",function($document,$log,$buttonsSuppressWarning){return{require:["btnCheckbox","ngModel"],controller:"ButtonsController",controllerAs:"button",link:function(scope,element,attrs,ctrls){function getTrueValue(){return getCheckboxValue(attrs.btnCheckboxTrue,!0)}function getFalseValue(){return getCheckboxValue(attrs.btnCheckboxFalse,!1)}function getCheckboxValue(attributeValue,defaultValue){var val=scope.$eval(attributeValue);return angular.isDefined(val)?val:defaultValue}$buttonsSuppressWarning||$log.warn("btn-checkbox is now deprecated. Use uib-btn-checkbox instead.");var buttonsCtrl=ctrls[0],ngModelCtrl=ctrls[1];element.find("input").css({display:"none"}),ngModelCtrl.$render=function(){element.toggleClass(buttonsCtrl.activeClass,angular.equals(ngModelCtrl.$modelValue,getTrueValue()))},element.bind(buttonsCtrl.toggleEvent,function(){attrs.disabled||scope.$apply(function(){ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass)?getFalseValue():getTrueValue()),ngModelCtrl.$render()})}),element.on("keypress",function(e){attrs.disabled||32!==e.which||$document[0].activeElement!==element[0]||scope.$apply(function(){ngModelCtrl.$setViewValue(element.hasClass(buttonsCtrl.activeClass)?getFalseValue():getTrueValue()),ngModelCtrl.$render()})})}}}]),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$animate",function($scope,$element,$interval,$animate){function goNext(slide,index,direction){destroyed||(angular.extend(slide,{direction:direction,active:!0}),angular.extend(self.currentSlide||{},{direction:direction,active:!1}),$animate.enabled()&&!$scope.noTransition&&!$scope.$currentTransition&&slide.$element&&self.slides.length>1&&(slide.$element.data(SLIDE_DIRECTION,slide.direction),self.currentSlide&&self.currentSlide.$element&&self.currentSlide.$element.data(SLIDE_DIRECTION,slide.direction),$scope.$currentTransition=!0,NEW_ANIMATE?$animate.on("addClass",slide.$element,function(element,phase){"close"===phase&&($scope.$currentTransition=null,$animate.off("addClass",element))}):slide.$element.one("$animate:close",function(){$scope.$currentTransition=null})),self.currentSlide=slide,currentIndex=index,restartTimer())}function getSlideByIndex(index){if(angular.isUndefined(slides[index].index))return slides[index];var i;slides.length;for(i=0;i<slides.length;++i)if(slides[i].index==index)return slides[i]}function restartTimer(){resetTimer();var interval=+$scope.interval;!isNaN(interval)&&interval>0&&(currentInterval=$interval(timerFn,interval))}function resetTimer(){currentInterval&&($interval.cancel(currentInterval),currentInterval=null)}function timerFn(){var interval=+$scope.interval;isPlaying&&!isNaN(interval)&&interval>0&&slides.length?$scope.next():$scope.pause()}function resetTransition(slides){slides.length||($scope.$currentTransition=null)}var currentInterval,isPlaying,self=this,slides=self.slides=$scope.slides=[],NEW_ANIMATE=angular.version.minor>=4,NO_TRANSITION="uib-noTransition",SLIDE_DIRECTION="uib-slideDirection",currentIndex=-1;self.currentSlide=null;var destroyed=!1;self.select=$scope.select=function(nextSlide,direction){var nextIndex=$scope.indexOfSlide(nextSlide);void 0===direction&&(direction=nextIndex>self.getCurrentIndex()?"next":"prev"),nextSlide&&nextSlide!==self.currentSlide&&!$scope.$currentTransition&&goNext(nextSlide,nextIndex,direction)},$scope.$on("$destroy",function(){destroyed=!0}),self.getCurrentIndex=function(){return self.currentSlide&&angular.isDefined(self.currentSlide.index)?+self.currentSlide.index:currentIndex},$scope.indexOfSlide=function(slide){return angular.isDefined(slide.index)?+slide.index:slides.indexOf(slide)},$scope.next=function(){var newIndex=(self.getCurrentIndex()+1)%slides.length;return 0===newIndex&&$scope.noWrap()?void $scope.pause():self.select(getSlideByIndex(newIndex),"next")},$scope.prev=function(){var newIndex=self.getCurrentIndex()-1<0?slides.length-1:self.getCurrentIndex()-1;return $scope.noWrap()&&newIndex===slides.length-1?void $scope.pause():self.select(getSlideByIndex(newIndex),"prev")},$scope.isActive=function(slide){return self.currentSlide===slide},$scope.$watch("interval",restartTimer),$scope.$watchCollection("slides",resetTransition),$scope.$on("$destroy",resetTimer),$scope.play=function(){isPlaying||(isPlaying=!0,restartTimer())},$scope.pause=function(){$scope.noPause||(isPlaying=!1,resetTimer())},self.addSlide=function(slide,element){slide.$element=element,slides.push(slide),1===slides.length||slide.active?(self.select(slides[slides.length-1]),1===slides.length&&$scope.play()):slide.active=!1},self.removeSlide=function(slide){angular.isDefined(slide.index)&&slides.sort(function(a,b){return+a.index>+b.index});var index=slides.indexOf(slide);slides.splice(index,1),slides.length>0&&slide.active?index>=slides.length?self.select(slides[index-1]):self.select(slides[index]):currentIndex>index&&currentIndex--,0===slides.length&&(self.currentSlide=null)},$scope.$watch("noTransition",function(noTransition){$element.data(NO_TRANSITION,noTransition)})}]).directive("uibCarousel",[function(){return{transclude:!0,replace:!0,controller:"UibCarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(element,attrs){return attrs.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}]).directive("uibSlide",function(){return{require:"^uibCarousel",restrict:"EA",transclude:!0,replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(scope,element,attrs,carouselCtrl){carouselCtrl.addSlide(scope,element),scope.$on("$destroy",function(){carouselCtrl.removeSlide(scope)}),scope.$watch("active",function(active){active&&carouselCtrl.select(scope)})}}}).animation(".item",["$injector","$animate",function($injector,$animate){function removeClass(element,className,callback){element.removeClass(className),callback&&callback()}var NO_TRANSITION="uib-noTransition",SLIDE_DIRECTION="uib-slideDirection",$animateCss=null;return $injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss")),{beforeAddClass:function(element,className,done){if("active"==className&&element.parent()&&element.parent().parent()&&!element.parent().parent().data(NO_TRANSITION)){var stopped=!1,direction=element.data(SLIDE_DIRECTION),directionClass="next"==direction?"left":"right",removeClassFn=removeClass.bind(this,element,directionClass+" "+direction,done);return element.addClass(direction),$animateCss?$animateCss(element,{addClass:directionClass}).start().done(removeClassFn):$animate.addClass(element,directionClass).then(function(){stopped||removeClassFn(),done()}),function(){stopped=!0}}done()},beforeRemoveClass:function(element,className,done){if("active"===className&&element.parent()&&element.parent().parent()&&!element.parent().parent().data(NO_TRANSITION)){var stopped=!1,direction=element.data(SLIDE_DIRECTION),directionClass="next"==direction?"left":"right",removeClassFn=removeClass.bind(this,element,directionClass,done);return $animateCss?$animateCss(element,{addClass:directionClass}).start().done(removeClassFn):$animate.addClass(element,directionClass).then(function(){stopped||removeClassFn(),done()}),function(){stopped=!0}}done()}}}]),angular.module("ui.bootstrap.carousel").value("$carouselSuppressWarning",!1).controller("CarouselController",["$scope","$element","$controller","$log","$carouselSuppressWarning",function($scope,$element,$controller,$log,$carouselSuppressWarning){$carouselSuppressWarning||$log.warn("CarouselController is now deprecated. Use UibCarouselController instead."),angular.extend(this,$controller("UibCarouselController",{$scope:$scope,$element:$element}))}]).directive("carousel",["$log","$carouselSuppressWarning",function($log,$carouselSuppressWarning){return{transclude:!0,replace:!0,controller:"CarouselController",controllerAs:"carousel",require:"carousel",templateUrl:function(element,attrs){return attrs.templateUrl||"template/carousel/carousel.html"},scope:{interval:"=",noTransition:"=",noPause:"=",noWrap:"&"},link:function(){$carouselSuppressWarning||$log.warn("carousel is now deprecated. Use uib-carousel instead.")}}}]).directive("slide",["$log","$carouselSuppressWarning",function($log,$carouselSuppressWarning){return{require:"^carousel",transclude:!0,replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/carousel/slide.html"},scope:{active:"=?",actual:"=?",index:"=?"},link:function(scope,element,attrs,carouselCtrl){$carouselSuppressWarning||$log.warn("slide is now deprecated. Use uib-slide instead."),carouselCtrl.addSlide(scope,element),scope.$on("$destroy",function(){carouselCtrl.removeSlide(scope)}),scope.$watch("active",function(active){active&&carouselCtrl.select(scope)})}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","orderByFilter",function($log,$locale,orderByFilter){function createParser(format){var map=[],regex=format.split("");return angular.forEach(formatCodeToRegex,function(data,code){var index=format.indexOf(code);if(index>-1){format=format.split(""),regex[index]="("+data.regex+")",format[index]="$";for(var i=index+1,n=index+code.length;n>i;i++)regex[i]="",format[i]="$";format=format.join(""),map.push({index:index,apply:data.apply})}}),{regex:new RegExp("^"+regex.join("")+"$"),map:orderByFilter(map,"index")}}function isValid(year,month,date){return 1>date?!1:1===month&&date>28?29===date&&(year%4===0&&year%100!==0||year%400===0):3===month||5===month||8===month||10===month?31>date:!0}var localeId,formatCodeToRegex,SPECIAL_CHARACTERS_REGEXP=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){localeId=$locale.id,this.parsers={},formatCodeToRegex={yyyy:{regex:"\\d{4}",apply:function(value){this.year=+value}},yy:{regex:"\\d{2}",apply:function(value){this.year=+value+2e3}},y:{regex:"\\d{1,4}",apply:function(value){this.year=+value}},MMMM:{regex:$locale.DATETIME_FORMATS.MONTH.join("|"),apply:function(value){this.month=$locale.DATETIME_FORMATS.MONTH.indexOf(value)}},MMM:{regex:$locale.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(value){this.month=$locale.DATETIME_FORMATS.SHORTMONTH.indexOf(value)}},MM:{regex:"0[1-9]|1[0-2]",apply:function(value){this.month=value-1}},M:{regex:"[1-9]|1[0-2]",apply:function(value){this.month=value-1}},dd:{regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(value){this.date=+value}},d:{regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(value){this.date=+value}},EEEE:{regex:$locale.DATETIME_FORMATS.DAY.join("|")},EEE:{regex:$locale.DATETIME_FORMATS.SHORTDAY.join("|")},HH:{regex:"(?:0|1)[0-9]|2[0-3]",apply:function(value){this.hours=+value}},hh:{regex:"0[0-9]|1[0-2]",apply:function(value){this.hours=+value}},H:{regex:"1?[0-9]|2[0-3]",apply:function(value){this.hours=+value}},h:{regex:"[0-9]|1[0-2]",apply:function(value){this.hours=+value}},mm:{regex:"[0-5][0-9]",apply:function(value){this.minutes=+value}},m:{regex:"[0-9]|[1-5][0-9]",apply:function(value){this.minutes=+value}},sss:{regex:"[0-9][0-9][0-9]",apply:function(value){this.milliseconds=+value}},ss:{regex:"[0-5][0-9]",apply:function(value){this.seconds=+value}},s:{regex:"[0-9]|[1-5][0-9]",apply:function(value){this.seconds=+value}},a:{regex:$locale.DATETIME_FORMATS.AMPMS.join("|"),apply:function(value){12===this.hours&&(this.hours=0),"PM"===value&&(this.hours+=12)}}}},this.init(),this.parse=function(input,format,baseDate){if(!angular.isString(input)||!format)return input;format=$locale.DATETIME_FORMATS[format]||format,format=format.replace(SPECIAL_CHARACTERS_REGEXP,"\\$&"),$locale.id!==localeId&&this.init(),this.parsers[format]||(this.parsers[format]=createParser(format));var parser=this.parsers[format],regex=parser.regex,map=parser.map,results=input.match(regex);if(results&&results.length){var fields,dt;angular.isDate(baseDate)&&!isNaN(baseDate.getTime())?fields={year:baseDate.getFullYear(),month:baseDate.getMonth(),date:baseDate.getDate(),hours:baseDate.getHours(),minutes:baseDate.getMinutes(),seconds:baseDate.getSeconds(),milliseconds:baseDate.getMilliseconds()}:(baseDate&&$log.warn("dateparser:","baseDate is not a valid date"),fields={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var i=1,n=results.length;n>i;i++){var mapper=map[i-1];mapper.apply&&mapper.apply.call(fields,results[i])}return isValid(fields.year,fields.month,fields.date)&&(angular.isDate(baseDate)&&!isNaN(baseDate.getTime())?(dt=new Date(baseDate),dt.setFullYear(fields.year,fields.month,fields.date,fields.hours,fields.minutes,fields.seconds,fields.milliseconds||0)):dt=new Date(fields.year,fields.month,fields.date,fields.hours,fields.minutes,fields.seconds,fields.milliseconds||0)),dt}}}]),angular.module("ui.bootstrap.dateparser").value("$dateParserSuppressWarning",!1).service("dateParser",["$log","$dateParserSuppressWarning","uibDateParser",function($log,$dateParserSuppressWarning,uibDateParser){$dateParserSuppressWarning||$log.warn("dateParser is now deprecated. Use uibDateParser instead."),angular.extend(this,uibDateParser)}]),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function($document,$window){function getStyle(el,cssprop){return el.currentStyle?el.currentStyle[cssprop]:$window.getComputedStyle?$window.getComputedStyle(el)[cssprop]:el.style[cssprop]}function isStaticPositioned(element){return"static"===(getStyle(element,"position")||"static")}var parentOffsetEl=function(element){for(var docDomEl=$document[0],offsetParent=element.offsetParent||docDomEl;offsetParent&&offsetParent!==docDomEl&&isStaticPositioned(offsetParent);)offsetParent=offsetParent.offsetParent;return offsetParent||docDomEl};return{position:function(element){var elBCR=this.offset(element),offsetParentBCR={top:0,left:0},offsetParentEl=parentOffsetEl(element[0]);offsetParentEl!=$document[0]&&(offsetParentBCR=this.offset(angular.element(offsetParentEl)),offsetParentBCR.top+=offsetParentEl.clientTop-offsetParentEl.scrollTop,offsetParentBCR.left+=offsetParentEl.clientLeft-offsetParentEl.scrollLeft);var boundingClientRect=element[0].getBoundingClientRect();return{width:boundingClientRect.width||element.prop("offsetWidth"),height:boundingClientRect.height||element.prop("offsetHeight"),top:elBCR.top-offsetParentBCR.top,left:elBCR.left-offsetParentBCR.left}},offset:function(element){var boundingClientRect=element[0].getBoundingClientRect();return{width:boundingClientRect.width||element.prop("offsetWidth"),height:boundingClientRect.height||element.prop("offsetHeight"),top:boundingClientRect.top+($window.pageYOffset||$document[0].documentElement.scrollTop),left:boundingClientRect.left+($window.pageXOffset||$document[0].documentElement.scrollLeft)}},positionElements:function(hostEl,targetEl,positionStr,appendToBody){var hostElPos,targetElWidth,targetElHeight,targetElPos,positionStrParts=positionStr.split("-"),pos0=positionStrParts[0],pos1=positionStrParts[1]||"center";hostElPos=appendToBody?this.offset(hostEl):this.position(hostEl),targetElWidth=targetEl.prop("offsetWidth"),targetElHeight=targetEl.prop("offsetHeight");var shiftWidth={center:function(){return hostElPos.left+hostElPos.width/2-targetElWidth/2},left:function(){return hostElPos.left},right:function(){return hostElPos.left+hostElPos.width}},shiftHeight={center:function(){return hostElPos.top+hostElPos.height/2-targetElHeight/2},top:function(){return hostElPos.top},bottom:function(){return hostElPos.top+hostElPos.height}};switch(pos0){case"right":targetElPos={top:shiftHeight[pos1](),left:shiftWidth[pos0]()};break;case"left":targetElPos={top:shiftHeight[pos1](),left:hostElPos.left-targetElWidth};break;case"bottom":targetElPos={top:shiftHeight[pos0](),left:shiftWidth[pos1]()};break;default:targetElPos={top:hostElPos.top-targetElHeight,left:shiftWidth[pos1]()}}return targetElPos}}}]),angular.module("ui.bootstrap.position").value("$positionSuppressWarning",!1).service("$position",["$log","$positionSuppressWarning","$uibPosition",function($log,$positionSuppressWarning,$uibPosition){$positionSuppressWarning||$log.warn("$position is now deprecated. Use $uibPosition instead."),angular.extend(this,$uibPosition)}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.position"]).value("$datepickerSuppressError",!1).constant("uibDatepickerConfig",{formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",datepickerMode:"day",minMode:"day",maxMode:"year",showWeeks:!0,startingDay:0,yearRange:20,minDate:null,maxDate:null,shortcutPropagation:!1}).controller("UibDatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","uibDatepickerConfig","$datepickerSuppressError",function($scope,$attrs,$parse,$interpolate,$log,dateFilter,datepickerConfig,$datepickerSuppressError){var self=this,ngModelCtrl={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(key,index){self[key]=angular.isDefined($attrs[key])?6>index?$interpolate($attrs[key])($scope.$parent):$scope.$parent.$eval($attrs[key]):datepickerConfig[key]}),angular.forEach(["minDate","maxDate"],function(key){$attrs[key]?$scope.$parent.$watch($parse($attrs[key]),function(value){self[key]=value?new Date(value):null,self.refreshView()}):self[key]=datepickerConfig[key]?new Date(datepickerConfig[key]):null}),angular.forEach(["minMode","maxMode"],function(key){$attrs[key]?$scope.$parent.$watch($parse($attrs[key]),function(value){self[key]=angular.isDefined(value)?value:$attrs[key],$scope[key]=self[key],("minMode"==key&&self.modes.indexOf($scope.datepickerMode)<self.modes.indexOf(self[key])||"maxMode"==key&&self.modes.indexOf($scope.datepickerMode)>self.modes.indexOf(self[key]))&&($scope.datepickerMode=self[key])}):(self[key]=datepickerConfig[key]||null,$scope[key]=self[key])}),$scope.datepickerMode=$scope.datepickerMode||datepickerConfig.datepickerMode,$scope.uniqueId="datepicker-"+$scope.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined($attrs.initDate)?(this.activeDate=$scope.$parent.$eval($attrs.initDate)||new Date,$scope.$parent.$watch($attrs.initDate,function(initDate){initDate&&(ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue)||ngModelCtrl.$invalid)&&(self.activeDate=initDate,self.refreshView())})):this.activeDate=new Date,$scope.isActive=function(dateObject){return 0===self.compare(dateObject.date,self.activeDate)?($scope.activeDateId=dateObject.uid,!0):!1},this.init=function(ngModelCtrl_){ngModelCtrl=ngModelCtrl_,ngModelCtrl.$render=function(){self.render()}},this.render=function(){if(ngModelCtrl.$viewValue){var date=new Date(ngModelCtrl.$viewValue),isValid=!isNaN(date);isValid?this.activeDate=date:$datepickerSuppressError||$log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var date=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):null;ngModelCtrl.$setValidity("dateDisabled",!date||this.element&&!this.isDisabled(date))}},this.createDateObject=function(date,format){var model=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):null;return{date:date,label:dateFilter(date,format),selected:model&&0===this.compare(date,model),disabled:this.isDisabled(date),current:0===this.compare(date,new Date),customClass:this.customClass(date)}},this.isDisabled=function(date){return this.minDate&&this.compare(date,this.minDate)<0||this.maxDate&&this.compare(date,this.maxDate)>0||$attrs.dateDisabled&&$scope.dateDisabled({date:date,mode:$scope.datepickerMode})},this.customClass=function(date){return $scope.customClass({date:date,mode:$scope.datepickerMode})},this.split=function(arr,size){for(var arrays=[];arr.length>0;)arrays.push(arr.splice(0,size));return arrays},$scope.select=function(date){if($scope.datepickerMode===self.minMode){var dt=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):new Date(0,0,0,0,0,0,0);dt.setFullYear(date.getFullYear(),date.getMonth(),date.getDate()),ngModelCtrl.$setViewValue(dt),ngModelCtrl.$render()}else self.activeDate=date,$scope.datepickerMode=self.modes[self.modes.indexOf($scope.datepickerMode)-1]},$scope.move=function(direction){var year=self.activeDate.getFullYear()+direction*(self.step.years||0),month=self.activeDate.getMonth()+direction*(self.step.months||0);self.activeDate.setFullYear(year,month,1),self.refreshView()},$scope.toggleMode=function(direction){direction=direction||1,$scope.datepickerMode===self.maxMode&&1===direction||$scope.datepickerMode===self.minMode&&-1===direction||($scope.datepickerMode=self.modes[self.modes.indexOf($scope.datepickerMode)+direction])},$scope.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var focusElement=function(){self.element[0].focus()};$scope.$on("uib:datepicker.focus",focusElement),$scope.keydown=function(evt){var key=$scope.keys[evt.which];if(key&&!evt.shiftKey&&!evt.altKey)if(evt.preventDefault(),self.shortcutPropagation||evt.stopPropagation(),"enter"===key||"space"===key){if(self.isDisabled(self.activeDate))return;$scope.select(self.activeDate)}else!evt.ctrlKey||"up"!==key&&"down"!==key?(self.handleKeyDown(key,evt),self.refreshView()):$scope.toggleMode("up"===key?1:-1)}}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(scope,$element,dateFilter){function getDaysInMonth(year,month){return 1!==month||year%4!==0||year%100===0&&year%400!==0?DAYS_IN_MONTH[month]:29}function getISO8601WeekNumber(date){var checkDate=new Date(date);checkDate.setDate(checkDate.getDate()+4-(checkDate.getDay()||7));var time=checkDate.getTime();return checkDate.setMonth(0),checkDate.setDate(1),Math.floor(Math.round((time-checkDate)/864e5)/7)+1}var DAYS_IN_MONTH=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=$element,this.init=function(ctrl){angular.extend(ctrl,this),scope.showWeeks=ctrl.showWeeks,ctrl.refreshView()},this.getDates=function(startDate,n){for(var date,dates=new Array(n),current=new Date(startDate),i=0;n>i;)date=new Date(current),dates[i++]=date,current.setDate(current.getDate()+1);return dates},this._refreshView=function(){var year=this.activeDate.getFullYear(),month=this.activeDate.getMonth(),firstDayOfMonth=new Date(this.activeDate);firstDayOfMonth.setFullYear(year,month,1);var difference=this.startingDay-firstDayOfMonth.getDay(),numDisplayedFromPreviousMonth=difference>0?7-difference:-difference,firstDate=new Date(firstDayOfMonth);numDisplayedFromPreviousMonth>0&&firstDate.setDate(-numDisplayedFromPreviousMonth+1);for(var days=this.getDates(firstDate,42),i=0;42>i;i++)days[i]=angular.extend(this.createDateObject(days[i],this.formatDay),{secondary:days[i].getMonth()!==month,uid:scope.uniqueId+"-"+i});scope.labels=new Array(7);for(var j=0;7>j;j++)scope.labels[j]={abbr:dateFilter(days[j].date,this.formatDayHeader),full:dateFilter(days[j].date,"EEEE")};if(scope.title=dateFilter(this.activeDate,this.formatDayTitle),scope.rows=this.split(days,7),scope.showWeeks){scope.weekNumbers=[];for(var thursdayIndex=(11-this.startingDay)%7,numWeeks=scope.rows.length,curWeek=0;numWeeks>curWeek;curWeek++)scope.weekNumbers.push(getISO8601WeekNumber(scope.rows[curWeek][thursdayIndex].date))}},this.compare=function(date1,date2){return new Date(date1.getFullYear(),date1.getMonth(),date1.getDate())-new Date(date2.getFullYear(),date2.getMonth(),date2.getDate())},this.handleKeyDown=function(key,evt){var date=this.activeDate.getDate();if("left"===key)date-=1;else if("up"===key)date-=7;else if("right"===key)date+=1;else if("down"===key)date+=7;else if("pageup"===key||"pagedown"===key){var month=this.activeDate.getMonth()+("pageup"===key?-1:1);this.activeDate.setMonth(month,1),date=Math.min(getDaysInMonth(this.activeDate.getFullYear(),this.activeDate.getMonth()),date)}else"home"===key?date=1:"end"===key&&(date=getDaysInMonth(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(date)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(scope,$element,dateFilter){this.step={years:1},this.element=$element,this.init=function(ctrl){angular.extend(ctrl,this),ctrl.refreshView()},this._refreshView=function(){for(var date,months=new Array(12),year=this.activeDate.getFullYear(),i=0;12>i;i++)date=new Date(this.activeDate),date.setFullYear(year,i,1),
months[i]=angular.extend(this.createDateObject(date,this.formatMonth),{uid:scope.uniqueId+"-"+i});scope.title=dateFilter(this.activeDate,this.formatMonthTitle),scope.rows=this.split(months,3)},this.compare=function(date1,date2){return new Date(date1.getFullYear(),date1.getMonth())-new Date(date2.getFullYear(),date2.getMonth())},this.handleKeyDown=function(key,evt){var date=this.activeDate.getMonth();if("left"===key)date-=1;else if("up"===key)date-=3;else if("right"===key)date+=1;else if("down"===key)date+=3;else if("pageup"===key||"pagedown"===key){var year=this.activeDate.getFullYear()+("pageup"===key?-1:1);this.activeDate.setFullYear(year)}else"home"===key?date=0:"end"===key&&(date=11);this.activeDate.setMonth(date)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(scope,$element,dateFilter){function getStartingYear(year){return parseInt((year-1)/range,10)*range+1}var range;this.element=$element,this.yearpickerInit=function(){range=this.yearRange,this.step={years:range}},this._refreshView=function(){for(var date,years=new Array(range),i=0,start=getStartingYear(this.activeDate.getFullYear());range>i;i++)date=new Date(this.activeDate),date.setFullYear(start+i,0,1),years[i]=angular.extend(this.createDateObject(date,this.formatYear),{uid:scope.uniqueId+"-"+i});scope.title=[years[0].label,years[range-1].label].join(" - "),scope.rows=this.split(years,5)},this.compare=function(date1,date2){return date1.getFullYear()-date2.getFullYear()},this.handleKeyDown=function(key,evt){var date=this.activeDate.getFullYear();"left"===key?date-=1:"up"===key?date-=5:"right"===key?date+=1:"down"===key?date+=5:"pageup"===key||"pagedown"===key?date+=("pageup"===key?-1:1)*this.step.years:"home"===key?date=getStartingYear(this.activeDate.getFullYear()):"end"===key&&(date=getStartingYear(this.activeDate.getFullYear())+range-1),this.activeDate.setFullYear(date)}}]).directive("uibDatepicker",function(){return{replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["uibDatepicker","^ngModel"],controller:"UibDatepickerController",controllerAs:"datepicker",link:function(scope,element,attrs,ctrls){var datepickerCtrl=ctrls[0],ngModelCtrl=ctrls[1];datepickerCtrl.init(ngModelCtrl)}}}).directive("uibDaypicker",function(){return{replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/day.html"},require:["^?uibDatepicker","uibDaypicker","^?datepicker"],controller:"UibDaypickerController",link:function(scope,element,attrs,ctrls){var datepickerCtrl=ctrls[0]||ctrls[2],daypickerCtrl=ctrls[1];daypickerCtrl.init(datepickerCtrl)}}}).directive("uibMonthpicker",function(){return{replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/month.html"},require:["^?uibDatepicker","uibMonthpicker","^?datepicker"],controller:"UibMonthpickerController",link:function(scope,element,attrs,ctrls){var datepickerCtrl=ctrls[0]||ctrls[2],monthpickerCtrl=ctrls[1];monthpickerCtrl.init(datepickerCtrl)}}}).directive("uibYearpicker",function(){return{replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/year.html"},require:["^?uibDatepicker","uibYearpicker","^?datepicker"],controller:"UibYearpickerController",link:function(scope,element,attrs,ctrls){var ctrl=ctrls[0]||ctrls[2];angular.extend(ctrl,ctrls[1]),ctrl.yearpickerInit(),ctrl.refreshView()}}}).constant("uibDatepickerPopupConfig",{datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"template/datepicker/popup.html",datepickerTemplateUrl:"template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},currentText:"Today",clearText:"Clear",closeText:"Done",closeOnDateSelection:!0,appendToBody:!1,showButtonBar:!0,onOpenFocus:!0}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$parse","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout",function(scope,element,attrs,$compile,$parse,$document,$rootScope,$position,dateFilter,dateParser,datepickerPopupConfig,$timeout){function cameltoDash(string){return string.replace(/([A-Z])/g,function($1){return"-"+$1.toLowerCase()})}function parseDate(viewValue){angular.isNumber(viewValue)&&(viewValue=new Date(viewValue));{if(!viewValue)return null;if(angular.isDate(viewValue)&&!isNaN(viewValue))return viewValue;if(angular.isString(viewValue)){var date=dateParser.parse(viewValue,dateFormat,scope.date);return isNaN(date)?void 0:date}}}function validator(modelValue,viewValue){var value=modelValue||viewValue;if(!attrs.ngRequired&&!value)return!0;if(angular.isNumber(value)&&(value=new Date(value)),value){if(angular.isDate(value)&&!isNaN(value))return!0;if(angular.isString(value)){var date=dateParser.parse(value,dateFormat);return!isNaN(date)}return!1}return!0}function documentClickBind(event){var popup=$popup[0],dpContainsTarget=element[0].contains(event.target),popupContainsTarget=void 0!==popup.contains&&popup.contains(event.target);!scope.isOpen||dpContainsTarget||popupContainsTarget||scope.$apply(function(){scope.isOpen=!1})}function inputKeydownBind(evt){27===evt.which&&scope.isOpen?(evt.preventDefault(),evt.stopPropagation(),scope.$apply(function(){scope.isOpen=!1}),element[0].focus()):40!==evt.which||scope.isOpen||(evt.preventDefault(),evt.stopPropagation(),scope.$apply(function(){scope.isOpen=!0}))}var dateFormat,closeOnDateSelection,appendToBody,onOpenFocus,datepickerPopupTemplateUrl,datepickerTemplateUrl,popupEl,datepickerEl,ngModel,$popup,cache={},isHtml5DateInput=!1;scope.watchData={},this.init=function(_ngModel_){if(ngModel=_ngModel_,closeOnDateSelection=angular.isDefined(attrs.closeOnDateSelection)?scope.$parent.$eval(attrs.closeOnDateSelection):datepickerPopupConfig.closeOnDateSelection,appendToBody=angular.isDefined(attrs.datepickerAppendToBody)?scope.$parent.$eval(attrs.datepickerAppendToBody):datepickerPopupConfig.appendToBody,onOpenFocus=angular.isDefined(attrs.onOpenFocus)?scope.$parent.$eval(attrs.onOpenFocus):datepickerPopupConfig.onOpenFocus,datepickerPopupTemplateUrl=angular.isDefined(attrs.datepickerPopupTemplateUrl)?attrs.datepickerPopupTemplateUrl:datepickerPopupConfig.datepickerPopupTemplateUrl,datepickerTemplateUrl=angular.isDefined(attrs.datepickerTemplateUrl)?attrs.datepickerTemplateUrl:datepickerPopupConfig.datepickerTemplateUrl,scope.showButtonBar=angular.isDefined(attrs.showButtonBar)?scope.$parent.$eval(attrs.showButtonBar):datepickerPopupConfig.showButtonBar,datepickerPopupConfig.html5Types[attrs.type]?(dateFormat=datepickerPopupConfig.html5Types[attrs.type],isHtml5DateInput=!0):(dateFormat=attrs.datepickerPopup||attrs.uibDatepickerPopup||datepickerPopupConfig.datepickerPopup,attrs.$observe("uibDatepickerPopup",function(value,oldValue){var newDateFormat=value||datepickerPopupConfig.datepickerPopup;if(newDateFormat!==dateFormat&&(dateFormat=newDateFormat,ngModel.$modelValue=null,!dateFormat))throw new Error("uibDatepickerPopup must have a date format specified.")})),!dateFormat)throw new Error("uibDatepickerPopup must have a date format specified.");if(isHtml5DateInput&&attrs.datepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");if(popupEl=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),popupEl.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":datepickerPopupTemplateUrl}),datepickerEl=angular.element(popupEl.children()[0]),datepickerEl.attr("template-url",datepickerTemplateUrl),isHtml5DateInput&&"month"===attrs.type&&(datepickerEl.attr("datepicker-mode",'"month"'),datepickerEl.attr("min-mode","month")),attrs.datepickerOptions){var options=scope.$parent.$eval(attrs.datepickerOptions);options&&options.initDate&&(scope.initDate=options.initDate,datepickerEl.attr("init-date","initDate"),delete options.initDate),angular.forEach(options,function(value,option){datepickerEl.attr(cameltoDash(option),value)})}angular.forEach(["minMode","maxMode","minDate","maxDate","datepickerMode","initDate","shortcutPropagation"],function(key){if(attrs[key]){var getAttribute=$parse(attrs[key]);if(scope.$parent.$watch(getAttribute,function(value){scope.watchData[key]=value,"minDate"!==key&&"maxDate"!==key||(cache[key]=new Date(value))}),datepickerEl.attr(cameltoDash(key),"watchData."+key),"datepickerMode"===key){var setAttribute=getAttribute.assign;scope.$watch("watchData."+key,function(value,oldvalue){angular.isFunction(setAttribute)&&value!==oldvalue&&setAttribute(scope.$parent,value)})}}}),attrs.dateDisabled&&datepickerEl.attr("date-disabled","dateDisabled({ date: date, mode: mode })"),attrs.showWeeks&&datepickerEl.attr("show-weeks",attrs.showWeeks),attrs.customClass&&datepickerEl.attr("custom-class","customClass({ date: date, mode: mode })"),isHtml5DateInput?ngModel.$formatters.push(function(value){return scope.date=value,value}):(ngModel.$$parserName="date",ngModel.$validators.date=validator,ngModel.$parsers.unshift(parseDate),ngModel.$formatters.push(function(value){return scope.date=value,ngModel.$isEmpty(value)?value:dateFilter(value,dateFormat)})),ngModel.$viewChangeListeners.push(function(){scope.date=dateParser.parse(ngModel.$viewValue,dateFormat,scope.date)}),element.bind("keydown",inputKeydownBind),$popup=$compile(popupEl)(scope),popupEl.remove(),appendToBody?$document.find("body").append($popup):element.after($popup),scope.$on("$destroy",function(){scope.isOpen===!0&&($rootScope.$$phase||scope.$apply(function(){scope.isOpen=!1})),$popup.remove(),element.unbind("keydown",inputKeydownBind),$document.unbind("click",documentClickBind)})},scope.getText=function(key){return scope[key+"Text"]||datepickerPopupConfig[key+"Text"]},scope.isDisabled=function(date){return"today"===date&&(date=new Date),scope.watchData.minDate&&scope.compare(date,cache.minDate)<0||scope.watchData.maxDate&&scope.compare(date,cache.maxDate)>0},scope.compare=function(date1,date2){return new Date(date1.getFullYear(),date1.getMonth(),date1.getDate())-new Date(date2.getFullYear(),date2.getMonth(),date2.getDate())},scope.dateSelection=function(dt){angular.isDefined(dt)&&(scope.date=dt);var date=scope.date?dateFilter(scope.date,dateFormat):null;element.val(date),ngModel.$setViewValue(date),closeOnDateSelection&&(scope.isOpen=!1,element[0].focus())},scope.keydown=function(evt){27===evt.which&&(scope.isOpen=!1,element[0].focus())},scope.select=function(date){if("today"===date){var today=new Date;angular.isDate(scope.date)?(date=new Date(scope.date),date.setFullYear(today.getFullYear(),today.getMonth(),today.getDate())):date=new Date(today.setHours(0,0,0,0))}scope.dateSelection(date)},scope.close=function(){scope.isOpen=!1,element[0].focus()},scope.$watch("isOpen",function(value){value?(scope.position=appendToBody?$position.offset(element):$position.position(element),scope.position.top=scope.position.top+element.prop("offsetHeight"),$timeout(function(){onOpenFocus&&scope.$broadcast("uib:datepicker.focus"),$document.bind("click",documentClickBind)},0,!1)):$document.unbind("click",documentClickBind)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(scope,element,attrs,ctrls){var ngModel=ctrls[0],ctrl=ctrls[1];ctrl.init(ngModel)}}}).directive("uibDatepickerPopupWrap",function(){return{replace:!0,transclude:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/popup.html"}}}),angular.module("ui.bootstrap.datepicker").value("$datepickerSuppressWarning",!1).controller("DatepickerController",["$scope","$attrs","$parse","$interpolate","$log","dateFilter","uibDatepickerConfig","$datepickerSuppressError","$datepickerSuppressWarning",function($scope,$attrs,$parse,$interpolate,$log,dateFilter,datepickerConfig,$datepickerSuppressError,$datepickerSuppressWarning){$datepickerSuppressWarning||$log.warn("DatepickerController is now deprecated. Use UibDatepickerController instead.");var self=this,ngModelCtrl={$setViewValue:angular.noop};this.modes=["day","month","year"],angular.forEach(["formatDay","formatMonth","formatYear","formatDayHeader","formatDayTitle","formatMonthTitle","showWeeks","startingDay","yearRange","shortcutPropagation"],function(key,index){self[key]=angular.isDefined($attrs[key])?6>index?$interpolate($attrs[key])($scope.$parent):$scope.$parent.$eval($attrs[key]):datepickerConfig[key]}),angular.forEach(["minDate","maxDate"],function(key){$attrs[key]?$scope.$parent.$watch($parse($attrs[key]),function(value){self[key]=value?new Date(value):null,self.refreshView()}):self[key]=datepickerConfig[key]?new Date(datepickerConfig[key]):null}),angular.forEach(["minMode","maxMode"],function(key){$attrs[key]?$scope.$parent.$watch($parse($attrs[key]),function(value){self[key]=angular.isDefined(value)?value:$attrs[key],$scope[key]=self[key],("minMode"==key&&self.modes.indexOf($scope.datepickerMode)<self.modes.indexOf(self[key])||"maxMode"==key&&self.modes.indexOf($scope.datepickerMode)>self.modes.indexOf(self[key]))&&($scope.datepickerMode=self[key])}):(self[key]=datepickerConfig[key]||null,$scope[key]=self[key])}),$scope.datepickerMode=$scope.datepickerMode||datepickerConfig.datepickerMode,$scope.uniqueId="datepicker-"+$scope.$id+"-"+Math.floor(1e4*Math.random()),angular.isDefined($attrs.initDate)?(this.activeDate=$scope.$parent.$eval($attrs.initDate)||new Date,$scope.$parent.$watch($attrs.initDate,function(initDate){initDate&&(ngModelCtrl.$isEmpty(ngModelCtrl.$modelValue)||ngModelCtrl.$invalid)&&(self.activeDate=initDate,self.refreshView())})):this.activeDate=new Date,$scope.isActive=function(dateObject){return 0===self.compare(dateObject.date,self.activeDate)?($scope.activeDateId=dateObject.uid,!0):!1},this.init=function(ngModelCtrl_){ngModelCtrl=ngModelCtrl_,ngModelCtrl.$render=function(){self.render()}},this.render=function(){if(ngModelCtrl.$viewValue){var date=new Date(ngModelCtrl.$viewValue),isValid=!isNaN(date);isValid?this.activeDate=date:$datepickerSuppressError||$log.error('Datepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')}this.refreshView()},this.refreshView=function(){if(this.element){this._refreshView();var date=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):null;ngModelCtrl.$setValidity("dateDisabled",!date||this.element&&!this.isDisabled(date))}},this.createDateObject=function(date,format){var model=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):null;return{date:date,label:dateFilter(date,format),selected:model&&0===this.compare(date,model),disabled:this.isDisabled(date),current:0===this.compare(date,new Date),customClass:this.customClass(date)}},this.isDisabled=function(date){return this.minDate&&this.compare(date,this.minDate)<0||this.maxDate&&this.compare(date,this.maxDate)>0||$attrs.dateDisabled&&$scope.dateDisabled({date:date,mode:$scope.datepickerMode})},this.customClass=function(date){return $scope.customClass({date:date,mode:$scope.datepickerMode})},this.split=function(arr,size){for(var arrays=[];arr.length>0;)arrays.push(arr.splice(0,size));return arrays},this.fixTimeZone=function(date){var hours=date.getHours();date.setHours(23===hours?hours+2:0)},$scope.select=function(date){if($scope.datepickerMode===self.minMode){var dt=ngModelCtrl.$viewValue?new Date(ngModelCtrl.$viewValue):new Date(0,0,0,0,0,0,0);dt.setFullYear(date.getFullYear(),date.getMonth(),date.getDate()),ngModelCtrl.$setViewValue(dt),ngModelCtrl.$render()}else self.activeDate=date,$scope.datepickerMode=self.modes[self.modes.indexOf($scope.datepickerMode)-1]},$scope.move=function(direction){var year=self.activeDate.getFullYear()+direction*(self.step.years||0),month=self.activeDate.getMonth()+direction*(self.step.months||0);self.activeDate.setFullYear(year,month,1),self.refreshView()},$scope.toggleMode=function(direction){direction=direction||1,$scope.datepickerMode===self.maxMode&&1===direction||$scope.datepickerMode===self.minMode&&-1===direction||($scope.datepickerMode=self.modes[self.modes.indexOf($scope.datepickerMode)+direction])},$scope.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var focusElement=function(){self.element[0].focus()};$scope.$on("uib:datepicker.focus",focusElement),$scope.keydown=function(evt){var key=$scope.keys[evt.which];if(key&&!evt.shiftKey&&!evt.altKey)if(evt.preventDefault(),self.shortcutPropagation||evt.stopPropagation(),"enter"===key||"space"===key){if(self.isDisabled(self.activeDate))return;$scope.select(self.activeDate)}else!evt.ctrlKey||"up"!==key&&"down"!==key?(self.handleKeyDown(key,evt),self.refreshView()):$scope.toggleMode("up"===key?1:-1)}}]).directive("datepicker",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{replace:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/datepicker.html"},scope:{datepickerMode:"=?",dateDisabled:"&",customClass:"&",shortcutPropagation:"&?"},require:["datepicker","^ngModel"],controller:"DatepickerController",controllerAs:"datepicker",link:function(scope,element,attrs,ctrls){$datepickerSuppressWarning||$log.warn("datepicker is now deprecated. Use uib-datepicker instead.");var datepickerCtrl=ctrls[0],ngModelCtrl=ctrls[1];datepickerCtrl.init(ngModelCtrl)}}}]).directive("daypicker",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{replace:!0,templateUrl:"template/datepicker/day.html",require:["^datepicker","daypicker"],controller:"UibDaypickerController",link:function(scope,element,attrs,ctrls){$datepickerSuppressWarning||$log.warn("daypicker is now deprecated. Use uib-daypicker instead.");var datepickerCtrl=ctrls[0],daypickerCtrl=ctrls[1];daypickerCtrl.init(datepickerCtrl)}}}]).directive("monthpicker",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{replace:!0,templateUrl:"template/datepicker/month.html",require:["^datepicker","monthpicker"],controller:"UibMonthpickerController",link:function(scope,element,attrs,ctrls){$datepickerSuppressWarning||$log.warn("monthpicker is now deprecated. Use uib-monthpicker instead.");var datepickerCtrl=ctrls[0],monthpickerCtrl=ctrls[1];monthpickerCtrl.init(datepickerCtrl)}}}]).directive("yearpicker",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{replace:!0,templateUrl:"template/datepicker/year.html",require:["^datepicker","yearpicker"],controller:"UibYearpickerController",link:function(scope,element,attrs,ctrls){$datepickerSuppressWarning||$log.warn("yearpicker is now deprecated. Use uib-yearpicker instead.");var ctrl=ctrls[0];angular.extend(ctrl,ctrls[1]),ctrl.yearpickerInit(),ctrl.refreshView()}}}]).directive("datepickerPopup",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{require:["ngModel","datepickerPopup"],controller:"UibDatepickerPopupController",scope:{isOpen:"=?",currentText:"@",clearText:"@",closeText:"@",dateDisabled:"&",customClass:"&"},link:function(scope,element,attrs,ctrls){$datepickerSuppressWarning||$log.warn("datepicker-popup is now deprecated. Use uib-datepicker-popup instead.");var ngModel=ctrls[0],ctrl=ctrls[1];ctrl.init(ngModel)}}}]).directive("datepickerPopupWrap",["$log","$datepickerSuppressWarning",function($log,$datepickerSuppressWarning){return{replace:!0,transclude:!0,templateUrl:function(element,attrs){return attrs.templateUrl||"template/datepicker/popup.html"},link:function(){$datepickerSuppressWarning||$log.warn("datepicker-popup-wrap is now deprecated. Use uib-datepicker-popup-wrap instead.")}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function($document,$rootScope){var openScope=null;this.open=function(dropdownScope){openScope||($document.bind("click",closeDropdown),$document.bind("keydown",keybindFilter)),openScope&&openScope!==dropdownScope&&(openScope.isOpen=!1),openScope=dropdownScope},this.close=function(dropdownScope){openScope===dropdownScope&&(openScope=null,$document.unbind("click",closeDropdown),$document.unbind("keydown",keybindFilter))};var closeDropdown=function(evt){if(openScope&&(!evt||"disabled"!==openScope.getAutoClose())){var toggleElement=openScope.getToggleElement();if(!(evt&&toggleElement&&toggleElement[0].contains(evt.target))){var dropdownElement=openScope.getDropdownElement();evt&&"outsideClick"===openScope.getAutoClose()&&dropdownElement&&dropdownElement[0].contains(evt.target)||(openScope.isOpen=!1,$rootScope.$$phase||openScope.$apply())}}},keybindFilter=function(evt){27===evt.which?(openScope.focusToggleElement(),closeDropdown()):openScope.isKeynavEnabled()&&/(38|40)/.test(evt.which)&&openScope.isOpen&&(evt.preventDefault(),evt.stopPropagation(),openScope.focusDropdownEntry(evt.which))}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function($scope,$element,$attrs,$parse,dropdownConfig,uibDropdownService,$animate,$position,$document,$compile,$templateRequest){var templateScope,getIsOpen,self=this,scope=$scope.$new(),openClass=dropdownConfig.openClass,setIsOpen=angular.noop,toggleInvoker=$attrs.onToggle?$parse($attrs.onToggle):angular.noop,appendToBody=!1,keynavEnabled=!1;$element.addClass("dropdown"),this.init=function(){$attrs.isOpen&&(getIsOpen=$parse($attrs.isOpen),setIsOpen=getIsOpen.assign,$scope.$watch(getIsOpen,function(value){scope.isOpen=!!value})),appendToBody=angular.isDefined($attrs.dropdownAppendToBody),keynavEnabled=angular.isDefined($attrs.uibKeyboardNav),appendToBody&&self.dropdownMenu&&($document.find("body").append(self.dropdownMenu),$element.on("$destroy",function(){self.dropdownMenu.remove()}))},this.toggle=function(open){return scope.isOpen=arguments.length?!!open:!scope.isOpen},this.isOpen=function(){return scope.isOpen},scope.getToggleElement=function(){return self.toggleElement},scope.getAutoClose=function(){return $attrs.autoClose||"always"},scope.getElement=function(){return $element},scope.isKeynavEnabled=function(){return keynavEnabled},scope.focusDropdownEntry=function(keyCode){var elems=self.dropdownMenu?angular.element(self.dropdownMenu).find("a"):angular.element($element).find("ul").eq(0).find("a");switch(keyCode){case 40:angular.isNumber(self.selectedOption)?self.selectedOption=self.selectedOption===elems.length-1?self.selectedOption:self.selectedOption+1:self.selectedOption=0;break;case 38:angular.isNumber(self.selectedOption)?self.selectedOption=0===self.selectedOption?0:self.selectedOption-1:self.selectedOption=elems.length-1}elems[self.selectedOption].focus()},scope.getDropdownElement=function(){return self.dropdownMenu},scope.focusToggleElement=function(){self.toggleElement&&self.toggleElement[0].focus()},scope.$watch("isOpen",function(isOpen,wasOpen){if(appendToBody&&self.dropdownMenu){var pos=$position.positionElements($element,self.dropdownMenu,"bottom-left",!0),css={top:pos.top+"px",display:isOpen?"block":"none"},rightalign=self.dropdownMenu.hasClass("dropdown-menu-right");rightalign?(css.left="auto",css.right=window.innerWidth-(pos.left+$element.prop("offsetWidth"))+"px"):(css.left=pos.left+"px",css.right="auto"),self.dropdownMenu.css(css)}if($animate[isOpen?"addClass":"removeClass"]($element,openClass).then(function(){angular.isDefined(isOpen)&&isOpen!==wasOpen&&toggleInvoker($scope,{open:!!isOpen})}),isOpen)self.dropdownMenuTemplateUrl&&$templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent){templateScope=scope.$new(),$compile(tplContent.trim())(templateScope,function(dropdownElement){var newEl=dropdownElement;self.dropdownMenu.replaceWith(newEl),self.dropdownMenu=newEl})}),scope.focusToggleElement(),uibDropdownService.open(scope);else{if(self.dropdownMenuTemplateUrl){templateScope&&templateScope.$destroy();var newEl=angular.element('<ul class="dropdown-menu"></ul>');self.dropdownMenu.replaceWith(newEl),self.dropdownMenu=newEl}uibDropdownService.close(scope),self.selectedOption=null}angular.isFunction(setIsOpen)&&setIsOpen($scope,isOpen)}),$scope.$on("$locationChangeSuccess",function(){"disabled"!==scope.getAutoClose()&&(scope.isOpen=!1)});var offDestroy=$scope.$on("$destroy",function(){scope.$destroy()});scope.$on("$destroy",offDestroy)}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(scope,element,attrs,dropdownCtrl){dropdownCtrl.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"AC",require:"?^uibDropdown",link:function(scope,element,attrs,dropdownCtrl){if(dropdownCtrl&&!angular.isDefined(attrs.dropdownNested)){element.addClass("dropdown-menu");var tplUrl=attrs.templateUrl;tplUrl&&(dropdownCtrl.dropdownMenuTemplateUrl=tplUrl),dropdownCtrl.dropdownMenu||(dropdownCtrl.dropdownMenu=element)}}}}).directive("uibKeyboardNav",function(){return{restrict:"A",require:"?^uibDropdown",link:function(scope,element,attrs,dropdownCtrl){element.bind("keydown",function(e){if(-1!==[38,40].indexOf(e.which)){e.preventDefault(),e.stopPropagation();var elems=dropdownCtrl.dropdownMenu.find("a");switch(e.which){case 40:angular.isNumber(dropdownCtrl.selectedOption)?dropdownCtrl.selectedOption=dropdownCtrl.selectedOption===elems.length-1?dropdownCtrl.selectedOption:dropdownCtrl.selectedOption+1:dropdownCtrl.selectedOption=0;break;case 38:angular.isNumber(dropdownCtrl.selectedOption)?dropdownCtrl.selectedOption=0===dropdownCtrl.selectedOption?0:dropdownCtrl.selectedOption-1:dropdownCtrl.selectedOption=elems.length-1}elems[dropdownCtrl.selectedOption].focus()}})}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(scope,element,attrs,dropdownCtrl){if(dropdownCtrl){element.addClass("dropdown-toggle"),dropdownCtrl.toggleElement=element;var toggleDropdown=function(event){event.preventDefault(),element.hasClass("disabled")||attrs.disabled||scope.$apply(function(){dropdownCtrl.toggle()})};element.bind("click",toggleDropdown),element.attr({"aria-haspopup":!0,"aria-expanded":!1}),scope.$watch(dropdownCtrl.isOpen,function(isOpen){element.attr("aria-expanded",!!isOpen)}),scope.$on("$destroy",function(){element.unbind("click",toggleDropdown)})}}}}),angular.module("ui.bootstrap.dropdown").value("$dropdownSuppressWarning",!1).service("dropdownService",["$log","$dropdownSuppressWarning","uibDropdownService",function($log,$dropdownSuppressWarning,uibDropdownService){$dropdownSuppressWarning||$log.warn("dropdownService is now deprecated. Use uibDropdownService instead."),angular.extend(this,uibDropdownService)}]).controller("DropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest","$log","$dropdownSuppressWarning",function($scope,$element,$attrs,$parse,dropdownConfig,uibDropdownService,$animate,$position,$document,$compile,$templateRequest,$log,$dropdownSuppressWarning){$dropdownSuppressWarning||$log.warn("DropdownController is now deprecated. Use UibDropdownController instead.");var templateScope,getIsOpen,self=this,scope=$scope.$new(),openClass=dropdownConfig.openClass,setIsOpen=angular.noop,toggleInvoker=$attrs.onToggle?$parse($attrs.onToggle):angular.noop,appendToBody=!1,keynavEnabled=!1;$element.addClass("dropdown"),this.init=function(){$attrs.isOpen&&(getIsOpen=$parse($attrs.isOpen),setIsOpen=getIsOpen.assign,$scope.$watch(getIsOpen,function(value){scope.isOpen=!!value})),appendToBody=angular.isDefined($attrs.dropdownAppendToBody),keynavEnabled=angular.isDefined($attrs.uibKeyboardNav),appendToBody&&self.dropdownMenu&&($document.find("body").append(self.dropdownMenu),$element.on("$destroy",function(){self.dropdownMenu.remove()}))},this.toggle=function(open){return scope.isOpen=arguments.length?!!open:!scope.isOpen},this.isOpen=function(){return scope.isOpen},scope.getToggleElement=function(){return self.toggleElement},scope.getAutoClose=function(){return $attrs.autoClose||"always"},scope.getElement=function(){return $element},scope.isKeynavEnabled=function(){return keynavEnabled},scope.focusDropdownEntry=function(keyCode){var elems=self.dropdownMenu?angular.element(self.dropdownMenu).find("a"):angular.element($element).find("ul").eq(0).find("a");switch(keyCode){case 40:angular.isNumber(self.selectedOption)?self.selectedOption=self.selectedOption===elems.length-1?self.selectedOption:self.selectedOption+1:self.selectedOption=0;break;case 38:angular.isNumber(self.selectedOption)?self.selectedOption=0===self.selectedOption?0:self.selectedOption-1:self.selectedOption=elems.length-1}elems[self.selectedOption].focus()},scope.getDropdownElement=function(){return self.dropdownMenu},scope.focusToggleElement=function(){self.toggleElement&&self.toggleElement[0].focus()},scope.$watch("isOpen",function(isOpen,wasOpen){if(appendToBody&&self.dropdownMenu){var pos=$position.positionElements($element,self.dropdownMenu,"bottom-left",!0),css={top:pos.top+"px",display:isOpen?"block":"none"},rightalign=self.dropdownMenu.hasClass("dropdown-menu-right");rightalign?(css.left="auto",css.right=window.innerWidth-(pos.left+$element.prop("offsetWidth"))+"px"):(css.left=pos.left+"px",css.right="auto"),self.dropdownMenu.css(css)}if($animate[isOpen?"addClass":"removeClass"]($element,openClass).then(function(){angular.isDefined(isOpen)&&isOpen!==wasOpen&&toggleInvoker($scope,{open:!!isOpen})}),isOpen)self.dropdownMenuTemplateUrl&&$templateRequest(self.dropdownMenuTemplateUrl).then(function(tplContent){templateScope=scope.$new(),$compile(tplContent.trim())(templateScope,function(dropdownElement){var newEl=dropdownElement;self.dropdownMenu.replaceWith(newEl),self.dropdownMenu=newEl})}),scope.focusToggleElement(),uibDropdownService.open(scope);else{if(self.dropdownMenuTemplateUrl){templateScope&&templateScope.$destroy();var newEl=angular.element('<ul class="dropdown-menu"></ul>');self.dropdownMenu.replaceWith(newEl),self.dropdownMenu=newEl}uibDropdownService.close(scope),self.selectedOption=null}angular.isFunction(setIsOpen)&&setIsOpen($scope,isOpen)}),$scope.$on("$locationChangeSuccess",function(){"disabled"!==scope.getAutoClose()&&(scope.isOpen=!1)});var offDestroy=$scope.$on("$destroy",function(){scope.$destroy()});scope.$on("$destroy",offDestroy)}]).directive("dropdown",["$log","$dropdownSuppressWarning",function($log,$dropdownSuppressWarning){return{controller:"DropdownController",link:function(scope,element,attrs,dropdownCtrl){$dropdownSuppressWarning||$log.warn("dropdown is now deprecated. Use uib-dropdown instead."),dropdownCtrl.init()}}}]).directive("dropdownMenu",["$log","$dropdownSuppressWarning",function($log,$dropdownSuppressWarning){return{restrict:"AC",require:"?^dropdown",link:function(scope,element,attrs,dropdownCtrl){if(dropdownCtrl&&!angular.isDefined(attrs.dropdownNested)){$dropdownSuppressWarning||$log.warn("dropdown-menu is now deprecated. Use uib-dropdown-menu instead."),element.addClass("dropdown-menu");var tplUrl=attrs.templateUrl;tplUrl&&(dropdownCtrl.dropdownMenuTemplateUrl=tplUrl),dropdownCtrl.dropdownMenu||(dropdownCtrl.dropdownMenu=element)}}}}]).directive("keyboardNav",["$log","$dropdownSuppressWarning",function($log,$dropdownSuppressWarning){return{restrict:"A",require:"?^dropdown",link:function(scope,element,attrs,dropdownCtrl){$dropdownSuppressWarning||$log.warn("keyboard-nav is now deprecated. Use uib-keyboard-nav instead."),element.bind("keydown",function(e){if(-1!==[38,40].indexOf(e.which)){e.preventDefault(),e.stopPropagation();var elems=dropdownCtrl.dropdownMenu.find("a");switch(e.which){
case 40:angular.isNumber(dropdownCtrl.selectedOption)?dropdownCtrl.selectedOption=dropdownCtrl.selectedOption===elems.length-1?dropdownCtrl.selectedOption:dropdownCtrl.selectedOption+1:dropdownCtrl.selectedOption=0;break;case 38:angular.isNumber(dropdownCtrl.selectedOption)?dropdownCtrl.selectedOption=0===dropdownCtrl.selectedOption?0:dropdownCtrl.selectedOption-1:dropdownCtrl.selectedOption=elems.length-1}elems[dropdownCtrl.selectedOption].focus()}})}}}]).directive("dropdownToggle",["$log","$dropdownSuppressWarning",function($log,$dropdownSuppressWarning){return{require:"?^dropdown",link:function(scope,element,attrs,dropdownCtrl){if($dropdownSuppressWarning||$log.warn("dropdown-toggle is now deprecated. Use uib-dropdown-toggle instead."),dropdownCtrl){element.addClass("dropdown-toggle"),dropdownCtrl.toggleElement=element;var toggleDropdown=function(event){event.preventDefault(),element.hasClass("disabled")||attrs.disabled||scope.$apply(function(){dropdownCtrl.toggle()})};element.bind("click",toggleDropdown),element.attr({"aria-haspopup":!0,"aria-expanded":!1}),scope.$watch(dropdownCtrl.isOpen,function(isOpen){element.attr("aria-expanded",!!isOpen)}),scope.$on("$destroy",function(){element.unbind("click",toggleDropdown)})}}}}]),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var stack=[];return{add:function(key,value){stack.push({key:key,value:value})},get:function(key){for(var i=0;i<stack.length;i++)if(key==stack[i].key)return stack[i]},keys:function(){for(var keys=[],i=0;i<stack.length;i++)keys.push(stack[i].key);return keys},top:function(){return stack[stack.length-1]},remove:function(key){for(var idx=-1,i=0;i<stack.length;i++)if(key==stack[i].key){idx=i;break}return stack.splice(idx,1)[0]},removeTop:function(){return stack.splice(stack.length-1,1)[0]},length:function(){return stack.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap"]).factory("$$multiMap",function(){return{createNew:function(){var map={};return{entries:function(){return Object.keys(map).map(function(key){return{key:key,value:map[key]}})},get:function(key){return map[key]},hasKey:function(key){return!!map[key]},keys:function(){return Object.keys(map)},put:function(key,value){map[key]||(map[key]=[]),map[key].push(value)},remove:function(key,value){var values=map[key];if(values){var idx=values.indexOf(value);-1!==idx&&values.splice(idx,1),values.length||delete map[key]}}}}}}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function($animate,$injector,$modalStack){function linkFn(scope,element,attrs){element.addClass("modal-backdrop"),attrs.modalInClass&&($animateCss?$animateCss(element,{addClass:attrs.modalInClass}).start():$animate.addClass(element,attrs.modalInClass),scope.$on($modalStack.NOW_CLOSING_EVENT,function(e,setIsAsync){var done=setIsAsync();$animateCss?$animateCss(element,{removeClass:attrs.modalInClass}).start().then(done):$animate.removeClass(element,attrs.modalInClass).then(done)}))}var $animateCss=null;return $injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss")),{replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(tElement,tAttrs){return tElement.addClass(tAttrs.backdropClass),linkFn}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animate","$injector",function($modalStack,$q,$animate,$injector){var $animateCss=null;return $injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss")),{scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(tElement,tAttrs){return tAttrs.templateUrl||"template/modal/window.html"},link:function(scope,element,attrs){element.addClass(attrs.windowClass||""),element.addClass(attrs.windowTopClass||""),scope.size=attrs.size,scope.close=function(evt){var modal=$modalStack.getTop();modal&&modal.value.backdrop&&"static"!==modal.value.backdrop&&evt.target===evt.currentTarget&&(evt.preventDefault(),evt.stopPropagation(),$modalStack.dismiss(modal.key,"backdrop click"))},element.on("click",scope.close),scope.$isRendered=!0;var modalRenderDeferObj=$q.defer();attrs.$observe("modalRender",function(value){"true"==value&&modalRenderDeferObj.resolve()}),modalRenderDeferObj.promise.then(function(){var animationPromise=null;attrs.modalInClass&&(animationPromise=$animateCss?$animateCss(element,{addClass:attrs.modalInClass}).start():$animate.addClass(element,attrs.modalInClass),scope.$on($modalStack.NOW_CLOSING_EVENT,function(e,setIsAsync){var done=setIsAsync();$animateCss?$animateCss(element,{removeClass:attrs.modalInClass}).start().then(done):$animate.removeClass(element,attrs.modalInClass).then(done)})),$q.when(animationPromise).then(function(){var inputWithAutofocus=element[0].querySelector("[autofocus]");inputWithAutofocus?inputWithAutofocus.focus():element[0].focus()});var modal=$modalStack.getTop();modal&&$modalStack.modalRendered(modal.key)})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(tElement,tAttrs){tAttrs.modalAnimation&&tElement.addClass(tAttrs.uibModalAnimationClass)}}}).directive("uibModalTransclude",function(){return{link:function($scope,$element,$attrs,controller,$transclude){$transclude($scope.$parent,function(clone){$element.empty(),$element.append(clone)})}}}).factory("$uibModalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap",function($animate,$timeout,$document,$compile,$rootScope,$q,$injector,$$multiMap,$$stackedMap){function backdropIndex(){for(var topBackdropIndex=-1,opened=openedWindows.keys(),i=0;i<opened.length;i++)openedWindows.get(opened[i]).value.backdrop&&(topBackdropIndex=i);return topBackdropIndex}function removeModalWindow(modalInstance,elementToReceiveFocus){var body=$document.find("body").eq(0),modalWindow=openedWindows.get(modalInstance).value;openedWindows.remove(modalInstance),removeAfterAnimate(modalWindow.modalDomEl,modalWindow.modalScope,function(){var modalBodyClass=modalWindow.openedClass||OPENED_MODAL_CLASS;openedClasses.remove(modalBodyClass,modalInstance),body.toggleClass(modalBodyClass,openedClasses.hasKey(modalBodyClass)),toggleTopWindowClass(!0)}),checkRemoveBackdrop(),elementToReceiveFocus&&elementToReceiveFocus.focus?elementToReceiveFocus.focus():body.focus()}function toggleTopWindowClass(toggleSwitch){var modalWindow;openedWindows.length()>0&&(modalWindow=openedWindows.top().value,modalWindow.modalDomEl.toggleClass(modalWindow.windowTopClass||"",toggleSwitch))}function checkRemoveBackdrop(){if(backdropDomEl&&-1==backdropIndex()){var backdropScopeRef=backdropScope;removeAfterAnimate(backdropDomEl,backdropScope,function(){backdropScopeRef=null}),backdropDomEl=void 0,backdropScope=void 0}}function removeAfterAnimate(domEl,scope,done){function afterAnimating(){afterAnimating.done||(afterAnimating.done=!0,$animateCss?$animateCss(domEl,{event:"leave"}).start().then(function(){domEl.remove()}):$animate.leave(domEl),scope.$destroy(),done&&done())}var asyncDeferred,asyncPromise=null,setIsAsync=function(){return asyncDeferred||(asyncDeferred=$q.defer(),asyncPromise=asyncDeferred.promise),function(){asyncDeferred.resolve()}};return scope.$broadcast($modalStack.NOW_CLOSING_EVENT,setIsAsync),$q.when(asyncPromise).then(afterAnimating)}function broadcastClosing(modalWindow,resultOrReason,closing){return!modalWindow.value.modalScope.$broadcast("modal.closing",resultOrReason,closing).defaultPrevented}var $animateCss=null;$injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss"));var backdropDomEl,backdropScope,focusableElementList,OPENED_MODAL_CLASS="modal-open",openedWindows=$$stackedMap.createNew(),openedClasses=$$multiMap.createNew(),$modalStack={NOW_CLOSING_EVENT:"modal.stack.now-closing"},focusIndex=0,tababbleSelector="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return $rootScope.$watch(backdropIndex,function(newBackdropIndex){backdropScope&&(backdropScope.index=newBackdropIndex)}),$document.bind("keydown",function(evt){if(evt.isDefaultPrevented())return evt;var modal=openedWindows.top();if(modal&&modal.value.keyboard)switch(evt.which){case 27:evt.preventDefault(),$rootScope.$apply(function(){$modalStack.dismiss(modal.key,"escape key press")});break;case 9:$modalStack.loadFocusElementList(modal);var focusChanged=!1;evt.shiftKey?$modalStack.isFocusInFirstItem(evt)&&(focusChanged=$modalStack.focusLastFocusableElement()):$modalStack.isFocusInLastItem(evt)&&(focusChanged=$modalStack.focusFirstFocusableElement()),focusChanged&&(evt.preventDefault(),evt.stopPropagation())}}),$modalStack.open=function(modalInstance,modal){var modalOpener=$document[0].activeElement,modalBodyClass=modal.openedClass||OPENED_MODAL_CLASS;toggleTopWindowClass(!1),openedWindows.add(modalInstance,{deferred:modal.deferred,renderDeferred:modal.renderDeferred,modalScope:modal.scope,backdrop:modal.backdrop,keyboard:modal.keyboard,openedClass:modal.openedClass,windowTopClass:modal.windowTopClass}),openedClasses.put(modalBodyClass,modalInstance);var body=$document.find("body").eq(0),currBackdropIndex=backdropIndex();if(currBackdropIndex>=0&&!backdropDomEl){backdropScope=$rootScope.$new(!0),backdropScope.index=currBackdropIndex;var angularBackgroundDomEl=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>');angularBackgroundDomEl.attr("backdrop-class",modal.backdropClass),modal.animation&&angularBackgroundDomEl.attr("modal-animation","true"),backdropDomEl=$compile(angularBackgroundDomEl)(backdropScope),body.append(backdropDomEl)}var angularDomEl=angular.element('<div uib-modal-window="modal-window"></div>');angularDomEl.attr({"template-url":modal.windowTemplateUrl,"window-class":modal.windowClass,"window-top-class":modal.windowTopClass,size:modal.size,index:openedWindows.length()-1,animate:"animate"}).html(modal.content),modal.animation&&angularDomEl.attr("modal-animation","true");var modalDomEl=$compile(angularDomEl)(modal.scope);openedWindows.top().value.modalDomEl=modalDomEl,openedWindows.top().value.modalOpener=modalOpener,body.append(modalDomEl),body.addClass(modalBodyClass),$modalStack.clearFocusListCache()},$modalStack.close=function(modalInstance,result){var modalWindow=openedWindows.get(modalInstance);return modalWindow&&broadcastClosing(modalWindow,result,!0)?(modalWindow.value.modalScope.$$uibDestructionScheduled=!0,modalWindow.value.deferred.resolve(result),removeModalWindow(modalInstance,modalWindow.value.modalOpener),!0):!modalWindow},$modalStack.dismiss=function(modalInstance,reason){var modalWindow=openedWindows.get(modalInstance);return modalWindow&&broadcastClosing(modalWindow,reason,!1)?(modalWindow.value.modalScope.$$uibDestructionScheduled=!0,modalWindow.value.deferred.reject(reason),removeModalWindow(modalInstance,modalWindow.value.modalOpener),!0):!modalWindow},$modalStack.dismissAll=function(reason){for(var topModal=this.getTop();topModal&&this.dismiss(topModal.key,reason);)topModal=this.getTop()},$modalStack.getTop=function(){return openedWindows.top()},$modalStack.modalRendered=function(modalInstance){var modalWindow=openedWindows.get(modalInstance);modalWindow&&modalWindow.value.renderDeferred.resolve()},$modalStack.focusFirstFocusableElement=function(){return focusableElementList.length>0?(focusableElementList[0].focus(),!0):!1},$modalStack.focusLastFocusableElement=function(){return focusableElementList.length>0?(focusableElementList[focusableElementList.length-1].focus(),!0):!1},$modalStack.isFocusInFirstItem=function(evt){return focusableElementList.length>0?(evt.target||evt.srcElement)==focusableElementList[0]:!1},$modalStack.isFocusInLastItem=function(evt){return focusableElementList.length>0?(evt.target||evt.srcElement)==focusableElementList[focusableElementList.length-1]:!1},$modalStack.clearFocusListCache=function(){focusableElementList=[],focusIndex=0},$modalStack.loadFocusElementList=function(modalWindow){if((void 0===focusableElementList||!focusableElementList.length)&&modalWindow){var modalDomE1=modalWindow.value.modalDomEl;modalDomE1&&modalDomE1.length&&(focusableElementList=modalDomE1[0].querySelectorAll(tababbleSelector))}},$modalStack}]).provider("$uibModal",function(){var $modalProvider={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$injector","$rootScope","$q","$templateRequest","$controller","$uibModalStack","$modalSuppressWarning","$log",function($injector,$rootScope,$q,$templateRequest,$controller,$modalStack,$modalSuppressWarning,$log){function getTemplatePromise(options){return options.template?$q.when(options.template):$templateRequest(angular.isFunction(options.templateUrl)?options.templateUrl():options.templateUrl)}function getResolvePromises(resolves){var promisesArr=[];return angular.forEach(resolves,function(value){angular.isFunction(value)||angular.isArray(value)?promisesArr.push($q.when($injector.invoke(value))):angular.isString(value)?promisesArr.push($q.when($injector.get(value))):promisesArr.push($q.when(value))}),promisesArr}var $modal={},promiseChain=null;return $modal.getPromiseChain=function(){return promiseChain},$modal.open=function(modalOptions){function resolveWithTemplate(){return templateAndResolvePromise}var modalResultDeferred=$q.defer(),modalOpenedDeferred=$q.defer(),modalRenderDeferred=$q.defer(),modalInstance={result:modalResultDeferred.promise,opened:modalOpenedDeferred.promise,rendered:modalRenderDeferred.promise,close:function(result){return $modalStack.close(modalInstance,result)},dismiss:function(reason){return $modalStack.dismiss(modalInstance,reason)}};if(modalOptions=angular.extend({},$modalProvider.options,modalOptions),modalOptions.resolve=modalOptions.resolve||{},!modalOptions.template&&!modalOptions.templateUrl)throw new Error("One of template or templateUrl options is required.");var samePromise,templateAndResolvePromise=$q.all([getTemplatePromise(modalOptions)].concat(getResolvePromises(modalOptions.resolve)));return samePromise=promiseChain=$q.all([promiseChain]).then(resolveWithTemplate,resolveWithTemplate).then(function(tplAndVars){var modalScope=(modalOptions.scope||$rootScope).$new();modalScope.$close=modalInstance.close,modalScope.$dismiss=modalInstance.dismiss,modalScope.$on("$destroy",function(){modalScope.$$uibDestructionScheduled||modalScope.$dismiss("$uibUnscheduledDestruction")});var ctrlInstance,ctrlLocals={},resolveIter=1;modalOptions.controller&&(ctrlLocals.$scope=modalScope,ctrlLocals.$uibModalInstance=modalInstance,Object.defineProperty(ctrlLocals,"$modalInstance",{get:function(){return $modalSuppressWarning||$log.warn("$modalInstance is now deprecated. Use $uibModalInstance instead."),modalInstance}}),angular.forEach(modalOptions.resolve,function(value,key){ctrlLocals[key]=tplAndVars[resolveIter++]}),ctrlInstance=$controller(modalOptions.controller,ctrlLocals),modalOptions.controllerAs&&(modalOptions.bindToController&&angular.extend(ctrlInstance,modalScope),modalScope[modalOptions.controllerAs]=ctrlInstance)),$modalStack.open(modalInstance,{scope:modalScope,deferred:modalResultDeferred,renderDeferred:modalRenderDeferred,content:tplAndVars[0],animation:modalOptions.animation,backdrop:modalOptions.backdrop,keyboard:modalOptions.keyboard,backdropClass:modalOptions.backdropClass,windowTopClass:modalOptions.windowTopClass,windowClass:modalOptions.windowClass,windowTemplateUrl:modalOptions.windowTemplateUrl,size:modalOptions.size,openedClass:modalOptions.openedClass}),modalOpenedDeferred.resolve(!0)},function(reason){modalOpenedDeferred.reject(reason),modalResultDeferred.reject(reason)})["finally"](function(){promiseChain===samePromise&&(promiseChain=null)}),modalInstance},$modal}]};return $modalProvider}),angular.module("ui.bootstrap.modal").value("$modalSuppressWarning",!1).directive("modalBackdrop",["$animate","$injector","$modalStack","$log","$modalSuppressWarning",function($animate,$injector,$modalStack,$log,$modalSuppressWarning){function linkFn(scope,element,attrs){$modalSuppressWarning||$log.warn("modal-backdrop is now deprecated. Use uib-modal-backdrop instead."),element.addClass("modal-backdrop"),attrs.modalInClass&&($animateCss?$animateCss(element,{addClass:attrs.modalInClass}).start():$animate.addClass(element,attrs.modalInClass),scope.$on($modalStack.NOW_CLOSING_EVENT,function(e,setIsAsync){var done=setIsAsync();$animateCss?$animateCss(element,{removeClass:attrs.modalInClass}).start().then(done):$animate.removeClass(element,attrs.modalInClass).then(done)}))}var $animateCss=null;return $injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss")),{replace:!0,templateUrl:"template/modal/backdrop.html",compile:function(tElement,tAttrs){return tElement.addClass(tAttrs.backdropClass),linkFn}}}]).directive("modalWindow",["$modalStack","$q","$animate","$injector","$log","$modalSuppressWarning",function($modalStack,$q,$animate,$injector,$log,$modalSuppressWarning){var $animateCss=null;return $injector.has("$animateCss")&&($animateCss=$injector.get("$animateCss")),{scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(tElement,tAttrs){return tAttrs.templateUrl||"template/modal/window.html"},link:function(scope,element,attrs){$modalSuppressWarning||$log.warn("modal-window is now deprecated. Use uib-modal-window instead."),element.addClass(attrs.windowClass||""),element.addClass(attrs.windowTopClass||""),scope.size=attrs.size,scope.close=function(evt){var modal=$modalStack.getTop();modal&&modal.value.backdrop&&"static"!==modal.value.backdrop&&evt.target===evt.currentTarget&&(evt.preventDefault(),evt.stopPropagation(),$modalStack.dismiss(modal.key,"backdrop click"))},element.on("click",scope.close),scope.$isRendered=!0;var modalRenderDeferObj=$q.defer();attrs.$observe("modalRender",function(value){"true"==value&&modalRenderDeferObj.resolve()}),modalRenderDeferObj.promise.then(function(){var animationPromise=null;attrs.modalInClass&&(animationPromise=$animateCss?$animateCss(element,{addClass:attrs.modalInClass}).start():$animate.addClass(element,attrs.modalInClass),scope.$on($modalStack.NOW_CLOSING_EVENT,function(e,setIsAsync){var done=setIsAsync();$animateCss?$animateCss(element,{removeClass:attrs.modalInClass}).start().then(done):$animate.removeClass(element,attrs.modalInClass).then(done)})),$q.when(animationPromise).then(function(){var inputWithAutofocus=element[0].querySelector("[autofocus]");inputWithAutofocus?inputWithAutofocus.focus():element[0].focus()});var modal=$modalStack.getTop();modal&&$modalStack.modalRendered(modal.key)})}}}]).directive("modalAnimationClass",["$log","$modalSuppressWarning",function($log,$modalSuppressWarning){return{compile:function(tElement,tAttrs){$modalSuppressWarning||$log.warn("modal-animation-class is now deprecated. Use uib-modal-animation-class instead."),tAttrs.modalAnimation&&tElement.addClass(tAttrs.modalAnimationClass)}}}]).directive("modalTransclude",["$log","$modalSuppressWarning",function($log,$modalSuppressWarning){return{link:function($scope,$element,$attrs,controller,$transclude){$modalSuppressWarning||$log.warn("modal-transclude is now deprecated. Use uib-modal-transclude instead."),$transclude($scope.$parent,function(clone){$element.empty(),$element.append(clone)})}}}]).service("$modalStack",["$animate","$timeout","$document","$compile","$rootScope","$q","$injector","$$multiMap","$$stackedMap","$uibModalStack","$log","$modalSuppressWarning",function($animate,$timeout,$document,$compile,$rootScope,$q,$injector,$$multiMap,$$stackedMap,$uibModalStack,$log,$modalSuppressWarning){$modalSuppressWarning||$log.warn("$modalStack is now deprecated. Use $uibModalStack instead."),angular.extend(this,$uibModalStack)}]).provider("$modal",["$uibModalProvider",function($uibModalProvider){angular.extend(this,$uibModalProvider),this.$get=["$injector","$log","$modalSuppressWarning",function($injector,$log,$modalSuppressWarning){return $modalSuppressWarning||$log.warn("$modal is now deprecated. Use $uibModal instead."),$injector.invoke($uibModalProvider.$get)}]}]),angular.module("ui.bootstrap.pagination",[]).controller("UibPaginationController",["$scope","$attrs","$parse",function($scope,$attrs,$parse){var self=this,ngModelCtrl={$setViewValue:angular.noop},setNumPages=$attrs.numPages?$parse($attrs.numPages).assign:angular.noop;this.init=function(ngModelCtrl_,config){ngModelCtrl=ngModelCtrl_,this.config=config,ngModelCtrl.$render=function(){self.render()},$attrs.itemsPerPage?$scope.$parent.$watch($parse($attrs.itemsPerPage),function(value){self.itemsPerPage=parseInt(value,10),$scope.totalPages=self.calculateTotalPages()}):this.itemsPerPage=config.itemsPerPage,$scope.$watch("totalItems",function(){$scope.totalPages=self.calculateTotalPages()}),$scope.$watch("totalPages",function(value){setNumPages($scope.$parent,value),$scope.page>value?$scope.selectPage(value):ngModelCtrl.$render()})},this.calculateTotalPages=function(){var totalPages=this.itemsPerPage<1?1:Math.ceil($scope.totalItems/this.itemsPerPage);return Math.max(totalPages||0,1)},this.render=function(){$scope.page=parseInt(ngModelCtrl.$viewValue,10)||1},$scope.selectPage=function(page,evt){evt&&evt.preventDefault();var clickAllowed=!$scope.ngDisabled||!evt;clickAllowed&&$scope.page!==page&&page>0&&page<=$scope.totalPages&&(evt&&evt.target&&evt.target.blur(),ngModelCtrl.$setViewValue(page),ngModelCtrl.$render())},$scope.getText=function(key){return $scope[key+"Text"]||self.config[key+"Text"]},$scope.noPrevious=function(){return 1===$scope.page},$scope.noNext=function(){return $scope.page===$scope.totalPages}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0}).directive("uibPagination",["$parse","uibPaginationConfig",function($parse,paginationConfig){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(element,attrs){return attrs.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(scope,element,attrs,ctrls){function makePage(number,text,isActive){return{number:number,text:text,active:isActive}}function getPages(currentPage,totalPages){var pages=[],startPage=1,endPage=totalPages,isMaxSized=angular.isDefined(maxSize)&&totalPages>maxSize;isMaxSized&&(rotate?(startPage=Math.max(currentPage-Math.floor(maxSize/2),1),endPage=startPage+maxSize-1,endPage>totalPages&&(endPage=totalPages,startPage=endPage-maxSize+1)):(startPage=(Math.ceil(currentPage/maxSize)-1)*maxSize+1,endPage=Math.min(startPage+maxSize-1,totalPages)));for(var number=startPage;endPage>=number;number++){var page=makePage(number,number,number===currentPage);pages.push(page)}if(isMaxSized&&!rotate){if(startPage>1){var previousPageSet=makePage(startPage-1,"...",!1);pages.unshift(previousPageSet)}if(totalPages>endPage){var nextPageSet=makePage(endPage+1,"...",!1);pages.push(nextPageSet)}}return pages}var paginationCtrl=ctrls[0],ngModelCtrl=ctrls[1];if(ngModelCtrl){var maxSize=angular.isDefined(attrs.maxSize)?scope.$parent.$eval(attrs.maxSize):paginationConfig.maxSize,rotate=angular.isDefined(attrs.rotate)?scope.$parent.$eval(attrs.rotate):paginationConfig.rotate;scope.boundaryLinks=angular.isDefined(attrs.boundaryLinks)?scope.$parent.$eval(attrs.boundaryLinks):paginationConfig.boundaryLinks,scope.directionLinks=angular.isDefined(attrs.directionLinks)?scope.$parent.$eval(attrs.directionLinks):paginationConfig.directionLinks,paginationCtrl.init(ngModelCtrl,paginationConfig),attrs.maxSize&&scope.$parent.$watch($parse(attrs.maxSize),function(value){maxSize=parseInt(value,10),paginationCtrl.render()});var originalRender=paginationCtrl.render;paginationCtrl.render=function(){originalRender(),scope.page>0&&scope.page<=scope.totalPages&&(scope.pages=getPages(scope.page,scope.totalPages))}}}}}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(pagerConfig){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(element,attrs){return attrs.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(scope,element,attrs,ctrls){var paginationCtrl=ctrls[0],ngModelCtrl=ctrls[1];ngModelCtrl&&(scope.align=angular.isDefined(attrs.align)?scope.$parent.$eval(attrs.align):pagerConfig.align,paginationCtrl.init(ngModelCtrl,pagerConfig))}}}]),angular.module("ui.bootstrap.pagination").value("$paginationSuppressWarning",!1).controller("PaginationController",["$scope","$attrs","$parse","$log","$paginationSuppressWarning",function($scope,$attrs,$parse,$log,$paginationSuppressWarning){$paginationSuppressWarning||$log.warn("PaginationController is now deprecated. Use UibPaginationController instead.");var self=this,ngModelCtrl={$setViewValue:angular.noop},setNumPages=$attrs.numPages?$parse($attrs.numPages).assign:angular.noop;this.init=function(ngModelCtrl_,config){ngModelCtrl=ngModelCtrl_,this.config=config,ngModelCtrl.$render=function(){self.render()},$attrs.itemsPerPage?$scope.$parent.$watch($parse($attrs.itemsPerPage),function(value){self.itemsPerPage=parseInt(value,10),$scope.totalPages=self.calculateTotalPages()}):this.itemsPerPage=config.itemsPerPage,$scope.$watch("totalItems",function(){$scope.totalPages=self.calculateTotalPages()}),$scope.$watch("totalPages",function(value){setNumPages($scope.$parent,value),$scope.page>value?$scope.selectPage(value):ngModelCtrl.$render()})},this.calculateTotalPages=function(){var totalPages=this.itemsPerPage<1?1:Math.ceil($scope.totalItems/this.itemsPerPage);return Math.max(totalPages||0,1)},this.render=function(){$scope.page=parseInt(ngModelCtrl.$viewValue,10)||1},$scope.selectPage=function(page,evt){evt&&evt.preventDefault();var clickAllowed=!$scope.ngDisabled||!evt;clickAllowed&&$scope.page!==page&&page>0&&page<=$scope.totalPages&&(evt&&evt.target&&evt.target.blur(),ngModelCtrl.$setViewValue(page),ngModelCtrl.$render())},$scope.getText=function(key){return $scope[key+"Text"]||self.config[key+"Text"]},$scope.noPrevious=function(){return 1===$scope.page},$scope.noNext=function(){return $scope.page===$scope.totalPages}}]).directive("pagination",["$parse","uibPaginationConfig","$log","$paginationSuppressWarning",function($parse,paginationConfig,$log,$paginationSuppressWarning){return{restrict:"EA",scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["pagination","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(element,attrs){return attrs.templateUrl||"template/pagination/pagination.html"},replace:!0,link:function(scope,element,attrs,ctrls){function makePage(number,text,isActive){return{number:number,text:text,active:isActive}}function getPages(currentPage,totalPages){var pages=[],startPage=1,endPage=totalPages,isMaxSized=angular.isDefined(maxSize)&&totalPages>maxSize;isMaxSized&&(rotate?(startPage=Math.max(currentPage-Math.floor(maxSize/2),1),endPage=startPage+maxSize-1,endPage>totalPages&&(endPage=totalPages,startPage=endPage-maxSize+1)):(startPage=(Math.ceil(currentPage/maxSize)-1)*maxSize+1,endPage=Math.min(startPage+maxSize-1,totalPages)));for(var number=startPage;endPage>=number;number++){var page=makePage(number,number,number===currentPage);pages.push(page)}if(isMaxSized&&!rotate){if(startPage>1){var previousPageSet=makePage(startPage-1,"...",!1);pages.unshift(previousPageSet)}if(totalPages>endPage){var nextPageSet=makePage(endPage+1,"...",!1);pages.push(nextPageSet)}}return pages}$paginationSuppressWarning||$log.warn("pagination is now deprecated. Use uib-pagination instead.");var paginationCtrl=ctrls[0],ngModelCtrl=ctrls[1];if(ngModelCtrl){var maxSize=angular.isDefined(attrs.maxSize)?scope.$parent.$eval(attrs.maxSize):paginationConfig.maxSize,rotate=angular.isDefined(attrs.rotate)?scope.$parent.$eval(attrs.rotate):paginationConfig.rotate;scope.boundaryLinks=angular.isDefined(attrs.boundaryLinks)?scope.$parent.$eval(attrs.boundaryLinks):paginationConfig.boundaryLinks,scope.directionLinks=angular.isDefined(attrs.directionLinks)?scope.$parent.$eval(attrs.directionLinks):paginationConfig.directionLinks,paginationCtrl.init(ngModelCtrl,paginationConfig),attrs.maxSize&&scope.$parent.$watch($parse(attrs.maxSize),function(value){maxSize=parseInt(value,10),paginationCtrl.render()});var originalRender=paginationCtrl.render;paginationCtrl.render=function(){originalRender(),scope.page>0&&scope.page<=scope.totalPages&&(scope.pages=getPages(scope.page,scope.totalPages))}}}}}]).directive("pager",["uibPagerConfig","$log","$paginationSuppressWarning",function(pagerConfig,$log,$paginationSuppressWarning){return{restrict:"EA",scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["pager","?ngModel"],controller:"PaginationController",controllerAs:"pagination",templateUrl:function(element,attrs){return attrs.templateUrl||"template/pagination/pager.html"},replace:!0,link:function(scope,element,attrs,ctrls){$paginationSuppressWarning||$log.warn("pager is now deprecated. Use uib-pager instead.");var paginationCtrl=ctrls[0],ngModelCtrl=ctrls[1];ngModelCtrl&&(scope.align=angular.isDefined(attrs.align)?scope.$parent.$eval(attrs.align):pagerConfig.align,paginationCtrl.init(ngModelCtrl,pagerConfig))}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function snake_case(name){var regexp=/[A-Z]/g,separator="-";return name.replace(regexp,function(letter,pos){return(pos?separator:"")+letter.toLowerCase()})}var defaultOptions={placement:"top",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},triggerMap={mouseenter:"mouseleave",click:"click",focus:"blur",none:""},globalOptions={};this.options=function(value){angular.extend(globalOptions,value)},this.setTriggers=function(triggers){angular.extend(triggerMap,triggers)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function($window,$compile,$timeout,$document,$position,$interpolate,$rootScope,$parse,$$stackedMap){var openedTooltips=$$stackedMap.createNew();return $document.on("keypress",function(e){if(27===e.which){var last=openedTooltips.top();last&&(last.value.close(),openedTooltips.removeTop(),last=null)}}),function(ttType,prefix,defaultTriggerShow,options){function getTriggers(trigger){var show=(trigger||options.trigger||defaultTriggerShow).split(" "),hide=show.map(function(trigger){return triggerMap[trigger]||trigger});return{show:show,hide:hide}}options=angular.extend({},defaultOptions,globalOptions,options);var directiveName=snake_case(ttType),startSym=$interpolate.startSymbol(),endSym=$interpolate.endSymbol(),template="<div "+directiveName+'-popup title="'+startSym+"title"+endSym+'" '+(options.useContentExp?'content-exp="contentExp()" ':'content="'+startSym+"content"+endSym+'" ')+'placement="'+startSym+"placement"+endSym+'" popup-class="'+startSym+"popupClass"+endSym+'" animation="animation" is-open="isOpen"origin-scope="origScope" style="visibility: hidden; display: block; top: -9999px; left: -9999px;"></div>';return{compile:function(tElem,tAttrs){var tooltipLinker=$compile(template);return function(scope,element,attrs,tooltipCtrl){function toggleTooltipBind(){ttScope.isOpen?hideTooltipBind():showTooltipBind()}function showTooltipBind(){hasEnableExp&&!scope.$eval(attrs[prefix+"Enable"])||(cancelHide(),prepareTooltip(),ttScope.popupDelay?showTimeout||(showTimeout=$timeout(show,ttScope.popupDelay,!1)):show())}function hideTooltipBind(){cancelShow(),ttScope.popupCloseDelay?hideTimeout||(hideTimeout=$timeout(hide,ttScope.popupCloseDelay,!1)):hide()}function show(){return cancelShow(),cancelHide(),ttScope.content?(createTooltip(),
void ttScope.$evalAsync(function(){ttScope.isOpen=!0,assignIsOpen(!0),positionTooltip()})):angular.noop}function cancelShow(){showTimeout&&($timeout.cancel(showTimeout),showTimeout=null),positionTimeout&&($timeout.cancel(positionTimeout),positionTimeout=null)}function hide(){cancelShow(),cancelHide(),ttScope&&ttScope.$evalAsync(function(){ttScope.isOpen=!1,assignIsOpen(!1),ttScope.animation?transitionTimeout||(transitionTimeout=$timeout(removeTooltip,150,!1)):removeTooltip()})}function cancelHide(){hideTimeout&&($timeout.cancel(hideTimeout),hideTimeout=null),transitionTimeout&&($timeout.cancel(transitionTimeout),transitionTimeout=null)}function createTooltip(){tooltip||(tooltipLinkedScope=ttScope.$new(),tooltip=tooltipLinker(tooltipLinkedScope,function(tooltip){appendToBody?$document.find("body").append(tooltip):element.after(tooltip)}),prepObservers())}function removeTooltip(){unregisterObservers(),transitionTimeout=null,tooltip&&(tooltip.remove(),tooltip=null),tooltipLinkedScope&&(tooltipLinkedScope.$destroy(),tooltipLinkedScope=null)}function prepareTooltip(){ttScope.title=attrs[prefix+"Title"],contentParse?ttScope.content=contentParse(scope):ttScope.content=attrs[ttType],ttScope.popupClass=attrs[prefix+"Class"],ttScope.placement=angular.isDefined(attrs[prefix+"Placement"])?attrs[prefix+"Placement"]:options.placement;var delay=parseInt(attrs[prefix+"PopupDelay"],10),closeDelay=parseInt(attrs[prefix+"PopupCloseDelay"],10);ttScope.popupDelay=isNaN(delay)?options.popupDelay:delay,ttScope.popupCloseDelay=isNaN(closeDelay)?options.popupCloseDelay:closeDelay}function assignIsOpen(isOpen){isOpenParse&&angular.isFunction(isOpenParse.assign)&&isOpenParse.assign(scope,isOpen)}function prepObservers(){observers.length=0,contentParse?(observers.push(scope.$watch(contentParse,function(val){ttScope.content=val,!val&&ttScope.isOpen&&hide()})),observers.push(tooltipLinkedScope.$watch(function(){repositionScheduled||(repositionScheduled=!0,tooltipLinkedScope.$$postDigest(function(){repositionScheduled=!1,ttScope&&ttScope.isOpen&&positionTooltip()}))}))):observers.push(attrs.$observe(ttType,function(val){ttScope.content=val,!val&&ttScope.isOpen?hide():positionTooltip()})),observers.push(attrs.$observe(prefix+"Title",function(val){ttScope.title=val,ttScope.isOpen&&positionTooltip()})),observers.push(attrs.$observe(prefix+"Placement",function(val){ttScope.placement=val?val:options.placement,ttScope.isOpen&&positionTooltip()}))}function unregisterObservers(){observers.length&&(angular.forEach(observers,function(observer){observer()}),observers.length=0)}function prepTriggers(){var val=attrs[prefix+"Trigger"];unregisterTriggers(),triggers=getTriggers(val),"none"!==triggers.show&&triggers.show.forEach(function(trigger,idx){trigger===triggers.hide[idx]?element[0].addEventListener(trigger,toggleTooltipBind):trigger&&(element[0].addEventListener(trigger,showTooltipBind),triggers.hide[idx].split(" ").forEach(function(trigger){element[0].addEventListener(trigger,hideTooltipBind)})),element.on("keypress",function(e){27===e.which&&hideTooltipBind()})})}var tooltip,tooltipLinkedScope,transitionTimeout,showTimeout,hideTimeout,positionTimeout,appendToBody=angular.isDefined(options.appendToBody)?options.appendToBody:!1,triggers=getTriggers(void 0),hasEnableExp=angular.isDefined(attrs[prefix+"Enable"]),ttScope=scope.$new(!0),repositionScheduled=!1,isOpenParse=angular.isDefined(attrs[prefix+"IsOpen"])?$parse(attrs[prefix+"IsOpen"]):!1,contentParse=options.useContentExp?$parse(attrs[ttType]):!1,observers=[],positionTooltip=function(){tooltip&&tooltip.html()&&(positionTimeout||(positionTimeout=$timeout(function(){tooltip.css({top:0,left:0});var ttCss=$position.positionElements(element,tooltip,ttScope.placement,appendToBody);ttCss.top+="px",ttCss.left+="px",ttCss.visibility="visible",tooltip.css(ttCss),positionTimeout=null},0,!1)))};ttScope.origScope=scope,ttScope.isOpen=!1,openedTooltips.add(ttScope,{close:hide}),ttScope.contentExp=function(){return ttScope.content},attrs.$observe("disabled",function(val){val&&cancelShow(),val&&ttScope.isOpen&&hide()}),isOpenParse&&scope.$watch(isOpenParse,function(val){ttScope&&!val===ttScope.isOpen&&toggleTooltipBind()});var unregisterTriggers=function(){triggers.show.forEach(function(trigger){element.unbind(trigger,showTooltipBind)}),triggers.hide.forEach(function(trigger){trigger.split(" ").forEach(function(hideTrigger){element[0].removeEventListener(hideTrigger,hideTooltipBind)})})};prepTriggers();var animation=scope.$eval(attrs[prefix+"Animation"]);ttScope.animation=angular.isDefined(animation)?!!animation:options.animation;var appendToBodyVal=scope.$eval(attrs[prefix+"AppendToBody"]);appendToBody=angular.isDefined(appendToBodyVal)?appendToBodyVal:appendToBody,appendToBody&&scope.$on("$locationChangeSuccess",function(){ttScope.isOpen&&hide()}),scope.$on("$destroy",function(){cancelShow(),cancelHide(),unregisterTriggers(),removeTooltip(),openedTooltips.remove(ttScope),ttScope=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function($animate,$sce,$compile,$templateRequest){return{link:function(scope,elem,attrs){var currentScope,previousElement,currentElement,origScope=scope.$eval(attrs.tooltipTemplateTranscludeScope),changeCounter=0,cleanupLastIncludeContent=function(){previousElement&&(previousElement.remove(),previousElement=null),currentScope&&(currentScope.$destroy(),currentScope=null),currentElement&&($animate.leave(currentElement).then(function(){previousElement=null}),previousElement=currentElement,currentElement=null)};scope.$watch($sce.parseAsResourceUrl(attrs.uibTooltipTemplateTransclude),function(src){var thisChangeId=++changeCounter;src?($templateRequest(src,!0).then(function(response){if(thisChangeId===changeCounter){var newScope=origScope.$new(),template=response,clone=$compile(template)(newScope,function(clone){cleanupLastIncludeContent(),$animate.enter(clone,elem)});currentScope=newScope,currentElement=clone,currentScope.$emit("$includeContentLoaded",src)}},function(){thisChangeId===changeCounter&&(cleanupLastIncludeContent(),scope.$emit("$includeContentError",src))}),scope.$emit("$includeContentRequested",src)):cleanupLastIncludeContent()}),scope.$on("$destroy",cleanupLastIncludeContent)}}}]).directive("uibTooltipClasses",function(){return{restrict:"A",link:function(scope,element,attrs){scope.placement&&element.addClass(scope.placement),scope.popupClass&&element.addClass(scope.popupClass),scope.animation()&&element.addClass(attrs.tooltipAnimationClass)}}}).directive("uibTooltipPopup",function(){return{replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html",link:function(scope,element){element.addClass("tooltip")}}}).directive("uibTooltip",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html",link:function(scope,element){element.addClass("tooltip")}}}).directive("uibTooltipTemplate",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html",link:function(scope,element){element.addClass("tooltip")}}}).directive("uibTooltipHtml",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.tooltip").value("$tooltipSuppressWarning",!1).provider("$tooltip",["$uibTooltipProvider",function($uibTooltipProvider){angular.extend(this,$uibTooltipProvider),this.$get=["$log","$tooltipSuppressWarning","$injector",function($log,$tooltipSuppressWarning,$injector){return $tooltipSuppressWarning||$log.warn("$tooltip is now deprecated. Use $uibTooltip instead."),$injector.invoke($uibTooltipProvider.$get)}]}]).directive("tooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest","$log","$tooltipSuppressWarning",function($animate,$sce,$compile,$templateRequest,$log,$tooltipSuppressWarning){return{link:function(scope,elem,attrs){$tooltipSuppressWarning||$log.warn("tooltip-template-transclude is now deprecated. Use uib-tooltip-template-transclude instead.");var currentScope,previousElement,currentElement,origScope=scope.$eval(attrs.tooltipTemplateTranscludeScope),changeCounter=0,cleanupLastIncludeContent=function(){previousElement&&(previousElement.remove(),previousElement=null),currentScope&&(currentScope.$destroy(),currentScope=null),currentElement&&($animate.leave(currentElement).then(function(){previousElement=null}),previousElement=currentElement,currentElement=null)};scope.$watch($sce.parseAsResourceUrl(attrs.tooltipTemplateTransclude),function(src){var thisChangeId=++changeCounter;src?($templateRequest(src,!0).then(function(response){if(thisChangeId===changeCounter){var newScope=origScope.$new(),template=response,clone=$compile(template)(newScope,function(clone){cleanupLastIncludeContent(),$animate.enter(clone,elem)});currentScope=newScope,currentElement=clone,currentScope.$emit("$includeContentLoaded",src)}},function(){thisChangeId===changeCounter&&(cleanupLastIncludeContent(),scope.$emit("$includeContentError",src))}),scope.$emit("$includeContentRequested",src)):cleanupLastIncludeContent()}),scope.$on("$destroy",cleanupLastIncludeContent)}}}]).directive("tooltipClasses",["$log","$tooltipSuppressWarning",function($log,$tooltipSuppressWarning){return{restrict:"A",link:function(scope,element,attrs){$tooltipSuppressWarning||$log.warn("tooltip-classes is now deprecated. Use uib-tooltip-classes instead."),scope.placement&&element.addClass(scope.placement),scope.popupClass&&element.addClass(scope.popupClass),scope.animation()&&element.addClass(attrs.tooltipAnimationClass)}}}]).directive("tooltipPopup",["$log","$tooltipSuppressWarning",function($log,$tooltipSuppressWarning){return{replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-popup.html",link:function(scope,element){$tooltipSuppressWarning||$log.warn("tooltip-popup is now deprecated. Use uib-tooltip-popup instead."),element.addClass("tooltip")}}}]).directive("tooltip",["$tooltip",function($tooltip){return $tooltip("tooltip","tooltip","mouseenter")}]).directive("tooltipTemplatePopup",["$log","$tooltipSuppressWarning",function($log,$tooltipSuppressWarning){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/tooltip/tooltip-template-popup.html",link:function(scope,element){$tooltipSuppressWarning||$log.warn("tooltip-template-popup is now deprecated. Use uib-tooltip-template-popup instead."),element.addClass("tooltip")}}}]).directive("tooltipTemplate",["$tooltip",function($tooltip){return $tooltip("tooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("tooltipHtmlPopup",["$log","$tooltipSuppressWarning",function($log,$tooltipSuppressWarning){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/tooltip/tooltip-html-popup.html",link:function(scope,element){$tooltipSuppressWarning||$log.warn("tooltip-html-popup is now deprecated. Use uib-tooltip-html-popup instead."),element.addClass("tooltip")}}}]).directive("tooltipHtml",["$tooltip",function($tooltip){return $tooltip("tooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html",link:function(scope,element){element.addClass("popover")}}}).directive("uibPopoverTemplate",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html",link:function(scope,element){element.addClass("popover")}}}).directive("uibPopoverHtml",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html",link:function(scope,element){element.addClass("popover")}}}).directive("uibPopover",["$uibTooltip",function($uibTooltip){return $uibTooltip("uibPopover","popover","click")}]),angular.module("ui.bootstrap.popover").value("$popoverSuppressWarning",!1).directive("popoverTemplatePopup",["$log","$popoverSuppressWarning",function($log,$popoverSuppressWarning){return{replace:!0,scope:{title:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"template/popover/popover-template.html",link:function(scope,element){$popoverSuppressWarning||$log.warn("popover-template-popup is now deprecated. Use uib-popover-template-popup instead."),element.addClass("popover")}}}]).directive("popoverTemplate",["$tooltip",function($tooltip){return $tooltip("popoverTemplate","popover","click",{useContentExp:!0})}]).directive("popoverHtmlPopup",["$log","$popoverSuppressWarning",function($log,$popoverSuppressWarning){return{replace:!0,scope:{contentExp:"&",title:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover-html.html",link:function(scope,element){$popoverSuppressWarning||$log.warn("popover-html-popup is now deprecated. Use uib-popover-html-popup instead."),element.addClass("popover")}}}]).directive("popoverHtml",["$tooltip",function($tooltip){return $tooltip("popoverHtml","popover","click",{useContentExp:!0})}]).directive("popoverPopup",["$log","$popoverSuppressWarning",function($log,$popoverSuppressWarning){return{replace:!0,scope:{title:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"template/popover/popover.html",link:function(scope,element){$popoverSuppressWarning||$log.warn("popover-popup is now deprecated. Use uib-popover-popup instead."),element.addClass("popover")}}}]).directive("popover",["$tooltip",function($tooltip){return $tooltip("popover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function($scope,$attrs,progressConfig){var self=this,animate=angular.isDefined($attrs.animate)?$scope.$parent.$eval($attrs.animate):progressConfig.animate;this.bars=[],$scope.max=angular.isDefined($scope.max)?$scope.max:progressConfig.max,this.addBar=function(bar,element,attrs){animate||element.css({transition:"none"}),this.bars.push(bar),bar.max=$scope.max,bar.title=attrs&&angular.isDefined(attrs.title)?attrs.title:"progressbar",bar.$watch("value",function(value){bar.recalculatePercentage()}),bar.recalculatePercentage=function(){var totalPercentage=self.bars.reduce(function(total,bar){return bar.percent=+(100*bar.value/bar.max).toFixed(2),total+bar.percent},0);totalPercentage>100&&(bar.percent-=totalPercentage-100)},bar.$on("$destroy",function(){element=null,self.removeBar(bar)})},this.removeBar=function(bar){this.bars.splice(this.bars.indexOf(bar),1),this.bars.forEach(function(bar){bar.recalculatePercentage()})},$scope.$watch("max",function(max){self.bars.forEach(function(bar){bar.max=$scope.max,bar.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{max:"=?"},templateUrl:"template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(scope,element,attrs,progressCtrl){progressCtrl.addBar(scope,element,attrs)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(scope,element,attrs,progressCtrl){progressCtrl.addBar(scope,angular.element(element.children()[0]),{title:attrs.title})}}}),angular.module("ui.bootstrap.progressbar").value("$progressSuppressWarning",!1).controller("ProgressController",["$scope","$attrs","uibProgressConfig","$log","$progressSuppressWarning",function($scope,$attrs,progressConfig,$log,$progressSuppressWarning){$progressSuppressWarning||$log.warn("ProgressController is now deprecated. Use UibProgressController instead.");var self=this,animate=angular.isDefined($attrs.animate)?$scope.$parent.$eval($attrs.animate):progressConfig.animate;this.bars=[],$scope.max=angular.isDefined($scope.max)?$scope.max:progressConfig.max,this.addBar=function(bar,element,attrs){animate||element.css({transition:"none"}),this.bars.push(bar),bar.max=$scope.max,bar.title=attrs&&angular.isDefined(attrs.title)?attrs.title:"progressbar",bar.$watch("value",function(value){bar.recalculatePercentage()}),bar.recalculatePercentage=function(){bar.percent=+(100*bar.value/bar.max).toFixed(2);var totalPercentage=self.bars.reduce(function(total,bar){return total+bar.percent},0);totalPercentage>100&&(bar.percent-=totalPercentage-100)},bar.$on("$destroy",function(){element=null,self.removeBar(bar)})},this.removeBar=function(bar){this.bars.splice(this.bars.indexOf(bar),1)},$scope.$watch("max",function(max){self.bars.forEach(function(bar){bar.max=$scope.max,bar.recalculatePercentage()})})}]).directive("progress",["$log","$progressSuppressWarning",function($log,$progressSuppressWarning){return{replace:!0,transclude:!0,controller:"ProgressController",require:"progress",scope:{max:"=?",title:"@?"},templateUrl:"template/progressbar/progress.html",link:function(){$progressSuppressWarning||$log.warn("progress is now deprecated. Use uib-progress instead.")}}}]).directive("bar",["$log","$progressSuppressWarning",function($log,$progressSuppressWarning){return{replace:!0,transclude:!0,require:"^progress",scope:{value:"=",type:"@"},templateUrl:"template/progressbar/bar.html",link:function(scope,element,attrs,progressCtrl){$progressSuppressWarning||$log.warn("bar is now deprecated. Use uib-bar instead."),progressCtrl.addBar(scope,element)}}}]).directive("progressbar",["$log","$progressSuppressWarning",function($log,$progressSuppressWarning){return{replace:!0,transclude:!0,controller:"ProgressController",scope:{value:"=",max:"=?",type:"@"},templateUrl:"template/progressbar/progressbar.html",link:function(scope,element,attrs,progressCtrl){$progressSuppressWarning||$log.warn("progressbar is now deprecated. Use uib-progressbar instead."),progressCtrl.addBar(scope,angular.element(element.children()[0]),{title:attrs.title})}}}]),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function($scope,$attrs,ratingConfig){var ngModelCtrl={$setViewValue:angular.noop};this.init=function(ngModelCtrl_){ngModelCtrl=ngModelCtrl_,ngModelCtrl.$render=this.render,ngModelCtrl.$formatters.push(function(value){return angular.isNumber(value)&&value<<0!==value&&(value=Math.round(value)),value}),this.stateOn=angular.isDefined($attrs.stateOn)?$scope.$parent.$eval($attrs.stateOn):ratingConfig.stateOn,this.stateOff=angular.isDefined($attrs.stateOff)?$scope.$parent.$eval($attrs.stateOff):ratingConfig.stateOff;var tmpTitles=angular.isDefined($attrs.titles)?$scope.$parent.$eval($attrs.titles):ratingConfig.titles;this.titles=angular.isArray(tmpTitles)&&tmpTitles.length>0?tmpTitles:ratingConfig.titles;var ratingStates=angular.isDefined($attrs.ratingStates)?$scope.$parent.$eval($attrs.ratingStates):new Array(angular.isDefined($attrs.max)?$scope.$parent.$eval($attrs.max):ratingConfig.max);$scope.range=this.buildTemplateObjects(ratingStates)},this.buildTemplateObjects=function(states){for(var i=0,n=states.length;n>i;i++)states[i]=angular.extend({index:i},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(i)},states[i]);return states},this.getTitle=function(index){return index>=this.titles.length?index+1:this.titles[index]},$scope.rate=function(value){!$scope.readonly&&value>=0&&value<=$scope.range.length&&(ngModelCtrl.$setViewValue(ngModelCtrl.$viewValue===value?0:value),ngModelCtrl.$render())},$scope.enter=function(value){$scope.readonly||($scope.value=value),$scope.onHover({value:value})},$scope.reset=function(){$scope.value=ngModelCtrl.$viewValue,$scope.onLeave()},$scope.onKeydown=function(evt){/(37|38|39|40)/.test(evt.which)&&(evt.preventDefault(),evt.stopPropagation(),$scope.rate($scope.value+(38===evt.which||39===evt.which?1:-1)))},this.render=function(){$scope.value=ngModelCtrl.$viewValue}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(scope,element,attrs,ctrls){var ratingCtrl=ctrls[0],ngModelCtrl=ctrls[1];ratingCtrl.init(ngModelCtrl)}}}),angular.module("ui.bootstrap.rating").value("$ratingSuppressWarning",!1).controller("RatingController",["$scope","$attrs","$controller","$log","$ratingSuppressWarning",function($scope,$attrs,$controller,$log,$ratingSuppressWarning){$ratingSuppressWarning||$log.warn("RatingController is now deprecated. Use UibRatingController instead."),angular.extend(this,$controller("UibRatingController",{$scope:$scope,$attrs:$attrs}))}]).directive("rating",["$log","$ratingSuppressWarning",function($log,$ratingSuppressWarning){return{require:["rating","ngModel"],scope:{readonly:"=?",onHover:"&",onLeave:"&"},controller:"RatingController",templateUrl:"template/rating/rating.html",replace:!0,link:function(scope,element,attrs,ctrls){$ratingSuppressWarning||$log.warn("rating is now deprecated. Use uib-rating instead.");var ratingCtrl=ctrls[0],ngModelCtrl=ctrls[1];ratingCtrl.init(ngModelCtrl)}}}]),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function($scope){var ctrl=this,tabs=ctrl.tabs=$scope.tabs=[];ctrl.select=function(selectedTab){angular.forEach(tabs,function(tab){tab.active&&tab!==selectedTab&&(tab.active=!1,tab.onDeselect(),selectedTab.selectCalled=!1)}),selectedTab.active=!0,selectedTab.selectCalled||(selectedTab.onSelect(),selectedTab.selectCalled=!0)},ctrl.addTab=function(tab){tabs.push(tab),1===tabs.length&&tab.active!==!1?tab.active=!0:tab.active?ctrl.select(tab):tab.active=!1},ctrl.removeTab=function(tab){var index=tabs.indexOf(tab);if(tab.active&&tabs.length>1&&!destroyed){var newActiveIndex=index==tabs.length-1?index-1:index+1;ctrl.select(tabs[newActiveIndex])}tabs.splice(index,1)};var destroyed;$scope.$on("$destroy",function(){destroyed=!0})}]).directive("uibTabset",function(){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"UibTabsetController",templateUrl:"template/tabs/tabset.html",link:function(scope,element,attrs){scope.vertical=angular.isDefined(attrs.vertical)?scope.$parent.$eval(attrs.vertical):!1,scope.justified=angular.isDefined(attrs.justified)?scope.$parent.$eval(attrs.justified):!1}}}).directive("uibTab",["$parse",function($parse){return{require:"^uibTabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(scope,elm,attrs,tabsetCtrl,transclude){scope.$watch("active",function(active){active&&tabsetCtrl.select(scope)}),scope.disabled=!1,attrs.disable&&scope.$parent.$watch($parse(attrs.disable),function(value){scope.disabled=!!value}),scope.select=function(){scope.disabled||(scope.active=!0)},tabsetCtrl.addTab(scope),scope.$on("$destroy",function(){tabsetCtrl.removeTab(scope)}),scope.$transcludeFn=transclude}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:["?^uibTab","?^tab"],link:function(scope,elm){scope.$watch("headingElement",function(heading){heading&&(elm.html(""),elm.append(heading))})}}}).directive("uibTabContentTransclude",function(){function isTabHeading(node){return node.tagName&&(node.hasAttribute("tab-heading")||node.hasAttribute("data-tab-heading")||node.hasAttribute("x-tab-heading")||node.hasAttribute("uib-tab-heading")||node.hasAttribute("data-uib-tab-heading")||node.hasAttribute("x-uib-tab-heading")||"tab-heading"===node.tagName.toLowerCase()||"data-tab-heading"===node.tagName.toLowerCase()||"x-tab-heading"===node.tagName.toLowerCase()||"uib-tab-heading"===node.tagName.toLowerCase()||"data-uib-tab-heading"===node.tagName.toLowerCase()||"x-uib-tab-heading"===node.tagName.toLowerCase())}return{restrict:"A",require:["?^uibTabset","?^tabset"],link:function(scope,elm,attrs){var tab=scope.$eval(attrs.uibTabContentTransclude);tab.$transcludeFn(tab.$parent,function(contents){angular.forEach(contents,function(node){isTabHeading(node)?tab.headingElement=node:elm.append(node)})})}}}),angular.module("ui.bootstrap.tabs").value("$tabsSuppressWarning",!1).controller("TabsetController",["$scope","$controller","$log","$tabsSuppressWarning",function($scope,$controller,$log,$tabsSuppressWarning){$tabsSuppressWarning||$log.warn("TabsetController is now deprecated. Use UibTabsetController instead."),angular.extend(this,$controller("UibTabsetController",{$scope:$scope}))}]).directive("tabset",["$log","$tabsSuppressWarning",function($log,$tabsSuppressWarning){return{restrict:"EA",transclude:!0,replace:!0,scope:{type:"@"},controller:"TabsetController",templateUrl:"template/tabs/tabset.html",link:function(scope,element,attrs){$tabsSuppressWarning||$log.warn("tabset is now deprecated. Use uib-tabset instead."),scope.vertical=angular.isDefined(attrs.vertical)?scope.$parent.$eval(attrs.vertical):!1,scope.justified=angular.isDefined(attrs.justified)?scope.$parent.$eval(attrs.justified):!1}}}]).directive("tab",["$parse","$log","$tabsSuppressWarning",function($parse,$log,$tabsSuppressWarning){return{require:"^tabset",restrict:"EA",replace:!0,templateUrl:"template/tabs/tab.html",transclude:!0,scope:{active:"=?",heading:"@",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},link:function(scope,elm,attrs,tabsetCtrl,transclude){$tabsSuppressWarning||$log.warn("tab is now deprecated. Use uib-tab instead."),scope.$watch("active",function(active){active&&tabsetCtrl.select(scope)}),scope.disabled=!1,attrs.disable&&scope.$parent.$watch($parse(attrs.disable),function(value){scope.disabled=!!value}),scope.select=function(){scope.disabled||(scope.active=!0)},tabsetCtrl.addTab(scope),scope.$on("$destroy",function(){tabsetCtrl.removeTab(scope)}),scope.$transcludeFn=transclude}}}]).directive("tabHeadingTransclude",["$log","$tabsSuppressWarning",function($log,$tabsSuppressWarning){return{restrict:"A",require:"^tab",link:function(scope,elm){$tabsSuppressWarning||$log.warn("tab-heading-transclude is now deprecated. Use uib-tab-heading-transclude instead."),scope.$watch("headingElement",function(heading){heading&&(elm.html(""),elm.append(heading))})}}}]).directive("tabContentTransclude",["$log","$tabsSuppressWarning",function($log,$tabsSuppressWarning){function isTabHeading(node){return node.tagName&&(node.hasAttribute("tab-heading")||node.hasAttribute("data-tab-heading")||node.hasAttribute("x-tab-heading")||"tab-heading"===node.tagName.toLowerCase()||"data-tab-heading"===node.tagName.toLowerCase()||"x-tab-heading"===node.tagName.toLowerCase())}return{restrict:"A",require:"^tabset",link:function(scope,elm,attrs){$tabsSuppressWarning||$log.warn("tab-content-transclude is now deprecated. Use uib-tab-content-transclude instead.");var tab=scope.$eval(attrs.tabContentTransclude);tab.$transcludeFn(tab.$parent,function(contents){angular.forEach(contents,function(node){isTabHeading(node)?tab.headingElement=node:elm.append(node)})})}}}]),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,showMeridian:!0,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function($scope,$element,$attrs,$parse,$log,$locale,timepickerConfig){function getHoursFromTemplate(){var hours=parseInt($scope.hours,10),valid=$scope.showMeridian?hours>0&&13>hours:hours>=0&&24>hours;return valid?($scope.showMeridian&&(12===hours&&(hours=0),$scope.meridian===meridians[1]&&(hours+=12)),hours):void 0}function getMinutesFromTemplate(){var minutes=parseInt($scope.minutes,10);return minutes>=0&&60>minutes?minutes:void 0}function pad(value){return angular.isDefined(value)&&value.toString().length<2?"0"+value:value.toString()}function refresh(keyboardChange){makeValid(),ngModelCtrl.$setViewValue(new Date(selected)),updateTemplate(keyboardChange)}function makeValid(){ngModelCtrl.$setValidity("time",!0),$scope.invalidHours=!1,$scope.invalidMinutes=!1}function updateTemplate(keyboardChange){var hours=selected.getHours(),minutes=selected.getMinutes();$scope.showMeridian&&(hours=0===hours||12===hours?12:hours%12),$scope.hours="h"===keyboardChange?hours:pad(hours),"m"!==keyboardChange&&($scope.minutes=pad(minutes)),$scope.meridian=selected.getHours()<12?meridians[0]:meridians[1]}function addMinutes(date,minutes){var dt=new Date(date.getTime()+6e4*minutes),newDate=new Date(date);return newDate.setHours(dt.getHours(),dt.getMinutes()),newDate}function addMinutesToSelected(minutes){selected=addMinutes(selected,minutes),refresh()}var selected=new Date,ngModelCtrl={$setViewValue:angular.noop},meridians=angular.isDefined($attrs.meridians)?$scope.$parent.$eval($attrs.meridians):timepickerConfig.meridians||$locale.DATETIME_FORMATS.AMPMS;$scope.tabindex=angular.isDefined($attrs.tabindex)?$attrs.tabindex:0,$element.removeAttr("tabindex"),this.init=function(ngModelCtrl_,inputs){ngModelCtrl=ngModelCtrl_,ngModelCtrl.$render=this.render,ngModelCtrl.$formatters.unshift(function(modelValue){return modelValue?new Date(modelValue):null});var hoursInputEl=inputs.eq(0),minutesInputEl=inputs.eq(1),mousewheel=angular.isDefined($attrs.mousewheel)?$scope.$parent.$eval($attrs.mousewheel):timepickerConfig.mousewheel;mousewheel&&this.setupMousewheelEvents(hoursInputEl,minutesInputEl);var arrowkeys=angular.isDefined($attrs.arrowkeys)?$scope.$parent.$eval($attrs.arrowkeys):timepickerConfig.arrowkeys;arrowkeys&&this.setupArrowkeyEvents(hoursInputEl,minutesInputEl),$scope.readonlyInput=angular.isDefined($attrs.readonlyInput)?$scope.$parent.$eval($attrs.readonlyInput):timepickerConfig.readonlyInput,this.setupInputEvents(hoursInputEl,minutesInputEl)};var hourStep=timepickerConfig.hourStep;$attrs.hourStep&&$scope.$parent.$watch($parse($attrs.hourStep),function(value){hourStep=parseInt(value,10)});var minuteStep=timepickerConfig.minuteStep;$attrs.minuteStep&&$scope.$parent.$watch($parse($attrs.minuteStep),function(value){minuteStep=parseInt(value,10)});var min;$scope.$parent.$watch($parse($attrs.min),function(value){var dt=new Date(value);min=isNaN(dt)?void 0:dt});var max;$scope.$parent.$watch($parse($attrs.max),function(value){var dt=new Date(value);max=isNaN(dt)?void 0:dt}),$scope.noIncrementHours=function(){var incrementedSelected=addMinutes(selected,60*hourStep);return incrementedSelected>max||selected>incrementedSelected&&min>incrementedSelected},$scope.noDecrementHours=function(){var decrementedSelected=addMinutes(selected,60*-hourStep);
return min>decrementedSelected||decrementedSelected>selected&&decrementedSelected>max},$scope.noIncrementMinutes=function(){var incrementedSelected=addMinutes(selected,minuteStep);return incrementedSelected>max||selected>incrementedSelected&&min>incrementedSelected},$scope.noDecrementMinutes=function(){var decrementedSelected=addMinutes(selected,-minuteStep);return min>decrementedSelected||decrementedSelected>selected&&decrementedSelected>max},$scope.noToggleMeridian=function(){return selected.getHours()<13?addMinutes(selected,720)>max:addMinutes(selected,-720)<min},$scope.showMeridian=timepickerConfig.showMeridian,$attrs.showMeridian&&$scope.$parent.$watch($parse($attrs.showMeridian),function(value){if($scope.showMeridian=!!value,ngModelCtrl.$error.time){var hours=getHoursFromTemplate(),minutes=getMinutesFromTemplate();angular.isDefined(hours)&&angular.isDefined(minutes)&&(selected.setHours(hours),refresh())}else updateTemplate()}),this.setupMousewheelEvents=function(hoursInputEl,minutesInputEl){var isScrollingUp=function(e){e.originalEvent&&(e=e.originalEvent);var delta=e.wheelDelta?e.wheelDelta:-e.deltaY;return e.detail||delta>0};hoursInputEl.bind("mousewheel wheel",function(e){$scope.$apply(isScrollingUp(e)?$scope.incrementHours():$scope.decrementHours()),e.preventDefault()}),minutesInputEl.bind("mousewheel wheel",function(e){$scope.$apply(isScrollingUp(e)?$scope.incrementMinutes():$scope.decrementMinutes()),e.preventDefault()})},this.setupArrowkeyEvents=function(hoursInputEl,minutesInputEl){hoursInputEl.bind("keydown",function(e){38===e.which?(e.preventDefault(),$scope.incrementHours(),$scope.$apply()):40===e.which&&(e.preventDefault(),$scope.decrementHours(),$scope.$apply())}),minutesInputEl.bind("keydown",function(e){38===e.which?(e.preventDefault(),$scope.incrementMinutes(),$scope.$apply()):40===e.which&&(e.preventDefault(),$scope.decrementMinutes(),$scope.$apply())})},this.setupInputEvents=function(hoursInputEl,minutesInputEl){if($scope.readonlyInput)return $scope.updateHours=angular.noop,void($scope.updateMinutes=angular.noop);var invalidate=function(invalidHours,invalidMinutes){ngModelCtrl.$setViewValue(null),ngModelCtrl.$setValidity("time",!1),angular.isDefined(invalidHours)&&($scope.invalidHours=invalidHours),angular.isDefined(invalidMinutes)&&($scope.invalidMinutes=invalidMinutes)};$scope.updateHours=function(){var hours=getHoursFromTemplate(),minutes=getMinutesFromTemplate();angular.isDefined(hours)&&angular.isDefined(minutes)?(selected.setHours(hours),min>selected||selected>max?invalidate(!0):refresh("h")):invalidate(!0)},hoursInputEl.bind("blur",function(e){!$scope.invalidHours&&$scope.hours<10&&$scope.$apply(function(){$scope.hours=pad($scope.hours)})}),$scope.updateMinutes=function(){var minutes=getMinutesFromTemplate(),hours=getHoursFromTemplate();angular.isDefined(minutes)&&angular.isDefined(hours)?(selected.setMinutes(minutes),min>selected||selected>max?invalidate(void 0,!0):refresh("m")):invalidate(void 0,!0)},minutesInputEl.bind("blur",function(e){!$scope.invalidMinutes&&$scope.minutes<10&&$scope.$apply(function(){$scope.minutes=pad($scope.minutes)})})},this.render=function(){var date=ngModelCtrl.$viewValue;isNaN(date)?(ngModelCtrl.$setValidity("time",!1),$log.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(date&&(selected=date),min>selected||selected>max?(ngModelCtrl.$setValidity("time",!1),$scope.invalidHours=!0,$scope.invalidMinutes=!0):makeValid(),updateTemplate())},$scope.showSpinners=angular.isDefined($attrs.showSpinners)?$scope.$parent.$eval($attrs.showSpinners):timepickerConfig.showSpinners,$scope.incrementHours=function(){$scope.noIncrementHours()||addMinutesToSelected(60*hourStep)},$scope.decrementHours=function(){$scope.noDecrementHours()||addMinutesToSelected(60*-hourStep)},$scope.incrementMinutes=function(){$scope.noIncrementMinutes()||addMinutesToSelected(minuteStep)},$scope.decrementMinutes=function(){$scope.noDecrementMinutes()||addMinutesToSelected(-minuteStep)},$scope.toggleMeridian=function(){$scope.noToggleMeridian()||addMinutesToSelected(720*(selected.getHours()<12?1:-1))}}]).directive("uibTimepicker",function(){return{restrict:"EA",require:["uibTimepicker","?^ngModel"],controller:"UibTimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(element,attrs){return attrs.templateUrl||"template/timepicker/timepicker.html"},link:function(scope,element,attrs,ctrls){var timepickerCtrl=ctrls[0],ngModelCtrl=ctrls[1];ngModelCtrl&&timepickerCtrl.init(ngModelCtrl,element.find("input"))}}}),angular.module("ui.bootstrap.timepicker").value("$timepickerSuppressWarning",!1).controller("TimepickerController",["$scope","$element","$attrs","$controller","$log","$timepickerSuppressWarning",function($scope,$element,$attrs,$controller,$log,$timepickerSuppressWarning){$timepickerSuppressWarning||$log.warn("TimepickerController is now deprecated. Use UibTimepickerController instead."),angular.extend(this,$controller("UibTimepickerController",{$scope:$scope,$element:$element,$attrs:$attrs}))}]).directive("timepicker",["$log","$timepickerSuppressWarning",function($log,$timepickerSuppressWarning){return{restrict:"EA",require:["timepicker","?^ngModel"],controller:"TimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(element,attrs){return attrs.templateUrl||"template/timepicker/timepicker.html"},link:function(scope,element,attrs,ctrls){$timepickerSuppressWarning||$log.warn("timepicker is now deprecated. Use uib-timepicker instead.");var timepickerCtrl=ctrls[0],ngModelCtrl=ctrls[1];ngModelCtrl&&timepickerCtrl.init(ngModelCtrl,element.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function($parse){var TYPEAHEAD_REGEXP=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(input){var match=input.match(TYPEAHEAD_REGEXP);if(!match)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+input+'".');return{itemName:match[3],source:$parse(match[4]),viewMapper:$parse(match[2]||match[1]),modelMapper:$parse(match[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$uibPosition","uibTypeaheadParser",function(originalScope,element,attrs,$compile,$parse,$q,$timeout,$document,$window,$rootScope,$position,typeaheadParser){function fireRecalculating(){scope.moveInProgress||(scope.moveInProgress=!0,scope.$digest()),timeoutEventPromise&&$timeout.cancel(timeoutEventPromise),timeoutEventPromise=$timeout(function(){scope.matches.length&&recalculatePosition(),scope.moveInProgress=!1},eventDebounceTime)}function recalculatePosition(){scope.position=appendToBody?$position.offset(element):$position.position(element),scope.position.top+=element.prop("offsetHeight")}var modelCtrl,ngModelOptions,HOT_KEYS=[9,13,27,38,40],eventDebounceTime=200,minLength=originalScope.$eval(attrs.typeaheadMinLength);minLength||0===minLength||(minLength=1);var hasFocus,selected,waitTime=originalScope.$eval(attrs.typeaheadWaitMs)||0,isEditable=originalScope.$eval(attrs.typeaheadEditable)!==!1,isLoadingSetter=$parse(attrs.typeaheadLoading).assign||angular.noop,onSelectCallback=$parse(attrs.typeaheadOnSelect),isSelectOnBlur=angular.isDefined(attrs.typeaheadSelectOnBlur)?originalScope.$eval(attrs.typeaheadSelectOnBlur):!1,isNoResultsSetter=$parse(attrs.typeaheadNoResults).assign||angular.noop,inputFormatter=attrs.typeaheadInputFormatter?$parse(attrs.typeaheadInputFormatter):void 0,appendToBody=attrs.typeaheadAppendToBody?originalScope.$eval(attrs.typeaheadAppendToBody):!1,appendToElementId=attrs.typeaheadAppendToElementId||!1,focusFirst=originalScope.$eval(attrs.typeaheadFocusFirst)!==!1,selectOnExact=attrs.typeaheadSelectOnExact?originalScope.$eval(attrs.typeaheadSelectOnExact):!1,parsedModel=$parse(attrs.ngModel),invokeModelSetter=$parse(attrs.ngModel+"($$$p)"),$setModelValue=function(scope,newValue){return angular.isFunction(parsedModel(originalScope))&&ngModelOptions&&ngModelOptions.$options&&ngModelOptions.$options.getterSetter?invokeModelSetter(scope,{$$$p:newValue}):parsedModel.assign(scope,newValue)},parserResult=typeaheadParser.parse(attrs.uibTypeahead),scope=originalScope.$new(),offDestroy=originalScope.$on("$destroy",function(){scope.$destroy()});scope.$on("$destroy",offDestroy);var popupId="typeahead-"+scope.$id+"-"+Math.floor(1e4*Math.random());element.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":popupId});var popUpEl=angular.element("<div uib-typeahead-popup></div>");popUpEl.attr({id:popupId,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(attrs.typeaheadTemplateUrl)&&popUpEl.attr("template-url",attrs.typeaheadTemplateUrl),angular.isDefined(attrs.typeaheadPopupTemplateUrl)&&popUpEl.attr("popup-template-url",attrs.typeaheadPopupTemplateUrl);var resetMatches=function(){scope.matches=[],scope.activeIdx=-1,element.attr("aria-expanded",!1)},getMatchId=function(index){return popupId+"-option-"+index};scope.$watch("activeIdx",function(index){0>index?element.removeAttr("aria-activedescendant"):element.attr("aria-activedescendant",getMatchId(index))});var inputIsExactMatch=function(inputValue,index){return scope.matches.length>index&&inputValue?inputValue.toUpperCase()===scope.matches[index].label.toUpperCase():!1},getMatchesAsync=function(inputValue){var locals={$viewValue:inputValue};isLoadingSetter(originalScope,!0),isNoResultsSetter(originalScope,!1),$q.when(parserResult.source(originalScope,locals)).then(function(matches){var onCurrentRequest=inputValue===modelCtrl.$viewValue;if(onCurrentRequest&&hasFocus)if(matches&&matches.length>0){scope.activeIdx=focusFirst?0:-1,isNoResultsSetter(originalScope,!1),scope.matches.length=0;for(var i=0;i<matches.length;i++)locals[parserResult.itemName]=matches[i],scope.matches.push({id:getMatchId(i),label:parserResult.viewMapper(scope,locals),model:matches[i]});scope.query=inputValue,recalculatePosition(),element.attr("aria-expanded",!0),selectOnExact&&1===scope.matches.length&&inputIsExactMatch(inputValue,0)&&scope.select(0)}else resetMatches(),isNoResultsSetter(originalScope,!0);onCurrentRequest&&isLoadingSetter(originalScope,!1)},function(){resetMatches(),isLoadingSetter(originalScope,!1),isNoResultsSetter(originalScope,!0)})};appendToBody&&(angular.element($window).bind("resize",fireRecalculating),$document.find("body").bind("scroll",fireRecalculating));var timeoutEventPromise;scope.moveInProgress=!1,scope.query=void 0;var timeoutPromise,scheduleSearchWithTimeout=function(inputValue){timeoutPromise=$timeout(function(){getMatchesAsync(inputValue)},waitTime)},cancelPreviousTimeout=function(){timeoutPromise&&$timeout.cancel(timeoutPromise)};resetMatches(),scope.select=function(activeIdx){var model,item,locals={};selected=!0,locals[parserResult.itemName]=item=scope.matches[activeIdx].model,model=parserResult.modelMapper(originalScope,locals),$setModelValue(originalScope,model),modelCtrl.$setValidity("editable",!0),modelCtrl.$setValidity("parse",!0),onSelectCallback(originalScope,{$item:item,$model:model,$label:parserResult.viewMapper(originalScope,locals)}),resetMatches(),scope.$eval(attrs.typeaheadFocusOnSelect)!==!1&&$timeout(function(){element[0].focus()},0,!1)},element.bind("keydown",function(evt){if(0!==scope.matches.length&&-1!==HOT_KEYS.indexOf(evt.which)){if(-1===scope.activeIdx&&(9===evt.which||13===evt.which))return resetMatches(),void scope.$digest();evt.preventDefault(),40===evt.which?(scope.activeIdx=(scope.activeIdx+1)%scope.matches.length,scope.$digest()):38===evt.which?(scope.activeIdx=(scope.activeIdx>0?scope.activeIdx:scope.matches.length)-1,scope.$digest()):13===evt.which||9===evt.which?scope.$apply(function(){scope.select(scope.activeIdx)}):27===evt.which&&(evt.stopPropagation(),resetMatches(),scope.$digest())}}),element.bind("blur",function(){isSelectOnBlur&&scope.matches.length&&-1!==scope.activeIdx&&!selected&&(selected=!0,scope.$apply(function(){scope.select(scope.activeIdx)})),hasFocus=!1,selected=!1});var dismissClickHandler=function(evt){element[0]!==evt.target&&3!==evt.which&&0!==scope.matches.length&&(resetMatches(),$rootScope.$$phase||scope.$digest())};$document.bind("click",dismissClickHandler),originalScope.$on("$destroy",function(){$document.unbind("click",dismissClickHandler),(appendToBody||appendToElementId)&&$popup.remove(),appendToBody&&(angular.element($window).unbind("resize",fireRecalculating),$document.find("body").unbind("scroll",fireRecalculating)),popUpEl.remove()});var $popup=$compile(popUpEl)(scope);appendToBody?$document.find("body").append($popup):appendToElementId!==!1?angular.element($document[0].getElementById(appendToElementId)).append($popup):element.after($popup),this.init=function(_modelCtrl,_ngModelOptions){modelCtrl=_modelCtrl,ngModelOptions=_ngModelOptions,modelCtrl.$parsers.unshift(function(inputValue){return hasFocus=!0,0===minLength||inputValue&&inputValue.length>=minLength?waitTime>0?(cancelPreviousTimeout(),scheduleSearchWithTimeout(inputValue)):getMatchesAsync(inputValue):(isLoadingSetter(originalScope,!1),cancelPreviousTimeout(),resetMatches()),isEditable?inputValue:inputValue?void modelCtrl.$setValidity("editable",!1):(modelCtrl.$setValidity("editable",!0),null)}),modelCtrl.$formatters.push(function(modelValue){var candidateViewValue,emptyViewValue,locals={};return isEditable||modelCtrl.$setValidity("editable",!0),inputFormatter?(locals.$model=modelValue,inputFormatter(originalScope,locals)):(locals[parserResult.itemName]=modelValue,candidateViewValue=parserResult.viewMapper(originalScope,locals),locals[parserResult.itemName]=void 0,emptyViewValue=parserResult.viewMapper(originalScope,locals),candidateViewValue!==emptyViewValue?candidateViewValue:modelValue)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(originalScope,element,attrs,ctrls){ctrls[2].init(ctrls[0],ctrls[1])}}}).directive("uibTypeaheadPopup",function(){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(element,attrs){return attrs.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(scope,element,attrs){scope.templateUrl=attrs.templateUrl,scope.isOpen=function(){return scope.matches.length>0},scope.isActive=function(matchIdx){return scope.active==matchIdx},scope.selectActive=function(matchIdx){scope.active=matchIdx},scope.selectMatch=function(activeIdx){scope.select({activeIdx:activeIdx})}}}}).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function($templateRequest,$compile,$parse){return{scope:{index:"=",match:"=",query:"="},link:function(scope,element,attrs){var tplUrl=$parse(attrs.templateUrl)(scope.$parent)||"template/typeahead/typeahead-match.html";$templateRequest(tplUrl).then(function(tplContent){$compile(tplContent.trim())(scope,function(clonedElement){element.replaceWith(clonedElement)})})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function($sce,$injector,$log){function escapeRegexp(queryToEscape){return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function containsHtml(matchItem){return/<.*>/g.test(matchItem)}var isSanitizePresent;return isSanitizePresent=$injector.has("$sanitize"),function(matchItem,query){return!isSanitizePresent&&containsHtml(matchItem)&&$log.warn("Unsafe use of typeahead please use ngSanitize"),matchItem=query?(""+matchItem).replace(new RegExp(escapeRegexp(query),"gi"),"<strong>$&</strong>"):matchItem,isSanitizePresent||(matchItem=$sce.trustAsHtml(matchItem)),matchItem}}]),angular.module("ui.bootstrap.typeahead").value("$typeaheadSuppressWarning",!1).service("typeaheadParser",["$parse","uibTypeaheadParser","$log","$typeaheadSuppressWarning",function($parse,uibTypeaheadParser,$log,$typeaheadSuppressWarning){return $typeaheadSuppressWarning||$log.warn("typeaheadParser is now deprecated. Use uibTypeaheadParser instead."),uibTypeaheadParser}]).directive("typeahead",["$compile","$parse","$q","$timeout","$document","$window","$rootScope","$uibPosition","typeaheadParser","$log","$typeaheadSuppressWarning",function($compile,$parse,$q,$timeout,$document,$window,$rootScope,$position,typeaheadParser,$log,$typeaheadSuppressWarning){var HOT_KEYS=[9,13,27,38,40],eventDebounceTime=200;return{require:["ngModel","^?ngModelOptions"],link:function(originalScope,element,attrs,ctrls){function fireRecalculating(){scope.moveInProgress||(scope.moveInProgress=!0,scope.$digest()),timeoutEventPromise&&$timeout.cancel(timeoutEventPromise),timeoutEventPromise=$timeout(function(){scope.matches.length&&recalculatePosition(),scope.moveInProgress=!1},eventDebounceTime)}function recalculatePosition(){scope.position=appendToBody?$position.offset(element):$position.position(element),scope.position.top+=element.prop("offsetHeight")}$typeaheadSuppressWarning||$log.warn("typeahead is now deprecated. Use uib-typeahead instead.");var modelCtrl=ctrls[0],ngModelOptions=ctrls[1],minLength=originalScope.$eval(attrs.typeaheadMinLength);minLength||0===minLength||(minLength=1);var hasFocus,selected,waitTime=originalScope.$eval(attrs.typeaheadWaitMs)||0,isEditable=originalScope.$eval(attrs.typeaheadEditable)!==!1,isLoadingSetter=$parse(attrs.typeaheadLoading).assign||angular.noop,onSelectCallback=$parse(attrs.typeaheadOnSelect),isSelectOnBlur=angular.isDefined(attrs.typeaheadSelectOnBlur)?originalScope.$eval(attrs.typeaheadSelectOnBlur):!1,isNoResultsSetter=$parse(attrs.typeaheadNoResults).assign||angular.noop,inputFormatter=attrs.typeaheadInputFormatter?$parse(attrs.typeaheadInputFormatter):void 0,appendToBody=attrs.typeaheadAppendToBody?originalScope.$eval(attrs.typeaheadAppendToBody):!1,appendToElementId=attrs.typeaheadAppendToElementId||!1,focusFirst=originalScope.$eval(attrs.typeaheadFocusFirst)!==!1,selectOnExact=attrs.typeaheadSelectOnExact?originalScope.$eval(attrs.typeaheadSelectOnExact):!1,parsedModel=$parse(attrs.ngModel),invokeModelSetter=$parse(attrs.ngModel+"($$$p)"),$setModelValue=function(scope,newValue){return angular.isFunction(parsedModel(originalScope))&&ngModelOptions&&ngModelOptions.$options&&ngModelOptions.$options.getterSetter?invokeModelSetter(scope,{$$$p:newValue}):parsedModel.assign(scope,newValue)},parserResult=typeaheadParser.parse(attrs.typeahead),scope=originalScope.$new(),offDestroy=originalScope.$on("$destroy",function(){scope.$destroy()});scope.$on("$destroy",offDestroy);var popupId="typeahead-"+scope.$id+"-"+Math.floor(1e4*Math.random());element.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":popupId});var popUpEl=angular.element("<div typeahead-popup></div>");popUpEl.attr({id:popupId,matches:"matches",active:"activeIdx",select:"select(activeIdx)","move-in-progress":"moveInProgress",query:"query",position:"position"}),angular.isDefined(attrs.typeaheadTemplateUrl)&&popUpEl.attr("template-url",attrs.typeaheadTemplateUrl),angular.isDefined(attrs.typeaheadPopupTemplateUrl)&&popUpEl.attr("popup-template-url",attrs.typeaheadPopupTemplateUrl);var resetMatches=function(){scope.matches=[],scope.activeIdx=-1,element.attr("aria-expanded",!1)},getMatchId=function(index){return popupId+"-option-"+index};scope.$watch("activeIdx",function(index){0>index?element.removeAttr("aria-activedescendant"):element.attr("aria-activedescendant",getMatchId(index))});var inputIsExactMatch=function(inputValue,index){return scope.matches.length>index&&inputValue?inputValue.toUpperCase()===scope.matches[index].label.toUpperCase():!1},getMatchesAsync=function(inputValue){var locals={$viewValue:inputValue};isLoadingSetter(originalScope,!0),isNoResultsSetter(originalScope,!1),$q.when(parserResult.source(originalScope,locals)).then(function(matches){var onCurrentRequest=inputValue===modelCtrl.$viewValue;if(onCurrentRequest&&hasFocus)if(matches&&matches.length>0){scope.activeIdx=focusFirst?0:-1,isNoResultsSetter(originalScope,!1),scope.matches.length=0;for(var i=0;i<matches.length;i++)locals[parserResult.itemName]=matches[i],scope.matches.push({id:getMatchId(i),label:parserResult.viewMapper(scope,locals),model:matches[i]});scope.query=inputValue,recalculatePosition(),element.attr("aria-expanded",!0),selectOnExact&&1===scope.matches.length&&inputIsExactMatch(inputValue,0)&&scope.select(0)}else resetMatches(),isNoResultsSetter(originalScope,!0);onCurrentRequest&&isLoadingSetter(originalScope,!1)},function(){resetMatches(),isLoadingSetter(originalScope,!1),isNoResultsSetter(originalScope,!0)})};appendToBody&&(angular.element($window).bind("resize",fireRecalculating),$document.find("body").bind("scroll",fireRecalculating));var timeoutEventPromise;scope.moveInProgress=!1,resetMatches(),scope.query=void 0;var timeoutPromise,scheduleSearchWithTimeout=function(inputValue){timeoutPromise=$timeout(function(){getMatchesAsync(inputValue)},waitTime)},cancelPreviousTimeout=function(){timeoutPromise&&$timeout.cancel(timeoutPromise)};modelCtrl.$parsers.unshift(function(inputValue){return hasFocus=!0,0===minLength||inputValue&&inputValue.length>=minLength?waitTime>0?(cancelPreviousTimeout(),scheduleSearchWithTimeout(inputValue)):getMatchesAsync(inputValue):(isLoadingSetter(originalScope,!1),cancelPreviousTimeout(),resetMatches()),isEditable?inputValue:inputValue?void modelCtrl.$setValidity("editable",!1):(modelCtrl.$setValidity("editable",!0),null)}),modelCtrl.$formatters.push(function(modelValue){var candidateViewValue,emptyViewValue,locals={};return isEditable||modelCtrl.$setValidity("editable",!0),inputFormatter?(locals.$model=modelValue,inputFormatter(originalScope,locals)):(locals[parserResult.itemName]=modelValue,candidateViewValue=parserResult.viewMapper(originalScope,locals),locals[parserResult.itemName]=void 0,emptyViewValue=parserResult.viewMapper(originalScope,locals),candidateViewValue!==emptyViewValue?candidateViewValue:modelValue)}),scope.select=function(activeIdx){var model,item,locals={};selected=!0,locals[parserResult.itemName]=item=scope.matches[activeIdx].model,model=parserResult.modelMapper(originalScope,locals),$setModelValue(originalScope,model),modelCtrl.$setValidity("editable",!0),modelCtrl.$setValidity("parse",!0),onSelectCallback(originalScope,{$item:item,$model:model,$label:parserResult.viewMapper(originalScope,locals)}),resetMatches(),scope.$eval(attrs.typeaheadFocusOnSelect)!==!1&&$timeout(function(){element[0].focus()},0,!1)},element.bind("keydown",function(evt){if(0!==scope.matches.length&&-1!==HOT_KEYS.indexOf(evt.which)){if(-1===scope.activeIdx&&(9===evt.which||13===evt.which))return resetMatches(),void scope.$digest();evt.preventDefault(),40===evt.which?(scope.activeIdx=(scope.activeIdx+1)%scope.matches.length,scope.$digest()):38===evt.which?(scope.activeIdx=(scope.activeIdx>0?scope.activeIdx:scope.matches.length)-1,scope.$digest()):13===evt.which||9===evt.which?scope.$apply(function(){scope.select(scope.activeIdx)}):27===evt.which&&(evt.stopPropagation(),resetMatches(),scope.$digest())}}),element.bind("blur",function(){isSelectOnBlur&&scope.matches.length&&-1!==scope.activeIdx&&!selected&&(selected=!0,scope.$apply(function(){scope.select(scope.activeIdx)})),hasFocus=!1,selected=!1});var dismissClickHandler=function(evt){element[0]!==evt.target&&3!==evt.which&&0!==scope.matches.length&&(resetMatches(),$rootScope.$$phase||scope.$digest())};$document.bind("click",dismissClickHandler),originalScope.$on("$destroy",function(){$document.unbind("click",dismissClickHandler),(appendToBody||appendToElementId)&&$popup.remove(),appendToBody&&(angular.element($window).unbind("resize",fireRecalculating),$document.find("body").unbind("scroll",fireRecalculating)),popUpEl.remove()});var $popup=$compile(popUpEl)(scope);appendToBody?$document.find("body").append($popup):appendToElementId!==!1?angular.element($document[0].getElementById(appendToElementId)).append($popup):element.after($popup)}}}]).directive("typeaheadPopup",["$typeaheadSuppressWarning","$log",function($typeaheadSuppressWarning,$log){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&"},replace:!0,templateUrl:function(element,attrs){return attrs.popupTemplateUrl||"template/typeahead/typeahead-popup.html"},link:function(scope,element,attrs){$typeaheadSuppressWarning||$log.warn("typeahead-popup is now deprecated. Use uib-typeahead-popup instead."),scope.templateUrl=attrs.templateUrl,scope.isOpen=function(){return scope.matches.length>0},scope.isActive=function(matchIdx){return scope.active==matchIdx},scope.selectActive=function(matchIdx){scope.active=matchIdx},scope.selectMatch=function(activeIdx){scope.select({activeIdx:activeIdx})}}}}]).directive("typeaheadMatch",["$templateRequest","$compile","$parse","$typeaheadSuppressWarning","$log",function($templateRequest,$compile,$parse,$typeaheadSuppressWarning,$log){return{restrict:"EA",scope:{index:"=",match:"=",query:"="},link:function(scope,element,attrs){$typeaheadSuppressWarning||$log.warn("typeahead-match is now deprecated. Use uib-typeahead-match instead.");var tplUrl=$parse(attrs.templateUrl)(scope.$parent)||"template/typeahead/typeahead-match.html";$templateRequest(tplUrl).then(function(tplContent){$compile(tplContent.trim())(scope,function(clonedElement){element.replaceWith(clonedElement)})})}}}]).filter("typeaheadHighlight",["$sce","$injector","$log","$typeaheadSuppressWarning",function($sce,$injector,$log,$typeaheadSuppressWarning){function escapeRegexp(queryToEscape){return queryToEscape.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function containsHtml(matchItem){return/<.*>/g.test(matchItem)}var isSanitizePresent;return isSanitizePresent=$injector.has("$sanitize"),function(matchItem,query){return $typeaheadSuppressWarning||$log.warn("typeaheadHighlight is now deprecated. Use uibTypeaheadHighlight instead."),!isSanitizePresent&&containsHtml(matchItem)&&$log.warn("Unsafe use of typeahead please use ngSanitize"),matchItem=query?(""+matchItem).replace(new RegExp(escapeRegexp(query),"gi"),"<strong>$&</strong>"):matchItem,isSanitizePresent||(matchItem=$sce.trustAsHtml(matchItem)),matchItem}}]),angular.module("template/accordion/accordion-group.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/accordion/accordion-group.html",'<div class="panel {{panelClass || \'panel-default\'}}">\n  <div class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a href tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"><span ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div class="panel-collapse collapse" uib-collapse="!isOpen">\n	  <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("template/accordion/accordion.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/accordion/accordion.html",'<div class="panel-group" ng-transclude></div>')}]),angular.module("template/alert/alert.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("template/carousel/carousel.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n  <div class="carousel-inner" ng-transclude></div>\n  <a role="button" href class="left carousel-control" ng-click="prev()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n    <span class="sr-only">previous</span>\n  </a>\n  <a role="button" href class="right carousel-control" ng-click="next()" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n    <span class="sr-only">next</span>\n  </a>\n  <ol class="carousel-indicators" ng-show="slides.length > 1">\n    <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n      <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n    </li>\n  </ol>\n</div>')}]),angular.module("template/carousel/slide.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("template/datepicker/datepicker.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/datepicker/datepicker.html",'<div ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>')}]),angular.module("template/datepicker/day.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/datepicker/day.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default btn-sm" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/datepicker/month.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/datepicker/month.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n');
}]),angular.module("template/datepicker/popup.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/datepicker/popup.html",'<ul class="dropdown-menu" dropdown-nested ng-if="isOpen" style="display: block" ng-style="{top: position.top+\'px\', left: position.left+\'px\'}" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n	<li ng-transclude></li>\n	<li ng-if="showButtonBar" style="padding:10px 9px 2px">\n		<span class="btn-group pull-left">\n			<button type="button" class="btn btn-sm btn-info" ng-click="select(\'today\')" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n			<button type="button" class="btn btn-sm btn-danger" ng-click="select(null)">{{ getText(\'clear\') }}</button>\n		</span>\n		<button type="button" class="btn btn-sm btn-success pull-right" ng-click="close()">{{ getText(\'close\') }}</button>\n	</li>\n</ul>\n')}]),angular.module("template/datepicker/year.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/datepicker/year.html",'<table role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="3"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1" style="width:100%;"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row track by dt.date" class="text-center" role="gridcell" id="{{::dt.uid}}" ng-class="::dt.customClass">\n        <button type="button" style="min-width:100%;" class="btn btn-default" ng-class="{\'btn-info\': dt.selected, active: isActive(dt)}" ng-click="select(dt.date)" ng-disabled="dt.disabled" tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/modal/backdrop.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/modal/backdrop.html",'<div uib-modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("template/modal/window.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    uib-modal-animation-class="fade"\n    modal-in-class="in"\n    ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}">\n    <div class="modal-dialog" ng-class="size ? \'modal-\' + size : \'\'"><div class="modal-content" uib-modal-transclude></div></div>\n</div>\n')}]),angular.module("template/pagination/pager.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/pagination/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("template/pagination/pagination.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/tooltip/tooltip-html-popup.html",'<div\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/tooltip/tooltip-popup.html",'<div\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/tooltip/tooltip-template-popup.html",'<div\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    uib-tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("template/popover/popover-html.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/popover/popover-html.html",'<div tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover-template.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/popover/popover-template.html",'<div tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content"\n        uib-tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("template/popover/popover.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/popover/popover.html",'<div tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="title" ng-if="title"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("template/progressbar/bar.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" style="min-width: 0;" ng-transclude></div>\n')}]),angular.module("template/progressbar/progress.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("template/progressbar/progressbar.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" style="min-width: 0;" ng-transclude></div>\n</div>\n')}]),angular.module("template/rating/rating.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}" aria-valuetext="{{r.title}}"></i>\n</span>\n')}]),angular.module("template/tabs/tab.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/tabs/tab.html",'<li ng-class="{active: active, disabled: disabled}">\n  <a href ng-click="select()" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("template/tabs/tabset.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane" \n         ng-repeat="tab in tabs" \n         ng-class="{active: tab.active}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("template/timepicker/timepicker.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/timepicker/timepicker.html",'<table>\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group" ng-class="{\'has-error\': invalidHours}">\n        <input style="width:50px;" type="text" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}">\n      </td>\n      <td>:</td>\n      <td class="form-group" ng-class="{\'has-error\': invalidMinutes}">\n        <input style="width:50px;" type="text" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}">\n      </td>\n      <td ng-show="showMeridian"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("template/typeahead/typeahead-match.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/typeahead/typeahead-match.html",'<a href tabindex="-1" ng-bind-html="match.label | uibTypeaheadHighlight:query"></a>\n')}]),angular.module("template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function($templateCache){$templateCache.put("template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" style="display: block;" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),!angular.$$csp()&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>');var ngFunctionsPresent=!0,UNDEFINED_STR="undefined",UTMEasting,UTMNorthing,zoneNumber,FOURTHPI=Math.PI/4,DEG_2_RAD=Math.PI/180,RAD_2_DEG=180/Math.PI,BLOCK_SIZE=1e5,IS_NAD83_DATUM=!0,GRIDSQUARE_SET_COL_SIZE=8,GRIDSQUARE_SET_ROW_SIZE=20,EASTING_OFFSET=5e5,NORTHING_OFFSET=1e7,k0=.9996,EQUATORIAL_RADIUS,ECCENTRICTY_SQUARED,ECC_PRIME_SQUARED;IS_NAD83_DATUM?(EQUATORIAL_RADIUS=6378137,ECC_SQUARED=.006694380023):(EQUATORIAL_RADIUS=6378206.4,ECC_SQUARED=.006768658);var ECC_PRIME_SQUARED=ECC_SQUARED/(1-ECC_SQUARED),E1=(1-Math.sqrt(1-ECC_SQUARED))/(1+Math.sqrt(1-ECC_SQUARED)),UTMGzdLetters="NPQRSTUVWX",USNGSqEast="ABCDEFGHJKLMNPQRSTUVWXYZ",USNGSqLetOdd="ABCDEFGHJKLMNPQRSTUV",USNGSqLetEven="FGHJKLMNPQRSTUVABCDE";angular.module("opApp",["ngCookies","ngResource","ngSanitize","ngRoute","ngAnimate","ngFileUpload","restangular","toaster","ui.bootstrap","ui.select","rzModule","LocalStorageModule"]),angular.module("opApp").config(["$routeProvider",function($routeProvider){"use strict";$routeProvider.when("/",{templateUrl:"modules/home/opHome.html",controller:"opHomeController",reloadOnSearch:!1}).otherwise({redirectTo:"/"})}]).value("moment",window.moment).value("L",window.L),angular.module("opApp").service("opStateService",["$q","$rootScope","$location","$timeout","L","moment","opConfig","$log",function($q,$rootScope,$location,$timeout,L,moment,opConfig,$log){"use strict";var resultsWindow,leafletMap,leafletMapCRS,leafletLayerControl,self=this,state={},lastMapBounds=null,lastBBoxBounds=null,lastDatasetsValue=null,datasetId="datasets",dateId="temporal",boundsId="map-bounds",bboxId="bbox-bounds",customFilterId="custom-cql",debounceTimer={},mapState={},activeServer=[],previousActiveServer=[],debounceBroadcast=function(message,args){debounceTimer[message]&&$timeout.cancel(debounceTimer[message]),debounceTimer[message]=$timeout(function(){$rootScope.$broadcast(message,args)},500)};this.getDatasetsId=function(){return datasetId},this.getResultsWindow=function(){return resultsWindow},this.setResultsWindow=function(value){resultsWindow=value},this.setLeafletMapCRS=function(CRS){leafletMapCRS=CRS},this.getLeafletMapCRS=function(){return leafletMapCRS},this.setLeafletMap=function(map){leafletMap=map},this.getLeafletMap=function(){var deferred=$q.defer(),self=this;return angular.isDefined(leafletMap)?deferred.resolve(leafletMap):$timeout(function(){deferred.resolve(self.getLeafletMap())},500),deferred.promise},this.setLayerControl=function(control){leafletLayerControl=control},this.getLayerControl=function(){var deferred=$q.defer(),self=this;return angular.isDefined(leafletLayerControl)?deferred.resolve(leafletLayerControl):$timeout(function(){deferred.resolve(self.getLayerControl())},500),deferred.promise};var serializeState=function(){$location.search(state)},deserializeState=function(){state=$location.search()};this.getState=function(stateId){return deserializeState(),state[stateId]},this.isDebug=function(){var debug=this.getState("debug");return debug=angular.isDefined(debug)&&null!==debug?JSON.parse(debug.toLowerCase()):!1},this.setState=function(stateId,value){state[stateId]=value,serializeState()};var parseBBoxIntoBounds=function(bboxString){var bounds;if(bboxString){var coords=bboxString.split(",");4===coords.length?bounds=L.latLngBounds({lon:coords[0],lat:coords[1]},{lon:coords[2],lat:coords[3]}):$log.log("Unrecognized format of bounds parameter: "+bboxString)}return bounds};this.getBounds=function(){var bounds=this.getState(boundsId);return null===lastMapBounds&&(lastMapBounds=bounds),parseBBoxIntoBounds(bounds)},this.getAttributeBounds=function(){var bounds=this.getState(bboxId);return bounds},this.setBounds=function(bounds){mapState[boundsId]=bounds.toBBoxString()},this.setAttributeBBox=function(bounds){bounds?mapState[bboxId]=bounds.toBBoxString():(delete mapState[bboxId],state[bboxId]&&(delete state[bboxId],serializeState()))},this.setAttributeBBoxText=function(bounds){bounds?(mapState[bboxId]=bounds,debounceBroadcast("bounds-text-updated",bounds)):(debounceBroadcast("bounds-text-updated",""),delete mapState[bboxId],state[bboxId]&&(delete state[bboxId],serializeState()))},this.setAttributeBBoxCurrentBounds=function(){debounceBroadcast("bounds-current-bounds")},this.setAttributeBBoxCountry=function(geoJsonBounds,countryBboxList){countryBboxList&&(mapState[bboxId]=countryBboxList),$rootScope.$broadcast("bounds-country-bounds",geoJsonBounds)},this.setAttributeBBoxFile=function(geoJsonBounds){$rootScope.$broadcast("bounds-file-bounds",geoJsonBounds)},this.removeAttributeBBoxCountry=function(bounds){var countryList=mapState[bboxId],country=bounds.id;if(countryList.indexOf(country)>-1){var countryIdent="country:",countryString=countryList.substring(countryIdent.length,countryList.length),countries=countryString.split(",");countries.splice(countryString.indexOf(country),1);var newString=countryIdent+countries.join(",");newString===countryIdent?(delete mapState[bboxId],state[bboxId]&&(delete state[bboxId],serializeState())):mapState[bboxId]=newString}debounceBroadcast("remove-country-bounds",bounds)},this.setAttributeBboxPolyCircle=function(circleString){circleString&&(mapState[bboxId]=circleString)},this.getPermalink=function(){var self=this,initialState=state;angular.forEach(mapState,function(value,key){self.setState(key,value)});var location=$location.absUrl();return state=initialState,serializeState(),location},this.getTemporalFilter=function(){var filter=this.getState(dateId);void 0===filter&&(filter="D"+opConfig.defaultDaysBack+"d",this.setState(dateId,filter));var fallbackFilter={type:"duration",interval:"d",value:opConfig.defaultDaysBack};if("D"===filter.substring(0,1)){var interval=filter.substring(filter.length-1).toLowerCase(),value=parseInt(filter.substring(1,filter.length-1));-1===["d","h","w"].indexOf(interval)?($log.log("Unable to identify a valid interval type in duration from temporal filter '"+filter+"'. Setting to default"),filter=fallbackFilter):filter={type:"duration",interval:interval,value:value}}else if("R"===filter.substring(0,1)){var startTime,stopTime,range=filter.substring(1,filter.length-1).split(",");2===range.length?(startTime=moment.utc(range[0],"YYYY-MM-DDTHH:mm:ss"),stopTime=moment.utc(range[1],"YYYY-MM-DDTHH:mm:ss")):($log.log("Unable to identify a valid range in temporal filter '"+filter+"'."),stopTime=moment(),startTime=moment(stopTime).subtract("d",opConfig.defaultDaysBack)),filter={type:"range",start:startTime,stop:stopTime}}else $log.log("Unable to identify a valid temporal filter from '"+filter+"'. Defaulting to duration."),filter=fallbackFilter;return filter},this.getDatasets=function(){var datasets=this.getState(datasetId);return void 0===datasets?datasets=[]:"string"==typeof datasets&&(datasets=[datasets]),datasets},this.setDatasets=function(datasets){this.setState(datasetId,datasets),debounceBroadcast("layer-selection-changed",datasets)},this.addDataset=function(name){var datasets=this.getDatasets();-1===datasets.indexOf(name)&&datasets.push(name),this.setDatasets(datasets)},this.removeDataset=function(name){var datasets=this.getDatasets();~datasets.indexOf(name)&&datasets.splice(datasets.indexOf(name),1),this.setDatasets(datasets)},this.getTimeBoundsFromTemporalFilter=function(){var startTime,stopTime,filter=this.getTemporalFilter();return"duration"===filter.type?(stopTime=moment().endOf("hour").utc(),startTime=moment(stopTime).subtract(filter.interval,filter.value).startOf("hour").utc()):"range"===filter.type&&(startTime=filter.start,stopTime=filter.stop),[startTime,stopTime]},this.setDuration=function(interval,value){var originalValue=this.getState(dateId),filter="D"+value.toString()+interval;originalValue!==filter&&(this.setState(dateId,filter),debounceBroadcast("filters-updated","temporal"))},this.setTimeRange=function(startTime,stopTime){var originalValue=this.getState(dateId),filter="R"+startTime.format("YYYY-MM-DDTHH:mm:ss\\Z")+","+stopTime.format("YYYY-MM-DDTHH:mm:ss\\Z");originalValue!==filter&&(this.setState(dateId,filter),debounceBroadcast("filters-updated","temporal"))},this.getCustomFilter=function(){var filters=this.getState(customFilterId),result={};if(angular.isDefined(filters)){filters=filters.split(";");for(var i=0;i<filters.length;i++){var firstIndex=filters[i].indexOf("="),filter=[filters[i].slice(0,firstIndex),filters[i].slice(firstIndex+1)];2===filter.length&&(result[filter[0]]=filter[1])}}return result},this.getCustomFilterByLayer=function(namespacedName){var result=this.getCustomFilter();return namespacedName in result?result[namespacedName]:null},this.getServerByConfig=function(serverName){for(var i=0;i<opConfig.servers.length;i++)if(opConfig.servers[i].name===serverName)return opConfig.servers[i]},$rootScope.$on("$routeUpdate",function(){var boundsValue=self.getState(boundsId),bboxValue=self.getState(bboxId),datasetsValue=self.getState(datasetId);if(angular.isDefined(boundsValue)&&lastMapBounds!==boundsValue)lastMapBounds=boundsValue,debounceBroadcast("map-state-updated");else if(angular.isDefined(bboxValue)&&lastBBoxBounds!==bboxValue)lastBBoxBounds=bboxValue,debounceBroadcast("bounds-from-route",bboxValue),debounceBroadcast("map-state-updated");else if(angular.isDefined(datasetsValue)&&lastDatasetsValue!==datasetsValue){lastDatasetsValue=datasetsValue;var serversOn=previousActiveServer;if(datasetsValue.constructor===Array)angular.forEach(datasetsValue,function(dataset){var serverName=dataset.split(":")[0],server=self.getServerByConfig(serverName);-1===serversOn.indexOf(server)&&serversOn.push(server)});else{var serverName=datasetsValue.split(":")[0];if(-1===serversOn.indexOf(serverName)){var server=self.getServerByConfig(serverName);serversOn.push(server)}}serversOn.length>0&&(previousActiveServer=activeServer,activeServer=serversOn,self.compareServers())}debounceBroadcast("filters-updated",null)}),this.setAllServersActive=function(){activeServer=opConfig.servers,previousActiveServer=activeServer},this.setActiveServer=function(serverName){for(var i=0;i<opConfig.servers.length;i++)if(serverName===opConfig.servers[i].name)return void(activeServer=new Array(opConfig.servers[i]));0===previousActiveServer.length&&(previousActiveServer=activeServer)},this.getActiveServer=function(){return activeServer},this.getPreviouslyActiveServer=function(){return previousActiveServer},this.getServerNumByName=function(serverName){for(var i=0;i<opConfig.servers.length;i++)if(opConfig.servers[i].name===serverName)return i},this.getServer=function(serverName){for(var i=0;i<activeServer.length;i++)if(activeServer[i].name===serverName)return activeServer[i]},this.setActiveServerData=function(serverData){var activeServers=[];serverData.forEach(function(server){server.active&&activeServers.push(server)}),previousActiveServer=activeServer,activeServer=activeServers,this.compareServers()},this.compareServers=function(){var serversToTurnOff=[],serversToTurnOn=[];serversToTurnOff.forEach(function(server){$log.log(server)}),0===previousActiveServer.length?serversToTurnOn=activeServer:0===activeServer.length?serversToTurnOff=previousActiveServer:(previousActiveServer.forEach(function(oldServer){var found=!1;activeServer.forEach(function(newServer){newServer.name===oldServer.name&&(found=!0)}),found||serversToTurnOff.push(oldServer)}),activeServer.forEach(function(newServer){var found=!1;previousActiveServer.forEach(function(oldServer){oldServer.name===newServer.name&&(found=!0)}),found||serversToTurnOn.push(newServer)})),$log.log("Turning on: "+JSON.stringify(serversToTurnOn)),$log.log("Turning off: "+JSON.stringify(serversToTurnOff)),$timeout(function(){$rootScope.$broadcast("servers-updated",[serversToTurnOn,serversToTurnOff])},500),previousActiveServer=activeServer}}]),angular.module("opApp").filter("plainTextToHtml",["$sce",function($sce){"use strict";return function(plainText){if(!plainText)return"";var output=[];$.each(plainText.split("\n"),function(key,value){output.push(value)}),output=output.join(" <br/>");var autoLinked=[];return $.each(output.split(" "),function(key,value){0===value.indexOf("http://")||0===value.indexOf("https://")?autoLinked.push('<a href="'+value+'" target="_blank">'+value+"</a>"):autoLinked.push(value)}),output=autoLinked.join(" "),$sce.trustAsHtml(output)}}]),angular.module("opApp").filter("tagFilter",function(){"use strict";return function(groups){return groups.sort(function(a,b){var tag1=a.getTag(),tag2=b.getTag();return tag2>tag1?-1:tag1>tag2?1:0})}}),angular.module("opApp").filter("unixToDate",function(){"use strict";return function(unixdate){return moment.unix(unixdate).format("MM/DD/YYYY HH:mm:ss")}}),angular.module("opApp").directive("opAnnouncements",["$uibModal","$templateCache","$rootScope","opAnnouncementsService",function($uibModal,$templateCache,$rootScope,opAnnouncementsService){"use strict";return{templateUrl:"modules/header/opAnnouncements.html",restrict:"EA",link:function(scope){scope.enabled=!1,scope.messages=[],scope.selected={},scope.index=0,scope.select=function(index){scope.index=index,scope.index<0&&(scope.index=scope.messages.length-1),scope.index>=scope.messages.length&&(scope.index=0),scope.selected=scope.messages[scope.index]},scope.previous=function(){scope.select(scope.index-1)},scope.next=function(){scope.select(scope.index+1)},scope.close=function(){opAnnouncementsService.save()},scope.showAll=function(){$modal.open({scope:scope,templateUrl:"modules/header/opNews.html",windowClass:"news-modal"})},$rootScope.$on("announcementsChanged",function(e,messages,enabled){scope.messages=messages,scope.enabled=enabled,scope.selected=messages.length?messages[0]:{},scope.index=0}),$rootScope.$on("showAnnouncements",function(){scope.showAll()})}}}]),angular.module("opApp").service("opAnnouncementsService",["$log","$http","$timeout","$rootScope","moment","localStorageService",function($log,$http,$timeout,$rootScope,moment,localStorageService){"use strict";var self=this,minTime=moment.utc(),maxTime=moment("1970-01-01"),storedMin=function(val){return void 0!==val&&(localStorageService.set("announcementMin",val),minTime=moment(val)),void 0!==localStorageService.get("announcementMin")?moment(localStorageService.get("announcementMin")):minTime},storedMax=function(val){return void 0!==val&&(localStorageService.set("announcementMax",val),maxTime=moment(val)),void 0!==localStorageService.get("announcementMax")?moment(localStorageService.get("announcementMax")):maxTime};self.messages=[],self.updated=!1,self.getAnnouncements=function(){return $http({method:"GET",url:"config/announcements.json?_="+moment().valueOf(),timeout:5e4}).then(function(result){return result.data})},self.load=function(){var oldMinTime=storedMin(),oldMaxTime=storedMax();oldMinTime.isValid()&&oldMaxTime.isValid()&&(minTime=oldMinTime,maxTime=oldMaxTime),self.getAnnouncements().then(function(data){if(self.messages=_(data).filter(function(item){return moment.utc().isAfter(item.pubdate)}).sortBy("pubdate").reverse().value(),self.messages=_.each(self.messages,function(msg){msg.title=msg.title||"Attention",msg.category?msg.state=msg.category.toLowerCase():msg.state="info","failure"===msg.state?msg.icon="exclaim":"success"===msg.state?msg.icon="checkmark":msg.icon="info";var ts=moment.utc(msg.pubdate);return 0===ts.hours()&&0===ts.minutes()&&0===ts.seconds()&&0===ts.milliseconds()?msg.formattedDate=ts.format("YYYY-MM-DD"):msg.pubdate.indexOf("T")>0?msg.formattedDate=ts.format("YYYY-MM-DD HH:mm:ss[Z]"):msg.formattedDate=msg.pubdate,msg}),self.messages.length){var lastMsg=self.messages[0];(minTime.isAfter(lastMsg.pubdate)||maxTime.isBefore(lastMsg.pubdate))&&(self.updated=!0)}$rootScope.$broadcast("announcementsChanged",self.messages,self.updated)})},self.save=function(){if(self.messages.length){try{minTime.isAfter(self.messages[0].pubdate)&&storedMin(self.messages[0].pubdate),maxTime.isBefore(self.messages[0].pubdate)&&storedMax(self.messages[0].pubdate)}catch(err){$log.error("Unable to check announcement published time.")}self.updated=!1,$rootScope.$broadcast("announcementsChanged",self.messages,self.updated)}},$timeout(function(){self.load()},100)}]),angular.module("opApp").controller("opHeaderController",["$scope","$rootScope","$location","$uibModal","$timeout","opConfig","opPopupWindow","opStateService","$log",function($scope,$rootScope,$location,$uibModal,$timeout,opConfig,opPopupWindow,opStateService,$log){"use strict";$scope.classification=opConfig.classification,$scope.bamfLink="",$scope.kmlLink="",$scope.kmlEnabled=!1,$scope.docLink=opConfig.docLink,$scope.announcementCount=0,$scope.announcementsEnabled=!1,$scope.servers=[],$scope.kmlServers=null,$scope.kmlSingleServer=!1,$scope.KmlLayers=[],$scope.KmlServers=[],$scope.DEBUG=opStateService.isDebug(),$scope.showSecurityBanner=function(){$uibModal.open({templateUrl:"modules/header/opSecurityBanner.html"})},$scope.openResults=function(){opPopupWindow.showPopup("results.html")},$scope.showBookmark=function(){$scope.bamfLink=opStateService.getPermalink(),$uibModal.open({templateUrl:"modules/header/opBookmark.html"})},$scope.showKmlLink=function(){$scope.kmlLinks=[];var servers=[],layers=[[]];layers[1]=[];for(var val=opStateService.getDatasets(),i=0;i<val.length;i++){var splitVals=val[i].split(":"),server=splitVals[0],layer=splitVals[2],serverIndex=servers.indexOf(server);-1===serverIndex?(servers.push(server),serverIndex=servers.indexOf(server),layers[serverIndex].push(layer)):layers[serverIndex].push(layer)}$scope.KmlLayers=layers,$scope.KmlServers=servers;for(var serverCount=servers.length,j=0;serverCount>j;j++)$scope.kmlLinks[j]=$scope.buildKmlLink($scope.KmlServers[j]);$uibModal.open({templateUrl:"modules/header/opKmlSelector.html"})},$scope.getLayersForServer=function(serverNum){return $scope.KmlLayers[serverNum]},$scope.refreshServer=function(server){var serverData=$scope.servers[server];$rootScope.$broadcast("refresh-server",serverData)},opConfig.getVersion().then(function(data){$scope.version=data}),$scope.buildKmlLink=function(serverName){var val=opStateService.getDatasets(),server=opStateService.getServer(serverName),link="";if(null!==val&&val.length>0){$scope.kmlEnabled=!0,link=server.url+"/wms/kml?layers=";for(var serverVals=[],i=0;i<val.length;i++){var splitVal=val[i].split(":"),layerVal=splitVal[1]+":"+splitVal[2];splitVal[0]===serverName&&serverVals.push(layerVal);
}link+=serverVals.join(",");var timeFilter=opStateService.getTemporalFilter(),timeStr=null,titleString=null;if(null!==timeFilter&&timeFilter.type)if("duration"===timeFilter.type){timeStr="P"+timeFilter.value+timeFilter.interval+"/present";var timeLookup={h:"Hour",d:"Day",w:"Week"};titleString="OGC Last "+timeFilter.value+" "+timeLookup[timeFilter.interval],1!==timeFilter.value&&(titleString+="s")}else"range"===timeFilter.type&&(timeStr=timeFilter.start.format("YYYY-MM-DDTHH:mm:ss\\Z")+"/"+timeFilter.stop.format("YYYY-MM-DDTHH:mm:ss\\Z"),titleString="OGC between "+timeFilter.start.format("YYYY-MM-DDTHH:mm:ss\\Z")+" and "+timeFilter.stop.format("YYYY-MM-DDTHH:mm:ss\\Z"));null!==timeStr&&(link+="&time="+timeStr),null!==titleString&&(link+="&kmltitle="+titleString)}return link},$scope.showAbout=function(){$uibModal.open({templateUrl:"modules/header/opAbout.html",windowClass:"small-modal"})},$scope.showAnnouncements=function(){$rootScope.$broadcast("showAnnouncements")},$scope.$on("announcementsChanged",function(e,messages,enabled){$scope.announcementCount=messages.length,$scope.announcementsEnabled=enabled}),$scope.$on("filters-updated",function(){var val=opStateService.getDatasets(),serversActive=opStateService.getActiveServer();val.length>0?$scope.kmlEnabled=!0:$scope.kmlEnabled=!1,1===serversActive.length?($scope.kmlSingleServer=!0,$scope.kmlLink=$scope.buildKmlLink(serversActive[0].name)):$scope.kmlSingleServer=!1}),$scope.$on("servers-updated",function(event,args){var serversOn=args[0],serversOff=args[1],serversActive=opStateService.getActiveServer();1===serversActive.length?($scope.kmlSingleServer=!0,$scope.kmlLink=$scope.buildKmlLink(serversActive[0].name)):$scope.kmlSingleServer=!1,serversOn.forEach(function(serverOn){$scope.servers.forEach(function(server){serverOn.name===server.name&&(server.active=!0)})}),serversOff.forEach(function(serverOff){$scope.servers.forEach(function(server){serverOff.name===server.name&&(server.active=!1)})})}),$scope.getServerNames=function(){$scope.servers=opConfig.servers,$scope.servers.forEach(function(server){server.active=!1,server.loaded=!1})},$scope.toggleServer=function(server){$scope.servers[server].active=!$scope.servers[server].active,$scope.updateStateService()},$scope.updateStateService=function(){opStateService.setActiveServerData($scope.servers),$log.log("server changed, new data: "+JSON.stringify($scope.servers))},$scope.getServerNames()}]),angular.module("opApp").directive("opHeader",function(){"use strict";return{restrict:"E",templateUrl:"modules/header/opHeader.html",controller:"opHeaderController"}}),angular.module("opApp").controller("opHomeController",["$scope","$rootScope","opStateService","opPopupWindow","$window","$log",function($scope,$rootScope,opStateService,opPopupWindow,$window,$log){"use strict";var initialize=function(){$log.log("Starting up opHomeController...")};initialize(),$window.broadcast=function(){var args=arguments;$rootScope.$broadcast.apply($scope,args)}}]),angular.module("opApp").controller("opMapController",["$scope","$rootScope","$timeout","L","opConfig","opStateService","opWebMapService","opPopupWindow","$log","opCoordinateConversionService",function($scope,$rootScope,$timeout,L,opConfig,opStateService,opWebMapService,opPopupWindow,$log,opCoordinateConversionService){"use strict";L.drawLocal.draw.toolbar.buttons.polygon="Draw a polygon filter.",L.drawLocal.draw.toolbar.buttons.rectangle="Draw a rectangle filter.",L.drawLocal.edit.toolbar.buttons.edit="Edit filter shapes.",L.drawLocal.edit.toolbar.buttons.editDisabled="No filters to edit.",L.drawLocal.edit.toolbar.buttons.remove="Delete filter shapes.",L.drawLocal.edit.toolbar.buttons.removeDisabled="No filters to delete.";var map,bboxLayer,layerControl,legendControl,drawnCountries=[],checkForMapBoundsState=function(){var bounds=opStateService.getBounds();bounds&&map.fitBounds(bounds)},destinationVincenty=function(lonlat,brng,dist){for(var cos2SigmaM,sinSigma,cosSigma,u=L.Util,ct=u.VincentyConstants,a=ct.a,b=ct.b,f=ct.f,lon1=lonlat.lng,lat1=lonlat.lat,s=dist,pi=Math.PI,alpha1=brng*pi/180,sinAlpha1=Math.sin(alpha1),cosAlpha1=Math.cos(alpha1),tanU1=(1-f)*Math.tan(lat1*pi/180),cosU1=1/Math.sqrt(1+tanU1*tanU1),sinU1=tanU1*cosU1,sigma1=Math.atan2(tanU1,cosAlpha1),sinAlpha=cosU1*sinAlpha1,cosSqAlpha=1-sinAlpha*sinAlpha,uSq=cosSqAlpha*(a*a-b*b)/(b*b),A=1+uSq/16384*(4096+uSq*(-768+uSq*(320-175*uSq))),B=uSq/1024*(256+uSq*(-128+uSq*(74-47*uSq))),sigma=s/(b*A),sigmaP=2*Math.PI;Math.abs(sigma-sigmaP)>1e-12;){cos2SigmaM=Math.cos(2*sigma1+sigma),sinSigma=Math.sin(sigma),cosSigma=Math.cos(sigma);var deltaSigma=B*sinSigma*(cos2SigmaM+B/4*(cosSigma*(-1+2*cos2SigmaM*cos2SigmaM)-B/6*cos2SigmaM*(-3+4*sinSigma*sinSigma)*(-3+4*cos2SigmaM*cos2SigmaM)));sigmaP=sigma,sigma=s/(b*A)+deltaSigma}var tmp=sinU1*sinSigma-cosU1*cosSigma*cosAlpha1,lat2=Math.atan2(sinU1*cosSigma+cosU1*sinSigma*cosAlpha1,(1-f)*Math.sqrt(sinAlpha*sinAlpha+tmp*tmp)),lambda=Math.atan2(sinSigma*sinAlpha1,cosU1*cosSigma-sinU1*sinSigma*cosAlpha1),C=f/16*cosSqAlpha*(4+f*(4-3*cosSqAlpha)),lam=lambda-(1-C)*f*sinAlpha*(sigma+C*sinSigma*(cos2SigmaM+C*cosSigma*(-1+2*cos2SigmaM*cos2SigmaM))),lamFunc=lon1+180*lam/pi,lat2a=180*lat2/pi;return L.latLng(lamFunc,lat2a)},createGeodesicPolygon=function(origin,radius,sides){for(var angle,newLonLat,geomPoint,latLon=origin,points=[],i=0;sides>i;i++)angle=360*i/sides,newLonLat=destinationVincenty(latLon,angle,radius),geomPoint=L.latLng(newLonLat.lng,newLonLat.lat),points.push(geomPoint);return points},createCirclePoly=function(lat,long,radius){for(var vertices=120,origin=L.latLng(lat,long),polys=createGeodesicPolygon(origin,radius,vertices),polygon=[],i=0;i<polys.length;i++){var geometry=[polys[i].lat,polys[i].lng];polygon.push(geometry)}return L.polygon(polygon)},drawCircle=function(lat,long,radius){var wkt=new Wkt.Wkt,polyCircle=createCirclePoly(lat,long,radius);wkt.fromObject(polyCircle);var origin=L.latLng(lat,long),circleLayer=new L.circle(origin,radius,{color:"#ffd800",weight:2,opacity:1,fill:!1});bboxLayer.clearLayers(),bboxLayer.addLayer(circleLayer),bboxLayer.wkt=wkt.write()},checkForBBoxBoundsState=function(){var boundsString=opStateService.getAttributeBounds(),countryIdent="country:",circleIdent="circle:";if(boundsString)if(boundsString.indexOf(countryIdent)>-1){var countryString=boundsString.substring(countryIdent.length,boundsString.length),countries=countryString.split(",");$timeout(function(){$rootScope.$broadcast("country-bounds-from-route",countries)},1e3)}else if(boundsString.indexOf(circleIdent)>-1){var circleString=boundsString.substring(circleIdent.length,boundsString.length),circleData=circleString.split(","),lat=circleData[0],long=circleData[1],radius=circleData[2];drawCircle(lat,long,radius)}else{var coords=boundsString.split(",");4===coords.length?$timeout(function(){$rootScope.$broadcast("box-bounds-from-route",coords)},1e3):coords.length<4&&$timeout(function(){$rootScope.$broadcast("default-from-route")},1e3)}else $timeout(function(){$rootScope.$broadcast("default-from-route")},1e3);opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")},redrawRect=function(bounds){if(bounds){var rect=new L.rectangle(bounds,{color:"#ffd800",weight:2,opacity:1,fill:!1}),wkt=new Wkt.Wkt;wkt.fromObject(rect),bboxLayer.clearLayers(),bboxLayer.addLayer(rect),bboxLayer.wkt=wkt.write(),opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")}},drawFileBounds=function(bounds){var fileBounds=new L.geoJson(bounds,{color:"#ffd800",weight:2,opacity:1,fill:!1}),wktTotal=new Wkt.Wkt;wktTotal.read("MULTIPOLYGON(())");for(var wktObject=new Wkt.Wkt,i=0;i<bounds.features.length;i++){var object=bounds.features[i].geometry;wktObject.read(JSON.stringify(object)),wktTotal.merge(wktObject)}wktTotal.components.splice(0,1),bboxLayer.wkt=wktTotal.write(),bboxLayer.clearLayers(),bboxLayer.addLayer(fileBounds),bboxLayer.wkt=wktTotal.write(),map.fitBounds(fileBounds),opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")},drawCountry=function(geoJsonCountry){var country=new L.geoJson(geoJsonCountry,{color:"#ffd800",weight:2,opacity:1,fill:!1});0===drawnCountries.length&&bboxLayer.getLayers().length>0&&bboxLayer.clearLayers();var wktCountry=new Wkt.Wkt;wktCountry.read(JSON.stringify(geoJsonCountry.geometry));var countryData={id:geoJsonCountry.id,leafletId:country._leaflet_id,wkt:wktCountry.write()};-1===drawnCountries.indexOf(countryData)&&drawnCountries.push(countryData);var wktTotal=new Wkt.Wkt;wktTotal.read("MULTIPOLYGON(())");for(var i=0;i<drawnCountries.length;i++){var countryWkt=new Wkt.Wkt(drawnCountries[i].wkt);wktTotal.merge(countryWkt)}wktTotal.components.splice(0,1),bboxLayer.addLayer(country),bboxLayer.wkt=wktTotal.write(),opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")},removeCountryDraw=function(bounds){for(var countryId=bounds.id,i=0;i<drawnCountries.length;i++)if(drawnCountries[i].id===countryId){var layerId=drawnCountries[i].leafletId;bboxLayer.removeLayer(layerId),drawnCountries.splice(i,1);break}},drawCurrentBounds=function(){var bounds=map.getBounds();if(bounds){var rect=new L.rectangle(bounds,{color:"#ffd800",weight:4,opacity:1,fill:!1}),wkt=new Wkt.Wkt;wkt.fromObject(rect),bboxLayer.clearLayers(),bboxLayer.addLayer(rect),bboxLayer.wkt=wkt.write(),opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")}},setBounds=function(e){opStateService.setBounds(e.target.getBounds())},initializeMap=function(){$log.log("Starting up opMapController...");for(var initialBaseLayer,baseLayers={},i=0;i<opConfig.leafletLayers.length;i++){var layer=opConfig.leafletLayers[i];layer.params.zIndex=i,layer.params.type&&"wmts"===layer.params.type.toLowerCase()?baseLayers[layer.prettyName]=L.tileLayer(layer.url,{z:"0"}):baseLayers[layer.prettyName]=L.tileLayer.wms(layer.url,opWebMapService.getLeafletWmsBasemapParams(layer.name,layer.params)),initialBaseLayer||(initialBaseLayer=baseLayers[layer.prettyName])}map=L.map("map",opConfig.leafletOptions),initialBaseLayer.addTo(map),layerControl=L.control.layers(baseLayers).addTo(map),opStateService.setLeafletMapCRS(opConfig.leafletOptions.crs.code),opStateService.setLeafletMap(map),opStateService.setLayerControl(layerControl),bboxLayer=L.featureGroup().addTo(map),map.getFilterBounds=function(){return bboxLayer.wkt},bboxLayer.getBounds().isValid(),checkForMapBoundsState(),checkForBBoxBoundsState(),L.control.mousePosition({position:"bottomright",emptyString:"&nbsp;",valFormatter:function(pos){var latLng=opCoordinateConversionService.prepForDDBroadcast(pos.lat,pos.lng),ns=latLng.dd[0]>0?" N":" S",ew=latLng.dd[1]>0?" E":" W";return(("    "+pos.lat.toFixed(3)).slice(-7)+ns+", "+("    "+pos.lng.toFixed(3)).slice(-8)+ew).replace(/ /g,"&nbsp;")}}).addTo(map),legendControl=L.control.layerLegend(),legendControl.addTo(map),legendControl.updateLegend();var drawControl=new L.Control.Draw({edit:{featureGroup:bboxLayer,edit:!1},draw:{polyline:!1,marker:!1,polygon:{shapeOptions:{color:"#ffd800",weight:2}},rectangle:{shapeOptions:{color:"#ffd800",weight:2}},circle:{shapeOptions:{color:"#ffd800",weight:2}}}});map.addControl(drawControl),map.on("draw:created",function(){$rootScope.$broadcast("manual-draw-started")}),map.on("moveend",setBounds);var clearDrawings=function(){bboxLayer.clearLayers(),bboxLayer.wkt="",opPopupWindow.broadcast(opStateService.getResultsWindow(),"mapBoundsChanged"),opStateService.setAttributeBBox(),$rootScope.$broadcast("mapBoundsChanged")};$scope.$on("drawClear",function(){clearDrawings()}),map.on("draw:deleted",function(){clearDrawings()}),map.on("draw:drawstart",function(){bboxLayer.clearLayers()}),map.on("draw:created",function(e){var layer=e.layer,wkt=new Wkt.Wkt;if(layer._mRadius){var origin=layer.getLatLng(),radius=layer.getRadius(),polyCircle=createCirclePoly(origin.lat,origin.lng,radius);wkt.fromObject(polyCircle);var circleString="circle:"+origin.lat+","+origin.lng+","+radius;opStateService.setAttributeBboxPolyCircle(circleString)}else wkt.read(JSON.stringify(layer.toGeoJSON())),opStateService.setAttributeBBox(layer.getBounds());bboxLayer.addLayer(layer),bboxLayer.wkt=wkt.write();var results=opStateService.getResultsWindow();results&&!results.closed&&opPopupWindow.broadcast(results,"mapBoundsChanged"),$rootScope.$broadcast("mapBoundsChanged")}),map.on("move",function(){$rootScope.$broadcast("map-changed")})};$rootScope.$on("map-state-updated",function(){checkForMapBoundsState(),checkForBBoxBoundsState()}),$rootScope.$on("layer-selection-changed",function(event,layers){var legends=[];angular.forEach(layers,function(layer){var splitLayer=layer.split(":"),serverName=splitLayer[0],layerName=splitLayer[1]+":"+splitLayer[2],legendGraphicUrl=opWebMapService.getLegendGraphicUrl(serverName,layerName);$log.log("identified legend url: "+legendGraphicUrl),legends.push(legendGraphicUrl)}),legendControl.updateLegend(legends)}),$rootScope.$on("bounds-text-updated",function(event,boundsString){var bounds=boundsString.split(","),leafletBounds=[[bounds[1],bounds[0]],[bounds[3],bounds[2]]];redrawRect(leafletBounds)}),$rootScope.$on("bounds-current-bounds",function(){opStateService.setAttributeBBox(map.getBounds()),drawCurrentBounds()}),$rootScope.$on("bounds-country-bounds",function(event,geoJsonCountry){drawCountry(geoJsonCountry)}),$rootScope.$on("bounds-file-bounds",function(event,bounds){drawFileBounds(bounds)}),$rootScope.$on("remove-country-bounds",function(event,bounds){removeCountryDraw(bounds)}),$rootScope.$on("remove-country-selections",function(){bboxLayer.clearLayers(),drawnCountries=[]}),$rootScope.$on("latest-data-button-zoom",function(event,layer){var southWest=L.latLng(layer.southBbox,layer.westBbox),northEast=L.latLng(layer.northBbox,layer.eastBbox),bounds=L.latLngBounds(southWest,northEast);map.fitBounds(bounds,{maxZoom:5})}),L.Util.VincentyConstants={a:6378137,b:6356752.3142,f:1/298.257223563},initializeMap()}]),angular.module("opApp").directive("opMap",function(){"use strict";return{scope:{},restrict:"E",templateUrl:"modules/map/opMap.html"}}),angular.module("opApp").service("opExportService",["opConfig","opFilterService","opStateService",function(opConfig,opFilterService,opStateService){"use strict";this.createKmlExportRequest=function(layer,startTime,stopTime,spatialBounds){var server=opStateService.getServer(layer.server),wmsVersion=server.wmsVersion,filters=opFilterService.createWmsIntersectsFilterRequestForLayer(layer,startTime,stopTime,spatialBounds);return angular.extend(filters,{layers:layer.workspace+":"+layer.name,version:wmsVersion,mode:"download"})};var createWfsExportRequest=function(outputFormat,layer,startTime,stopTime,spatialBounds){var server=opStateService.getServer(layer.server),wfsVersion=server.wfsVersion,filters=opFilterService.createWfsIntersectsFilterRequestForLayer(layer,startTime,stopTime,spatialBounds);return angular.extend(filters,{version:wfsVersion,request:"GetFeature",typeName:layer.workspace+":"+layer.name,outputFormat:outputFormat})};this.createCsvExportRequest=function(layer,startTime,stopTime,spatialBounds){return createWfsExportRequest("csv",layer,startTime,stopTime,spatialBounds)},this.createShapefileExportRequest=function(layer,startTime,stopTime,spatialBounds){return createWfsExportRequest("SHAPE-ZIP",layer,startTime,stopTime,spatialBounds)},this.createGeoRSSExportRequest=function(layer,startTime,stopTime,spatialBounds){return createWfsExportRequest("GeoRSS",layer,startTime,stopTime,spatialBounds)}}]),angular.module("opApp").service("opFilterService",["opStateService",function(opStateService){"use strict";var TIME_FORMAT="YYYY-MM-DDTHH:mm:ss";this.createWmsTimeFilter=function(startTime,stopTime){var startString=startTime.format(TIME_FORMAT)+"Z",stopString=stopTime.format(TIME_FORMAT)+"Z";return startString+"/"+stopString},this.createCqlTemporalFilter=function(startField,stopField,startTime,stopTime){var cqlFilter,startString=startTime.format(TIME_FORMAT)+"Z",stopString=stopTime.format(TIME_FORMAT)+"Z";return cqlFilter=startField===stopField?startField+" BETWEEN "+startString+" AND "+stopString:startField+" >= "+startString+" AND "+stopField+" <= "+stopString},this.createCqlSpatialIntersectsFilter=function(geomField,WKT){var spatialFilter=null;return angular.isDefined(WKT)&&null!==WKT&&(spatialFilter='INTERSECTS("'+geomField+'", '+WKT+")"),spatialFilter},this.createCqlSpatialContainsFilter=function(geomField,WKT){var spatialFilter=null;return angular.isDefined(WKT)&&null!==WKT&&(spatialFilter='CONTAINS("'+geomField+'", '+WKT+")"),spatialFilter},this.createCqlSpatialBBoxFilter=function(geomField,westSouthEastNorthBounds,crs){var spatialFilter=null,crsOption="";return crs&&(crsOption=", '"+crs+"'"),angular.isDefined(westSouthEastNorthBounds)&&null!==westSouthEastNorthBounds&&(spatialFilter='BBOX("'+geomField+'",'+westSouthEastNorthBounds+crsOption+")"),spatialFilter},this.createWmsFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds){var response={},cqlFilters=[];null!==layer.fields.time&&angular.isDefined(layer.fields.time)&&(angular.isDefined(layer.fields.time.wmsTime)&&layer.fields.time.wmsTime===!0?response.time=this.createWmsTimeFilter(startTime,stopTime):cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime)));var spatialFilter=null;null!==layer.fields.geometry&&angular.isDefined(layer.fields.geometry)&&(spatialFilter=this.createCqlSpatialIntersectsFilter(layer.fields.geometry.field,spatialBounds)),null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response},this.createWmsBboxFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds,crs){var response={},cqlFilters=[];null!==layer.fields.time&&(angular.isDefined(layer.fields.time.wmsTime)&&layer.fields.time.wmsTime===!0?response.time=this.createWmsTimeFilter(startTime,stopTime):cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime)));var spatialFilter=this.createCqlSpatialBBoxFilter(layer.fields.geometry.field,spatialBounds,crs);null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response},this.createWmsIntersectsFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds){var response={},cqlFilters=[];null!==layer.fields.time&&(angular.isDefined(layer.fields.time.wmsTime)&&layer.fields.time.wmsTime===!0?response.time=this.createWmsTimeFilter(startTime,stopTime):cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime)));var spatialFilter=this.createCqlSpatialIntersectsFilter(layer.fields.geometry.field,spatialBounds);null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response},this.createWfsFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds){var cqlFilters=[],response={};null!==layer.fields.time&&cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime));var spatialFilter=this.createCqlSpatialIntersectsFilter(layer.fields.geometry.field,spatialBounds);null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response},this.createWfsBBoxFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds,crs){var cqlFilters=[],response={};null!==layer.fields.time&&cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime));var spatialFilter=this.createCqlSpatialBBoxFilter(layer.fields.geometry.field,spatialBounds,crs);null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response},this.createWfsIntersectsFilterRequestForLayer=function(layer,startTime,stopTime,spatialBounds){var cqlFilters=[],response={};null!==layer.fields.time&&cqlFilters.push(this.createCqlTemporalFilter(layer.fields.time.start.field,layer.fields.time.stop.field,startTime,stopTime));var spatialFilter=this.createCqlSpatialIntersectsFilter(layer.fields.geometry.field,spatialBounds);null!==spatialFilter&&cqlFilters.push(spatialFilter);var customFilter=opStateService.getCustomFilterByLayer(layer.workspace+":"+layer.name);return null!==customFilter&&cqlFilters.push(customFilter),cqlFilters.length>0&&(response.cql_filter=cqlFilters.join(" AND ")),response}}]),angular.module("opApp").service("opLayerService",["$q","localStorageService","opConfig","opWebMapService","opWebFeatureService","opFilterService","opStateService","$log",function($q,localStorageService,opConfig,opWebMapService,opWebFeatureService,opFilterService,opStateService,$log){"use strict";this.localStorageLayersKey="opApp.layersCache",this.localStorageLayerFieldsKey="opApp.layerTimes";var determineTimeField=function(validFields,availableFields){for(var timeField=null,i=0;i<validFields.length;i++)for(var j=0;j<availableFields.length;j++)if(availableFields[j].name.toLowerCase().indexOf(validFields[i])>-1&&opConfig.timeFieldTypes.indexOf(availableFields[j].type)>-1)return availableFields[j].name;return timeField},determineGeometryField=function(availableFields){for(var geomField=null,i=0;i<availableFields.length;i++)if(0===availableFields[i].type.indexOf(opConfig.geomFieldNamespace)){geomField={field:availableFields[i].name,type:availableFields[i].type};break}return geomField};this.setFieldCache=function(layer,fields){var cacheLayer={name:layer.name,workspace:layer.workspace,fields:fields,cachedOn:moment(new Date).unix()},timeCache=localStorageService.get(this.localStorageLayerFieldsKey);null===timeCache&&(timeCache=[]);for(var i=0;i<timeCache.length;i++)if(timeCache[i].name===cacheLayer.name&&timeCache[i].workspace===cacheLayer.workspace)return timeCache[i]=cacheLayer,void localStorageService.set(this.localStorageLayerFieldsKey,timeCache);timeCache.push(cacheLayer),localStorageService.set(this.localStorageLayerFieldsKey,timeCache)},this.clearCache=function(){localStorageService.set(this.localStorageLayersKey,null),localStorageService.set(this.localStorageLayerFieldsKey,null)},this.clearCacheForServer=function(serverNum){localStorageService.set(this.localStorageLayersKey+serverNum,null),localStorageService.set(this.localStorageLayerFieldsKey,null)},this.getFields=function(layer){var deferred=$q.defer(),self=this,fieldsCache=localStorageService.get(self.localStorageLayerFieldsKey),currentUnix=moment(new Date).unix();if(null!==fieldsCache)for(var i=0;i<fieldsCache.length;i++){var cacheLayer=fieldsCache[i];if(layer.name===cacheLayer.name&&layer.workspace===cacheLayer.workspace&&layer.server===cacheLayer.server){$log.log("Found layer and workspace match in cache... does it fall within cache period?");var diff=Math.abs(currentUnix-cacheLayer.cachedOn);if($log.log("Seconds since last layer cache: "+diff),diff<opConfig.layerCachePeriod)return deferred.resolve(cacheLayer.fields),deferred.promise}}return opWebFeatureService.extractFieldsAndTypes(layer.server,layer.name,layer.workspace).then(function(fields){layer.fields.list=fields;var startField=determineTimeField(opConfig.timeFields.start,fields),stopField=determineTimeField(opConfig.timeFields.stop,fields),geometry=determineGeometryField(fields);null===geometry?$log.log("Unable to determine geometry field.  Layer "+layer.name+" will not be queryable."):layer.fields.geometry=geometry;var time;null!==layer.fields.time&&null!==startField&&null!==stopField?(angular.isDefined(layer.fields.time)&&null!==layer.fields.time||(layer.fields.time={start:{},stop:{},wmsTime:!1}),time={start:{field:startField,value:layer.fields.time.start.value},stop:{field:stopField,value:layer.fields.time.stop.value},wmsTime:angular.isDefined(layer.fields.time.wmsTime)&&layer.fields.time.wmsTime},$log.log(time),layer.fields.time=time):$log.log("Unable to determine time fields.  Layer "+layer.name+" is not time enabled."),self.setFieldCache(layer,layer.fields),deferred.resolve(layer.fields)},function(reason){self.setFieldCache(layer,layer.fields),layer.raster=!0,$log.log("Unable to determine field types: "+reason),deferred.resolve(reason),$log.log("Assuming raster layer.")}),deferred.promise},this.isDataPresent=function(layer,startBound,endBound,spatialWKT){var filters=opFilterService.createWfsFilterRequestForLayer(layer,startBound,endBound,spatialWKT);return opWebFeatureService.isDataPresent(layer.server,layer.name,layer.workspace,layer.fields,filters)},this.getFilteredJsonFeatures=function(layer,filters,srs){return opWebFeatureService.getFilteredJsonFeatures(layer.server,layer.name,layer.workspace,layer.fields,filters,{maxFeatures:opConfig.wfsFeatureLimiter,srsName:srs})},this.getLayers=function(force,serverName){var deferred=$q.defer(),self=this,serverNum=opStateService.getServerNumByName(serverName),layersCached=localStorageService.get(self.localStorageLayersKey+serverNum),currentUnix=moment(new Date).unix();return!force&&void 0!==layersCached&&null!==layersCached&&Math.abs(currentUnix-layersCached.cachedOn)<opConfig.cachePeriod?($log.log("Seconds since last layer cache: "+Math.abs(currentUnix-layersCached.cachedOn)),$log.log("Thanks for not forcing me to re-request layers, since they are in local storage..."),deferred.resolve(layersCached.layers)):(this.clearCacheForServer(serverNum),opWebMapService.getCapabilities(serverName).then(function(result){if(null!==result){for(var layers=[],xmlDoc=$.parseXML(result.data),nodes=xmlDoc.getElementsByTagName("Layer"),i=1;i<nodes.length;i++){for(var layer={fields:{time:null,geometry:null,list:[]}},j=0;j<nodes.item(i).childNodes.length;j++){var node=nodes.item(i).childNodes.item(j);if(1===node.nodeType)switch(layer.server=serverName,node.nodeName){case"Name":layer.name=node.textContent;var index=layer.name.indexOf(":");if(index>-1){var nameSplit=layer.name.split(":");layer.workspace=nameSplit[0],layer.name=nameSplit[1]}break;case"Title":layer.title=node.textContent;break;case"Abstract":layer["abstract"]=node.textContent;break;case"KeywordList":for(var keywords=[],k=0;k<node.childNodes.length;k++){var keywordNode=node.childNodes.item(k);1===keywordNode.nodeType&&keywords.push(keywordNode.textContent)}layer.tags=keywords;break;case"Dimension":for(var a=0;a<node.attributes.length;a++)if("time"===node.attributes[a].textContent){var time=node.textContent.split("/");layer.fields.time={start:{value:time[0]},stop:{value:time[1]},wmsTime:!0}}break;case"EX_GeographicBoundingBox":for(var b=0;b<node.childNodes.length;b++){var childNode=node.childNodes.item(b);"westBoundLongitude"===childNode.nodeName&&(layer.westBbox=childNode.textContent),"eastBoundLongitude"===childNode.nodeName&&(layer.eastBbox=childNode.textContent),"southBoundLatitude"===childNode.nodeName&&(layer.southBbox=childNode.textContent),"northBoundLatitude"===childNode.nodeName&&(layer.northBbox=childNode.textContent)}}}void 0!==layer.workspace&&layers.push(layer)}var cachedDate=moment(new Date).unix(),layersCache={layers:layers,cachedOn:cachedDate};localStorageService.set(self.localStorageLayersKey+serverNum,layersCache),deferred.resolve(layers)}else{var error="Unable to retrieve server capabilities.";$log.log(error),deferred.reject(error)}},function(reason){var error="Unable to retrieve server capabilities."+reason;$log.log(error),deferred.reject(error)})),deferred.promise}}]),angular.module("opApp").service("opWebFeatureService",["$q","$http","opConfig","opStateService","$log","opPopupWindow",function($q,$http,opConfig,opStateService,$log,opPopupWindow){"use strict";this.extractFieldsAndTypes=function(serverName,name,workspace){var error,deferred=$q.defer();return this.describeFeatureType(serverName,name,workspace).then(function(result){if(null!==result){var xmlDoc=$.parseXML(result.data),nodes=xmlDoc.getElementsByTagNameNS("*","complexType");if(nodes&&nodes.length>0&&nodes.item(0).hasAttributes()){var typeNode=nodes.item(0);if(typeNode.attributes.name.textContent.replace("Type","")===name){for(var fields=[],elementNodes=typeNode.childNodes[1].childNodes[1].childNodes[1].childNodes,i=0;i<elementNodes.length;i++){var node=elementNodes.item(i);if(1===node.nodeType&&"xsd:element"===node.nodeName){var field={};field.name=node.attributes.name.textContent,field.type=node.attributes.type.textContent,fields.push(field)}}deferred.resolve(fields)}}else error="Unable to parse DescribeFeatureType response: "+result.data,$log.log(error),deferred.reject(error)}else error="Null response received from DescribeFeatureType",$log.log(error),deferred.reject(error)},function(reason){error="Failure in DescribeFeatureType request for start/stop field names: "+reason,$log.log(error),deferred.reject(error)}),deferred.promise},this.describeFeatureType=function(serverName,name,workspace){var server=opStateService.getServer(serverName),wfsVersion=server.wfsVersion,ajaxUrl=server.ajaxUrl+"/wfs",deferred=$q.defer(),typeName=workspace+":"+name,params={version:wfsVersion,request:"DescribeFeatureType",typeName:typeName};return $http.get(ajaxUrl,{params:params}).then(function(result){$log.log("Successfully retrieved DescribeFeatureType result."),deferred.resolve(result)},function(reason){var error="Error retrieving DescribeFeatureType result: "+reason;$log.log(error),deferred.reject(error)}),deferred.promise},this.getFeature=function(serverName,name,workspace,params){var deferred=$q.defer(),server=opStateService.getServer(serverName),wfsVersion=server.wfsVersion,ajaxUrl=server.ajaxUrl+"/wfs",typeName=workspace+":"+name,serviceParams=angular.extend({version:wfsVersion,request:"GetFeature",typeName:typeName},params);return $http({method:"POST",url:ajaxUrl,headers:{"Content-Type":"application/x-www-form-urlencoded"},transformRequest:function(obj){var str=[];for(var p in obj)obj.hasOwnProperty(p)&&str.push(encodeURIComponent(p)+"="+encodeURIComponent(obj[p]));return str.join("&")},data:serviceParams}).then(function(result){$log.log("Successfully retrieved GetFeature result."),deferred.resolve(result)},function(reason){$log.log("Error retrieving GetFeature result"),deferred.reject(reason)}),deferred.promise},this.getFeaturesAsJson=function(serverName,name,workspace,fields,params){for(var deferred=$q.defer(),server=opStateService.getServer(serverName),wfsOutputFormat=server.wfsOutputFormat,allowedFields=[],i=0;i<fields.list.length;i++)-1===fields.list[i].type.indexOf(opConfig.geomFieldNamespace)&&allowedFields.push(fields.list[i].name);return params=angular.extend(params,{outputFormat:wfsOutputFormat}),this.getFeature(serverName,name,workspace,params).then(function(result){var xmlDoc=$.parseXML(result.data),json={type:"FeatureCollection",features:[]},nodes=xmlDoc.getElementsByTagNameNS("*","featureMembers");if(1===nodes.length){for(var i=0;i<nodes[0].childNodes.length;i++){for(var feature={type:"Feature",id:nodes[0].childNodes[i].attributes["gml:id"].textContent,properties:{}},j=0;j<nodes[0].childNodes[i].childNodes.length;j++){
var node=nodes[0].childNodes[i].childNodes[j];1===node.nodeType&&allowedFields.indexOf(node.localName)>-1&&(feature.properties[node.localName]=node.textContent)}json.features.push(feature)}deferred.resolve(json)}else{if(result.data.indexOf("ServiceException")>-1){var errorString=xmlDoc.getElementsByTagNameNS("*","ServiceException")[0].childNodes[0].textContent,logError="GeoServer returned an exception (error) on this layer: "+name+". Error returned: "+errorString+". Please have someone investigate this layer.";opPopupWindow.broadcast(opStateService.getResultsWindow(),"queryWfsResult",{error:logError}),$log.log(logError),deferred.resolve(result)}$log.log(params);var error="Unable to find any features in "+workspace+":"+name+" with params: "+JSON.stringify(params);$log.log(error),deferred.resolve(json)}},function(reason){deferred.reject(reason)}),deferred.promise},this.findTimeMin=function(serverName,name,workspace,field){return this.findTimeMinMax(serverName,name,workspace,field,"A")},this.findTimeMax=function(serverName,name,workspace,field){return this.findTimeMinMax(serverName,name,workspace,field,"D")},this.isDataPresent=function(serverName,name,workspace,fields,filter){var deferred=$q.defer();return this.getFilteredJsonFeatures(serverName,name,workspace,fields,filter,{maxFeatures:1}).then(function(result){result.features&&1===result.features.length&&deferred.resolve(!0),deferred.resolve(!1)},function(reason){$log.log("Error attempting to determine if data is present: "+reason),deferred.resolve(!1)}),deferred.promise},this.getFilteredJsonFeatures=function(serverName,name,workspace,fields,filters,extendedParams){var params=filters;return angular.isDefined(extendedParams)&&null!==extendedParams&&(params=angular.extend(params,extendedParams)),this.getFeaturesAsJson(serverName,name,workspace,fields,params)},this.findTimeMinMax=function(serverName,name,workspace,field,direction){var deferred=$q.defer(),params={maxFeatures:1,sortby:field+" "+direction.toUpperCase()};return this.getFeature(serverName,name,workspace,params).then(function(result){var xmlDoc=$.parseXML(result.data),nodes=xmlDoc.getElementsByTagNameNS("*",field);if(nodes.length>0){for(var node=null,i=0;i<nodes.length;i++)nodes[i].prefix===workspace&&(node=nodes[i].textContent);null!==node?deferred.resolve(node):deferred.reject("Unable to find expected field in GetFeature XML response.")}else{var error="Unable to find value of expected field: "+field;error+=" This is likely a result of layer having no records.",$log.log(error),deferred.reject(error)}},function(reason){$log.log("Unable to identify a min/max time for field "+field),deferred.reject(reason)}),deferred.promise}}]),angular.module("opApp").service("opWebMapService",["$q","$http","opConfig","opStateService","$log",function($q,$http,opConfig,opStateService,$log){"use strict";this.getCapabilities=function(serverName){var deferred=$q.defer(),server=opStateService.getServer(serverName),version=server.wmsVersion;$log.log("Requesting capabilities from server "+server.name);var params={version:version,request:"GetCapabilities"},url=server.ajaxUrl+"/wms";return server.getCapabilitiesUrl&&(url=server.getCapabilitiesUrl),$http.get(url,{params:params}).then(function(result){$log.log("Successfully retrieved GetCapabilities result."),deferred.resolve(result)},function(reason){var error="Error retrieving GetCapabilities result: "+reason.data;$log.log(error),deferred.reject(reason)}),deferred.promise},this.getLeafletWmsParams=function(serverName,name,workspace,params){var server=opStateService.getServer(serverName),workspacedLayer=workspace+":"+name;return angular.extend({transparent:!0,format:"image/png",version:server.wmsVersion,layers:workspacedLayer,maxfeatures:opConfig.wmsFeatureLimiter},params)},this.getLeafletWmsBasemapParams=function(layerName,params){return angular.extend({format:"image/jpeg",layers:layerName},params)},this.getLegendGraphicUrl=function(serverName,layerName,legendOptions){var server=opStateService.getServer(serverName),options=angular.extend({forceLabels:"on",fontName:"Helvetica",fontAntiAliasing:!0,fontSize:12,fontColor:"0xFFFFFF"},legendOptions),optionsArray=[];angular.forEach(options,function(value,key){optionsArray.push(key+":"+value)});var params={version:server.wmsVersion,request:"GetLegendGraphic",format:"image/png",transparent:!0,layer:layerName,legend_options:optionsArray.join(";")},url=server.ajaxUrl+"/wms";return url+"?"+$.param(params)}}]),angular.module("opApp").directive("opResults",function(){"use strict";return{restrict:"EA",templateUrl:"modules/results/opResults.html",controller:["$scope","$rootScope","$window","$interval","$timeout","$log",function($scope,$rootScope,$window,$interval,$timeout,$log){$scope.model={currentTab:null,loading:!0,currentData:[],layers:[],kmlUrl:"",csvUrl:"",shpUrl:"",rssUrl:"",error:""},$scope.selectLayer=function(name){$scope.model.currentTab!==name&&$scope.updateResults(name)},$scope.updateResults=function(name){$scope.model.currentTab=name,$scope.model.currentData=[],$scope.model.loading=!0,$window.opener.broadcast("queryWfs",name)},$scope.$on("updateFilters",function(e,val){$scope.model.layers=val,$scope.model.currentTab&&_.contains(val,$scope.model.currentTab)||$scope.selectLayer(val[0])}),$scope.$on("queryWfsResult",function(e,data){$scope.model.currentTab===data.layer&&($scope.model.loading=!1,$scope.model.kmlUrl=data.kmlUrl,$scope.model.csvUrl=data.csvUrl,$scope.model.shpUrl=data.shpUrl,$scope.model.rssUrl=data.rssUrl,$scope.model.error=data.error,$scope.model.currentData=_.map(data.features,"properties"))}),$scope.$on("mapBoundsChanged",function(){$scope.updateResults($scope.model.currentTab)}),$timeout(function(){return $interval(function(){return $window.opener.resultsHeartbeat&&$window.opener.resultsHeartbeat(window)},2500),$window.opener.resultsInit&&$window.opener.resultsInit(window)},2500),$window.broadcast=function(){$log.log(arguments);var args=arguments;$timeout(function(){$rootScope.$broadcast.apply($scope,args)})}}]}}),angular.module("opApp",["ngResource","ngSanitize","ngAnimate","ui.bootstrap"]),angular.module("opApp").directive("opResultsTable",["$timeout",function($timeout){"use strict";return"undefined"==typeof window.ColumnsPlugins&&(window.ColumnsPlugins={}),window.ColumnsPlugins.resizeable={init:function(){this.columnData={data:{},set:function(key,val){this.data[key]=val},get:function(key){return this.data[key]}}},create:function(){var $this=this;setTimeout(function(){$($this.$el).find("table").resizableColumns({store:$this.columnData,syncHandlers:!1})},0)}},{restrict:"EA",templateUrl:"modules/results/opResultsTable.html",scope:{opModel:"=",loading:"=",error:"="},link:function(scope,element){scope.noData=!0;var viewTable=null;element.on("click",".clear",function(){angular.element(".ui-table-search").val("").keyup()}),scope.$watch("opModel",function(){viewTable&&viewTable.destroy(),scope.opModel.length?(scope.noData=!1,viewTable=element.find(".data-table").columns({data:scope.opModel,paginating:!1,template:'{{#search}}<div class="ui-columns-search"> <input class="ui-table-search" placeholder="Filter Results" type="text" name="query" data-columns-search="true" value="{{query}}" required /><div class="clear">&times;</div></div></div>{{/search}} {{#table}}<div class="ui-columns-table" data-columns-table="true"> <table class="display table table-striped table-bordered table-hover"> <thead> {{#headers}}   {{#sortable}} <th class="ui-table-sortable" data-columns-sortby="{{key}}"  data-resizable-column-id="{{header}}">{{header}}</th> {{/sortable}}  {{#notSortable}} <th data-resizable-column-id="{{header}}">{{header}}</th> {{/notSortable}}  {{#sortedUp}} <th class="ui-table-sort-up ui-table-sortable" data-columns-sortby="{{key}}" data-resizable-column-id="{{header}}">{{header}} <span class="ui-arrow">&#x25B2;</span></th> {{/sortedUp}}  {{#sortedDown}} <th class="ui-table-sort-down ui-table-sortable" data-columns-sortby="{{key}}" data-resizable-column-id="{{header}}">{{header}} <span class="ui-arrow">&#x25BC;</span></th> {{/sortedDown}}    {{/headers}} </thead> <tbody> {{#rows}} {{{.}}} {{/rows}} </tbody>  </table> </div>{{/table}}'}),$timeout(function(){angular.element(".ui-table-search").placeholder()})):scope.noData=!0})}}}]),angular.module("opApp").controller("opSidebarController",["$scope","opAnnouncementsService",function($scope,opAnnouncementsService){"use strict";$scope.announcementsEnabled=opAnnouncementsService.updated,$scope.$on("announcementsChanged",function(e,messages,enabled){$scope.announcementsEnabled=enabled})}]),angular.module("opApp").directive("opSidebar",function(){"use strict";return{restrict:"E",templateUrl:"modules/sidebar/opSidebar.html",controller:"opSidebarController",controllerAs:"sidebar"}}),angular.module("opApp").factory("opPopupWindow",["$q","$window",function($q,$window){"use strict";var queryWindowHandle;return{on:function(name,callback){$window[name]=callback},showPopup:function(url,initName,ret){var promise=$q.defer();return initName&&($window[initName]=function(){return promise.resolve(queryWindowHandle,Array.prototype.slice.apply(arguments)),ret}),!angular.isDefined(queryWindowHandle)||queryWindowHandle.closed?queryWindowHandle=$window.open(url,"newwindow_id","height=600,width=1200, resizable=yes, toolbar=no, menubar=no, scrollbars=yes, location=no, directories=no, status=no"):queryWindowHandle.focus(),promise.promise},broadcast:function(queryWindow){var promise=$q.defer();return queryWindow&&Object.keys(queryWindow).length>0&&!queryWindow.closed?promise.resolve(queryWindow.broadcast.apply(this,Array.prototype.slice.apply(arguments,[1]))):promise.reject(),promise.promise}}}]),angular.module("opApp").controller("opLayerController",["$rootScope","$scope","$location","$timeout","$window","moment","toaster","L","opConfig","opLayerService","opWebMapService","opWebFeatureService","opStateService","opFilterService","opExportService","opPopupWindow","$log",function($rootScope,$scope,$location,$timeout,$window,moment,toaster,L,opConfig,opLayerService,opWebMapService,opWebFeatureService,opStateService,opFilterService,opExportService,opPopupWindow,$log){"use strict";String.prototype.hashCode=function(){var hash=0,length=this.length;if(0===length)return hash;for(var i=0;length>i;i++){var chr=this.charCodeAt(i);hash=(hash<<5)-hash+chr,hash&=hash}return hash},$scope.onTransparencyChange=function(layer){if(layer.active){var value=.01*layer.transparencySlider.value;$scope.setTransparency(layer,value)}},$scope.setTransparency=function(layer,value){layer.mapHandle.setOpacity(value)};var layerLoadCompleteHandler=function(layer){layer.timeout&&$timeout.cancel(layer.timeout),layer.timeout=$timeout(function(){layer.loading=!1,$log.log("Tiles loaded for layer "+layer.name)},0,!0)},layerLoadStartHandler=function(layer){layer.timeout&&$timeout.cancel(layer.timeout),layer.timeout=$timeout(function(){layer.loading=!0,$log.log("Loading tiles for layer "+layer.name)},0,!0)},updateLayerLoadComplete=function(e){for(var i=0;i<$scope.layers.length;i++){var layer=$scope.layers[i];if(layer.mapHandle===e.target){layerLoadCompleteHandler(layer);break}}},updateLayerLoadStart=function(e){for(var i=0;i<$scope.layers.length;i++){var layer=$scope.layers[i];if(layer.mapHandle===e.target){layerLoadStartHandler(layer);break}}},removeLayer=function(layer){layer.params=null,layer.mapHandle.off("loading",updateLayerLoadStart),layer.mapHandle.off("load",updateLayerLoadComplete),$scope.map.removeLayer(layer.mapHandle),layer.mapHandle=null,opStateService.removeDataset(layer.server+":"+layer.workspace+":"+layer.name),opPopupWindow.broadcast(opStateService.getResultsWindow(),"updateFilters",_.filter($scope.layers,function(l){return _.contains(opStateService.getDatasets(),l.server+":"+l.workspace+":"+l.name)}))},LayerGroup=function(tag){var self={},_tag=tag,_layers=[];return self.turnServerOff=function(serverName){for(var i=_layers.length;i--;)_layers[i].server===serverName&&(_layers[i].active&&removeLayer(_layers[i]),$scope.layers.splice($scope.layers.indexOf(_layers[i]),1),_layers.splice(i,1));0===_layers.length&&(_tag=null)},self.getTag=function(){return _tag},self.areAnyActive=function(){for(var i=0;i<_layers.length;i++)if(angular.isDefined(_layers[i].active)&&_layers[i].active)return!0;return!1},self.areAllActive=function(){for(var i=0;i<_layers.length;i++)if(!angular.isDefined(_layers[i].active)||_layers[i].active===!1)return!1;return!0},self.toggleChecked=function(){var setCheckedState=!0;self.areAllActive()&&(setCheckedState=!1);for(var i=0;i<_layers.length;i++)_layers[i].active!==setCheckedState&&($scope.datasetStateChanged(_layers[i].uid),_layers[i].active=setCheckedState)},self.getActiveLayers=function(){for(var result=[],i=0;i<_layers.length;i++)_layers[i].active&&result.push(_layers[i])},self.getLayers=function(){return _layers},self.addLayer=function(layer){_layers.push(layer)},self},LayerGroups=function(){var self={},_groups=[];return self.turnServerOff=function(serverName){for(var i=_groups.length;i--;)_groups[i].turnServerOff(serverName),0===_groups[i].getLayers().length&&_groups.splice(i,1)},self.addLayer=function(layer,tag){var group=self.getGroupByTag(tag);group||(group=new LayerGroup(tag),_groups.push(group)),group.addLayer(layer)},self.getGroups=function(){return _groups},self.getGroupTags=function(){for(var tags=[],i=0;i<_groups.length;i++)tags.push(_groups[i].getTag());return tags},self.getGroupByTag=function(tag){for(var group,i=0;i<_groups.length;i++)_groups[i].getTag()===tag&&(group=_groups[i]);return group},self.getCount=function(){return _groups.length},self};$scope.popOverHtml="",$scope.isOpen=!1,$scope.DEBUG=opStateService.isDebug(),$scope.layerExpanded=!0,$scope.filter="",$scope.tags=[],$scope.layersLoading=!1,$scope.layers=[],$scope.layerGroups=null,$scope.map=null,$scope.leafletGroup=null,$scope.layerControl=null;var zIndex=50,maxZIndex=100,getLayerByUid=function(layers,uid){for(var i=0;i<layers.length;i++)if(layers[i].uid===uid)return layers[i]},arrayIntersect=function(a,b){for(var i=0;i<a.length;i++)for(var j=0;j<b.length;j++)if(a[i].toLowerCase()===b[j].toLowerCase())return!0;return!1},checkTagMatch=function(tags,tag){for(var i=0;i<tags.length;i++)if(tag.toLowerCase()===tags[i].toLowerCase())return!0;return!1},groupLayers=function(layers,tags){for(var unrecognized=[],recognized=[],i=0;i<layers.length;i++)layers[i].tags&&arrayIntersect(layers[i].tags,tags)?recognized.push(layers[i]):unrecognized.push(layers[i]);for(i=0;i<tags.length;i++)for(var j=0;j<recognized.length;j++)checkTagMatch(recognized[j].tags,tags[i])&&$scope.layerGroups.addLayer(recognized[j],tags[i]);for(i=0;i<unrecognized.length;i++)$scope.layerGroups.addLayer(unrecognized[i],"UNCATEGORIZED")},applyLayerFilters=function(layer,startTime,stopTime){var params=opFilterService.createWmsFilterRequestForLayer(layer,startTime,stopTime);angular.isDefined(layer.params)&&null!==layer.params&&(layer.params===params||angular.isDefined(params.time)&&params.time===layer.params.time||angular.isDefined(params.cql_filter)&&params.cql_filter===layer.params.cql_filter)||(layer.params=params,layer.mapHandle.setParams(params),$scope.$broadcast("queryWfs",layer))},exportData=function(exportGenerator,layer,bounds,spatialBounds,url){if(angular.isDefined(layer.active)&&null!==layer.active&&layer.active){var params=exportGenerator(layer,bounds[0],bounds[1],spatialBounds);return url+"?"+$.param(params)}};$scope.$on("queryWfs",function(e,layer){var timeBounds=opStateService.getTimeBoundsFromTemporalFilter(),boundsAsWKT=$scope.map.getFilterBounds(),spatialBounds=boundsAsWKT;if(""!==boundsAsWKT&&angular.isDefined(boundsAsWKT)&&angular.isDefined(layer)&&angular.isDefined(layer.active)&&null!==layer.active&&layer.active&&layer.fields.geometry){var epsgCode=opStateService.getLeafletMapCRS(),filter=opFilterService.createWfsIntersectsFilterRequestForLayer(layer,timeBounds[0],timeBounds[1],spatialBounds),server=opStateService.getServer(layer.server);opLayerService.getFilteredJsonFeatures(layer,filter,epsgCode).then(function(result){result.data||(result.kmlUrl=exportData(opExportService.createKmlExportRequest,layer,timeBounds,spatialBounds,server.url+"/wms/kml"),result.csvUrl=exportData(opExportService.createCsvExportRequest,layer,timeBounds,spatialBounds,server.url+"/wfs"),result.shpUrl=exportData(opExportService.createShapefileExportRequest,layer,timeBounds,spatialBounds,server.url+"/wfs"),result.rssUrl=exportData(opExportService.createGeoRSSExportRequest,layer,timeBounds,spatialBounds,server.url+"/wfs"),result.layer=layer,opPopupWindow.broadcast(opStateService.getResultsWindow(),"queryWfsResult",result))},function(reason){$log.log(reason)})}else if(layer.raster){var logError="Is this layer a raster?  If so, no feature data is available.";opPopupWindow.broadcast(opStateService.getResultsWindow(),"queryWfsResult",{error:logError})}else opPopupWindow.broadcast(opStateService.getResultsWindow(),"queryWfsResult",{error:"nobbox"})}),$scope.$on("filters-updated",function(){for(var bounds=opStateService.getTimeBoundsFromTemporalFilter(),i=0;i<$scope.layers.length;i++){var layer=$scope.layers[i];angular.isDefined(layer.active)&&null!==layer.active&&layer.active&&null!==layer.fields.time&&applyLayerFilters(layer,bounds[0],bounds[1])}}),$scope.setFilter=function(filter){$scope.filter=filter},$scope.isLayerVisible=function(layerUid){var layer=getLayerByUid($scope.layers,layerUid);return"active"===$scope.filter?layer.active:!0},$scope.isHighestPriority=function(layerUid){var layer=getLayerByUid($scope.layers,layerUid),priority=opStateService.getServerNumByName(layer.server);if(0===priority)return!0;for(var matches=_.filter($scope.layers,function(otherLayer){return layer.server!==otherLayer.server&&layer.name===otherLayer.name&&layer.workspace===otherLayer.workspace?otherLayer:void 0}),i=0;i<matches.length;i++){var index=opStateService.getServerNumByName(matches[i].server);if(priority>index)return!1}return!0},$scope.isLayerDuped=function(layerUid){for(var layer=getLayerByUid($scope.layers,layerUid),i=0;i<$scope.layers.length;i++)if(layer.title===$scope.layers[i].title&&layer.server!==$scope.layers[i].server)return!0;return!1},$scope.isGroupVisible=function(groupTag){if(""===$scope.filter)return!0;if("active"===$scope.filter){var group=$scope.layerGroups.getGroupByTag(groupTag);return!(!group||!group.areAnyActive())}return groupTag===$scope.filter};var addLayer=function(layer){$scope.map.hasLayer(layer.mapHandle)||(layer.mapHandle.on("loading",updateLayerLoadStart),layer.mapHandle.on("load",updateLayerLoadComplete),$scope.map.addLayer(layer.mapHandle),opStateService.addDataset(layer.server+":"+layer.workspace+":"+layer.name),opPopupWindow.broadcast(opStateService.getResultsWindow(),"updateFilters",_.filter($scope.layers,function(l){return _.contains(opStateService.getDatasets(),l.server+":"+l.workspace+":"+l.name)})))};$scope.datasetStateChanged=function(layerUid){var layer=getLayerByUid($scope.layers,layerUid);if(!layer.active&&null!==layer.mapHandle&&void 0!==layer.mapHandle)return $log.log("disabling already enabled layer: '"+layer.name+"'"),void removeLayer(layer);$log.log("enabling layer: '"+layer.name+"'"),zIndex>=maxZIndex&&(zIndex=50);var server=opStateService.getServer(layer.server),wmsLayer=L.tileLayer.wms(server.url+"/wms",opWebMapService.getLeafletWmsParams(layer.server,layer.name,layer.workspace,{tileSize:512,zIndex:zIndex}));zIndex+=1,layer.mapHandle=wmsLayer,opLayerService.getFields(layer).then(function(result){layer.fields=result,result.time&&($log.log("Time fields identified. Start: '"+result.time.start.field+"', Stop: '"+result.time.stop.field+"'"),result.time.start.value&&result.time.stop.value?($log.log("Time values identified. Start: '"+result.time.start.value+"', Stop: '"+result.time.stop.value+"'"),layer.timeEnabled=!0):($log.log("Time values were not identified as layer is not configured for WMS time"),layer.timeEnabled=!1))},function(reason){$log.log("Couldn't identify time values for this layer... how embarrassing: "+reason),toaster.pop("note","Date/Time","Unable to detect time fields for layer '"+layer.title+"'.  Date/Time filtering will not be applied to this layer."),layer.timeEnabled=!1}).then(function(){var timeBounds=opStateService.getTimeBoundsFromTemporalFilter();applyLayerFilters(layer,timeBounds[0],timeBounds[1]),addLayer(layer),$rootScope.$broadcast("filters-updated")})};var clearLayers=function(){var leafletGroup=$scope.leafletGroup;if(null!==leafletGroup)for(var i=0;i<$scope.layers.length;i++){var layer=$scope.layers[i];layer.active&&null!==layer.mapHandle&&void 0!==layer.mapHandle&&($scope.map.removeLayer(layer.mapHandle),layer.mapHandle=null,layer.active=!1)}},clearServerSpecificLayers=function(serverName){for(var i=0;i<$scope.layers.length;i++){var layer=$scope.layers[i];layer.active&&null!==layer.mapHandle&&void 0!==layer.mapHandle&&layer.server===serverName&&removeLayer(layer)}},updateLayerSelections=function(serverName){for(var datasets=opStateService.getDatasets(),i=0;i<datasets.length;i++){for(var splitDataset=datasets[i].split(":"),dataset={name:splitDataset[2],workspace:splitDataset[1],server:splitDataset[0]},found=!1,j=0;j<$scope.layers.length;j++){var layer=$scope.layers[j];if(layer.name===dataset.name&&layer.workspace===dataset.workspace&&layer.server===dataset.server){layer.active||(layer.active=!0,$scope.datasetStateChanged(layer.uid)),found=!0;break}}found||dataset.server!==serverName||toaster.pop("error","Configuration Error","Unable able to find '"+dataset.name+"' in selected data source.")}};$scope.$on("refresh-server",function(event,args){var datasets=opStateService.getDatasets().slice(0),serverData=args,activeServers=opStateService.getActiveServer();-1!==activeServers.indexOf(serverData)&&($log.log("Refreshing server "+serverData.name),$scope.layerGroups.turnServerOff(serverData.name),$scope.updateLayers(!0,serverData.name),opStateService.setDatasets(datasets))}),$scope.getLatestData=function(layer){var stopTime=moment(layer.fields.time.stop.value),startTime=moment(stopTime).subtract(1,"d"),times=[startTime,stopTime];$rootScope.$broadcast("latest-data-button",times),$rootScope.$broadcast("latest-data-button-zoom",layer)},$scope.refreshSlider=function(){$timeout(function(){$scope.$broadcast("rzSliderForceRender")})},$scope.updateLayers=function(force,serverName){var server=opStateService.getServer(serverName),previousActiveServerCount=opStateService.getPreviouslyActiveServer().length;server.loading=!0,previousActiveServerCount>0?$scope.layersLoading=!1:$scope.layersLoading=!0,0===previousActiveServerCount&&clearLayers(),opLayerService.getLayers(force,serverName).then(function(layers){var server=opStateService.getServer(serverName);server.loading=!1,$scope.layersLoading=!1;for(var i=0;i<layers.length;i++){var layer=layers[i],hashString=layer.name+layer.workspace+layer.server,hash=hashString.hashCode();layer.uid=hash,layer.legendGraphic=opWebMapService.getLegendGraphicUrl(serverName,layer.workspace+":"+layer.name),layer.transparencySlider={value:100,floor:0,ceil:100}}groupLayers(layers,opConfig.recognizedTags),$scope.tags=$scope.tags.concat($scope.layerGroups.getGroupTags()),$scope.layers=$scope.layers.concat(layers)},function(reason){$scope.layersLoading=!1,toaster.pop("error","Configuration Error","Unable to retrieve layers... is your GeoServer running? Error: "+JSON.stringify(reason))}).then(function(){updateLayerSelections(serverName)})},$scope.initializeLayers=function(serverName){opStateService.getLeafletMap().then(function(map){$scope.map=map,$scope.updateLayers(!1,serverName)},function(reason){toaster.pop("error","Leaflet Error","Unable to initialize map...\n"+reason)})},this.resetLayerData=function(){$scope.layerGroups=new LayerGroups,$scope.tags=[],$scope.layers=[]},this.resetAndLoadLayers=function(){opStateService.setAllServersActive();var servers=opStateService.getActiveServer();if(this.resetLayerData(),void 0!==opStateService.getActiveServer())for(var i=0;i<servers.length;i++)servers[i].active=!0,$scope.initializeLayers(servers[i].name)},this.resetAndLoadLayers(),$scope.friendlyLayer=function(){var activeLayers=opStateService.getDatasets();return activeLayers.length+" enabled"},$scope.$on("servers-updated",function(event,args){var serversOn=args[0],serversOff=args[1];serversOn.forEach(function(server){$scope.turnServerOn(server.name)}),serversOff.forEach(function(server){$scope.turnServerOff(server.name)})}),$scope.turnServerOn=function(server){$scope.initializeLayers(server)},$scope.turnServerOff=function(server){$scope.layerGroups.turnServerOff(server),clearServerSpecificLayers(server)},opPopupWindow.on("resultsHeartbeat",function(win){opStateService.getResultsWindow()||(opStateService.setResultsWindow(win),opPopupWindow.broadcast(opStateService.getResultsWindow(),"updateFilters",_.filter($scope.layers,function(l){return _.contains(opStateService.getDatasets(),l.server+":"+l.workspace+":"+l.name)})))}),opPopupWindow.on("resultsInit",function(win){opStateService.setResultsWindow(win),opPopupWindow.broadcast(opStateService.getResultsWindow(),"updateFilters",_.filter($scope.layers,function(l){return _.contains(opStateService.getDatasets(),l.server+":"+l.workspace+":"+l.name)}))})}]),angular.module("opApp").directive("opLayer",function(){"use strict";return{scope:{},restrict:"E",templateUrl:"modules/sidebar/layer/opLayerSelect.html"}}),angular.module("opApp").factory("opCoordinateConversionService",function(){"use strict";var truncate=function(_value){return 0>_value?Math.ceil(_value):Math.floor(_value)},ddLatToDMSLat=function(lat){var degrees,minutes,seconds;return 90>=lat&&lat>=0?(degrees=truncate(lat),minutes=truncate(60*(lat-degrees)),seconds=(60*(60*(lat-degrees)-minutes)).toFixed(3),degrees+"°"+minutes+"'"+seconds+'"'):0>lat&&lat>=-90?(degrees=truncate(lat),minutes=truncate(60*(Math.abs(lat)-Math.abs(degrees))),seconds=(60*(60*(Math.abs(lat)-Math.abs(degrees))-minutes)).toFixed(3),degrees+"°"+minutes+"'"+seconds+'"'):"Invalid Latitude"},ddLonToDMSLon=function(lon){var degrees,minutes,seconds;return 180>=lon&&lon>=0?(degrees=truncate(lon),minutes=truncate(60*(lon-degrees)),seconds=(60*(60*(lon-degrees)-minutes)).toFixed(3),degrees+"°"+minutes+"'"+seconds+'"'):0>lon&&lon>=-180?(degrees=truncate(lon),minutes=truncate(60*(Math.abs(lon)-Math.abs(degrees))),seconds=(60*(60*(Math.abs(lon)-Math.abs(degrees))-minutes)).toFixed(3),degrees+"°"+minutes+"'"+seconds+'"'):"Invalid longitude"},dmsLatToDDLat=function(latDegree,latMinute,latSecond){var degrees,minutes,seconds;return parseFloat(latDegree)<0?(seconds=parseFloat(latSecond)/60,minutes=(parseFloat(latMinute)+seconds)/60,degrees=parseFloat(Math.abs(latDegree)),(-1*(degrees+minutes)).toFixed(6)):parseFloat(latDegree)>=0?(seconds=parseFloat(latSecond)/60,minutes=(parseFloat(latMinute)+seconds)/60,degrees=parseFloat(latDegree),(degrees+minutes).toFixed(6)):"Invalid Latitude"},dmsLonToDDLon=function(lonDegree,lonMinute,lonSecond){var degrees,minutes,seconds;return parseFloat(lonDegree)<0?(seconds=parseFloat(lonSecond)/60,minutes=(parseFloat(lonMinute)+seconds)/60,degrees=parseFloat(Math.abs(lonDegree)),(-1*(degrees+minutes)).toFixed(6)):parseFloat(lonDegree)>=0?(seconds=parseFloat(lonSecond)/60,minutes=(parseFloat(lonMinute)+seconds)/60,degrees=parseFloat(lonDegree),(degrees+minutes).toFixed(6)):"Invalid Longitude"},coordService={};return coordService.prepForDDBroadcast=function(lat,lon){if((lat||0===lat)&&lat>=-90&&90>=lat&&(lon||0===lon)&&lon>=-180&&180>=lon){var results={dms:[ddLatToDMSLat(lat),ddLonToDMSLon(lon)],dd:[lat,lon],mgrs:""};return lat>=-80&&84>=lat&&(results.mgrs=LLtoMGRS(lat,lon,5)),results}return lat>=-80&&84>=lat&&lon>=-180&&180>=lon?void 0:null},coordService.prepForDMSBroadcast=function(latDMS,lonDMS){var latDegree,latMinute,latSecond,lonDegree,lonMinute,lonSecond;if(latDMS=latDMS.replace(/[NS ]/gi,"").split(/[°'"]/),lonDMS=lonDMS.replace(/[EW ]/gi,"").split(/[°'"]/),latDMS.length>=3?(latDegree=parseInt(latDMS[0],10),latMinute=parseInt(latDMS[1],10),latSecond=parseFloat(latDMS[2],10)):1===latDMS.length&&(latDMS=latDMS[0].split("."),latSecond=parseFloat(latDMS[0].substr(-2)+"."+latDMS[1],10),latMinute=parseInt(latDMS[0].substr(-4,2),10),latDegree=parseInt(latDMS[0].slice(0,-4),10)),lonDMS.length>=3?(lonDegree=parseInt(lonDMS[0],10),lonMinute=parseInt(lonDMS[1],10),lonSecond=parseFloat(lonDMS[2],10)):1===lonDMS.length&&(lonDMS=lonDMS[0].split("."),lonSecond=parseFloat(lonDMS[0].substr(-2)+"."+lonDMS[1],10),lonMinute=parseInt(lonDMS[0].substr(-4,2),10),lonDegree=parseInt(lonDMS[0].slice(0,-4),10)),latDegree>=-90&&90>=latDegree&&latMinute>=0&&60>latMinute&&latSecond>=0&&60>latSecond&&lonMinute>=0&&60>lonMinute&&lonSecond>=0&&60>lonSecond&&lonDegree>=-180&&180>=lonDegree&&parseFloat(latDegree)-parseFloat(.01*latMinute)-parseFloat(1e-4*latSecond)>=-90&&parseFloat(latDegree)+parseFloat(.01*latMinute)+parseFloat(1e-4*latSecond)<=90&&parseFloat(lonDegree)-parseFloat(.01*lonMinute)-parseFloat(1e-4*lonSecond)>=-180&&parseFloat(lonDegree)+parseFloat(.01*lonMinute)+parseFloat(1e-4*lonSecond)<=180){var results={dms:[latDegree+"°"+latMinute+"'"+latSecond+'"',lonDegree+"°"+lonMinute+"'"+lonSecond+'"'],dd:[dmsLatToDDLat(latDegree,latMinute,latSecond),dmsLonToDDLon(lonDegree,lonMinute,lonSecond)],mgrs:""};return results.dd[0]>=-80&&results.dd[0]<=84&&(results.mgrs=LLtoMGRS(results.dd[0],results.dd[1],5)),results}return null},coordService.prepForMGRSBroadcast=function(MGRS){var latLon=[];return USNGtoLL(MGRS+"",latLon),isNaN(latLon[0])||isNaN(latLon[1])?null:(latLon[0]=Math.round(1e5*latLon[0])/1e5,latLon[1]=Math.round(1e5*latLon[1])/1e5,{mgrs:MGRS,dd:latLon,dms:[ddLatToDMSLat(latLon[0]),ddLonToDMSLon(latLon[1])]})},coordService.isValidLatDD=function(lat){return(lat||0===lat||""===lat)&&lat>=-90&&90>=lat},coordService.isValidLonDD=function(lon){return(lon||0===lon||""===lon)&&lon>=-180&&180>=lon},coordService.isValidLatDMS=function(latDMS){if(""===latDMS)return!0;var latDegree,latMinute,latSecond;return latDMS=latDMS.replace(/[NS ]/gi,"").split(/[°'"]/),latDMS.length>=3?(latDegree=parseInt(latDMS[0],10),latMinute=parseInt(latDMS[1],10),latSecond=parseFloat(latDMS[2],10)):1===latDMS.length&&(latDMS=latDMS[0].split("."),latSecond=parseFloat(latDMS[0].substr(-2)+"."+latDMS[1],10),latMinute=parseInt(latDMS[0].substr(-4,2),10),latDegree=parseInt(latDMS[0].slice(0,-4),10)),latDegree>=-90&&90>=latDegree&&latMinute>=0&&60>latMinute&&latSecond>=0&&60>latSecond&&parseFloat(latDegree)-parseFloat(.01*latMinute)-parseFloat(1e-4*latSecond)>=-90&&parseFloat(latDegree)+parseFloat(.01*latMinute)+parseFloat(1e-4*latSecond)<=90},coordService.isValidLonDMS=function(lonDMS){if(""===lonDMS)return!0;var lonDegree,lonMinute,lonSecond;return lonDMS=lonDMS.replace(/[EW ]/gi,"").split(/[°'"]/),lonDMS.length>=3?(lonDegree=parseInt(lonDMS[0],10),lonMinute=parseInt(lonDMS[1],10),lonSecond=parseFloat(lonDMS[2],10)):1===lonDMS.length&&(lonDMS=lonDMS[0].split("."),lonSecond=parseFloat(lonDMS[0].substr(-2)+"."+lonDMS[1],10),lonMinute=parseInt(lonDMS[0].substr(-4,2),10),lonDegree=parseInt(lonDMS[0].slice(0,-4),10)),lonMinute>=0&&60>lonMinute&&lonSecond>=0&&60>lonSecond&&lonDegree>=-180&&180>=lonDegree&&parseFloat(lonDegree)-parseFloat(.01*lonMinute)-parseFloat(1e-4*lonSecond)>=-180&&parseFloat(lonDegree)+parseFloat(.01*lonMinute)+parseFloat(1e-4*lonSecond)<=180},coordService.isValidMGRS=function(mgrs){return""===mgrs?!0:(mgrs+="",!!mgrs.match(/^([0-5][0-9][C-X]|60[C-X]|[ABYZ])[A-Z]{2}\d{4,14}$/i))},coordService}),angular.module("opApp").directive("opLocation",["$q","$http","$filter","$log","$rootScope","$timeout","opCoordinateConversionService","opStateService","opConfig","Upload",function($q,$http,$filter,$log,$rootScope,$timeout,opCoordinateConversionService,opStateService,opConfig,Upload){"use strict";return{templateUrl:"modules/sidebar/location/opLocation.html",restrict:"EA",scope:{locationSelect:"=",country:"="},link:function(scope){scope.expanded=!1,scope.model={mapChanged:!1,
locationKey:"world",format:"dd",latN:"",latS:"",lonE:"",lonW:"",lat:"",lon:"",dist:100,latNValid:!0,latSValid:!0,lonEValid:!0,lonWValid:!0,latValid:!0,lonValid:!0,distValid:!0,countries:"",selectedCountries:{},shapeGeoJson:"",shapeToGeoUrl:opConfig.shapeToGeoUrl};var getCountries=function(){var deferred=$q.defer(),url=opConfig.countryDataUrl;return $http.get(url).then(function(result){$log.log("Successfully retrieved list of countries."),deferred.resolve(result)},function(reason){$log.log("Error retrieving  list of countries.  Check countryDataUrl ?"),deferred.reject(reason)}),deferred.promise},parseLocation=function(location){_.isArray(location)?3===location.length?(scope.model.lat=location[0],scope.model.lon=location[1],scope.model.dist=location[2],scope.model.locationKey="center"):"-90,-180,90,180"!==location.join(",")||scope.country?scope.country?scope.model.locationKey="country":2===location.length?(scope.model.latS=location[0][0],scope.model.lonW=location[0][1],scope.model.latN=location[1][0],scope.model.lonE=location[1][1],scope.model.locationKey="bounds"):scope.locationKey="shape":scope.model.locationKey="world":scope.model.locationKey="world"};scope.setFormat=function(newFormat){var ne,sw,coords;switch(scope.model.format){case"dd":sw=opCoordinateConversionService.prepForDDBroadcast(scope.model.latS,scope.model.lonW),ne=opCoordinateConversionService.prepForDDBroadcast(scope.model.latN,scope.model.lonE),coords=opCoordinateConversionService.prepForDDBroadcast(scope.model.lat,scope.model.lon);break;case"dms":sw=opCoordinateConversionService.prepForDMSBroadcast(scope.model.latS,scope.model.lonW),ne=opCoordinateConversionService.prepForDMSBroadcast(scope.model.latN,scope.model.lonE),coords=opCoordinateConversionService.prepForDMSBroadcast(scope.model.lat,scope.model.lon);break;case"mgrs":scope.model.mgrsSW&&(sw=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrsSW)),scope.model.mgrsNE&&(ne=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrsNE)),scope.model.mgrs&&(coords=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrs))}switch(scope.model.latS="",scope.model.lonW="",scope.model.latN="",scope.model.lonE="",scope.model.lat="",scope.model.lon="",newFormat){case"dd":sw&&ne&&(scope.model.latS=sw.dd[0],scope.model.lonW=sw.dd[1],scope.model.latN=ne.dd[0],scope.model.lonE=ne.dd[1]),coords&&(scope.model.lat=coords.dd[0],scope.model.lon=coords.dd[1]);break;case"dms":sw&&ne&&(scope.model.latS=sw.dms[0],scope.model.lonW=sw.dms[1],scope.model.latN=ne.dms[0],scope.model.lonE=ne.dms[1]),coords&&(scope.model.lat=coords.dms[0],scope.model.lon=coords.dms[1]);break;case"mgrs":sw&&ne&&(scope.model.mgrsSW=sw.mgrs||"",scope.model.mgrsNE=ne.mgrs||""),coords&&(scope.model.mgrs=coords.mgrs||"")}scope.model.format=newFormat},scope.uploadFile=function(file){var upload=Upload.upload({url:"/shapes/?view=geojson",data:{file:file}});upload.then(function(resp){$log.log(JSON.stringify(resp.data)),scope.model.shapeGeoJson=JSON.stringify(resp.data),opStateService.setAttributeBBoxFile(resp.data)},function(resp){scope.model.shapeGeoJson="Error converting shapefile.",$log.log("error: "+resp.status)})},scope.setLocationWorld=function(){scope.locationSelect="-180,-90,180,90",scope.model.locationKey="world",scope.country="",$log.log("locationString: "+scope.locationSelect),scope.resetCountrySelection(),opStateService.setAttributeBBoxText(scope.locationSelect)},scope.setLocationMap=function(){scope.model.locationKey="map",scope.country="",scope.model.mapChanged=!1,scope.resetCountrySelection(),opStateService.setAttributeBBoxCurrentBounds()},scope.addCountrySelection=function(country){var countryString=$.map(scope.model.selectedCountries.selected,function(selected){return selected.id}).join(",");scope.model.locationSelect="country:"+countryString,opStateService.setAttributeBBoxCountry(country,scope.model.locationSelect),$log.log("Adding country filter of: "+country.properties.name)},scope.resetCountrySelection=function(){scope.model.selectedCountries={},$rootScope.$broadcast("remove-country-selections")},scope.removeCountrySelection=function(country){opStateService.removeAttributeBBoxCountry(country),$log.log("Removing country filter of: "+country.properties.name)},scope.setLocationBounds=function(){if("center"!==scope.model.locationKey){var sw,ne;switch(scope.model.format){case"dd":scope.model.latSValid=opCoordinateConversionService.isValidLatDD(scope.model.latS),scope.model.lonWValid=opCoordinateConversionService.isValidLonDD(scope.model.lonW),scope.model.latNValid=opCoordinateConversionService.isValidLatDD(scope.model.latN),scope.model.lonEValid=opCoordinateConversionService.isValidLonDD(scope.model.lonE);break;case"dms":scope.model.latSValid=opCoordinateConversionService.isValidLatDMS(scope.model.latS),scope.model.lonWValid=opCoordinateConversionService.isValidLonDMS(scope.model.lonW),scope.model.latNValid=opCoordinateConversionService.isValidLatDMS(scope.model.latN),scope.model.lonEValid=opCoordinateConversionService.isValidLonDMS(scope.model.lonE);break;case"mgrs":scope.model.mgrsSWValid=opCoordinateConversionService.isValidMGRS(scope.model.mgrsSW),scope.model.mgrsNEValid=opCoordinateConversionService.isValidMGRS(scope.model.mgrsNE)}if(""!==scope.model.latN&&""!==scope.model.latS&&""!==scope.model.lonE&&""!==scope.model.lonW||scope.model.mgrsNE&&scope.model.mgrsSW&&"mgrs"===scope.model.format){switch(scope.model.lat="",scope.model.lon="",scope.model.mgrs="",scope.country="",scope.model.format){case"dd":scope.model.latSValid&&scope.model.lonWValid&&scope.model.latNValid&&scope.model.lonEValid&&(scope.locationSelect=String(scope.model.lonW)+","+String(scope.model.latN)+","+String(scope.model.lonE)+","+String(scope.model.latS));break;case"dms":sw=opCoordinateConversionService.prepForDMSBroadcast(scope.model.latS,scope.model.lonW),ne=opCoordinateConversionService.prepForDMSBroadcast(scope.model.latN,scope.model.lonE),sw&&ne&&(scope.locationSelect=String(scope.model.lonW)+","+String(scope.model.latN)+","+String(scope.model.lonE)+","+String(scope.model.latS));break;case"mgrs":sw=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrsSW),ne=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrsNE),sw&&ne&&(scope.model.latN=ne.dd[0],scope.model.lonE=ne.dd[1],scope.model.latS=sw.dd[0],scope.model.lonW=sw.dd[1],scope.locationSelect=String(scope.model.lonW)+","+String(scope.model.latN)+","+String(scope.model.lonE)+","+String(scope.model.latS))}"map"!==scope.model.locationKey&&(scope.model.locationKey="bounds"),scope.resetCountrySelection(),opStateService.setAttributeBBoxText(scope.locationSelect)}}},scope.setLocationCenter=function(){if("bounds"!==scope.model.locationKey){var lat,lng,coords,dist=scope.model.dist;switch(scope.model.format){case"dd":scope.model.latValid=opCoordinateConversionService.isValidLatDD(scope.model.lat),scope.model.lonValid=opCoordinateConversionService.isValidLonDD(scope.model.lon),scope.model.latValid&&scope.model.lonValid&&(lat=scope.model.lat,lng=scope.model.lon);break;case"dms":scope.model.latValid=opCoordinateConversionService.isValidLatDMS(scope.model.lat),scope.model.lonValid=opCoordinateConversionService.isValidLonDMS(scope.model.lon),coords=opCoordinateConversionService.prepForDMSBroadcast(scope.model.lat,scope.model.lon),coords&&(lat=coords.dd[0],lng=coords.dd[1]);break;case"mgrs":scope.model.mgrsValid=opCoordinateConversionService.isValidMGRS(scope.model.mgrs),coords=opCoordinateConversionService.prepForMGRSBroadcast(scope.model.mgrs),coords&&(lat=coords.dd[0],lng=coords.dd[1])}if(lat&&lng&&dist){scope.country="",scope.model.latN="",scope.model.latS="",scope.model.lonE="",scope.model.lonW="",scope.model.mgrsSW="",scope.model.mgrsNE="";var nwBearing=1.75*Math.PI,seBearing=.75*Math.PI,R=6371;lat=lat/180*Math.PI,lng=lng/180*Math.PI;var lat1=Math.asin(Math.sin(lat)*Math.cos(dist/R)+Math.cos(lat)*Math.sin(dist/R)*Math.cos(nwBearing)),lon1=lng+Math.atan2(Math.sin(nwBearing)*Math.sin(dist/R)*Math.cos(lat),Math.cos(dist/R)-Math.sin(lat)*Math.sin(lat1)),lat2=Math.asin(Math.sin(lat)*Math.cos(dist/R)+Math.cos(lat)*Math.sin(dist/R)*Math.cos(seBearing)),lon2=lng+Math.atan2(Math.sin(seBearing)*Math.sin(dist/R)*Math.cos(lat),Math.cos(dist/R)-Math.sin(lat)*Math.sin(lat2)),finalLat1=180*lat1/Math.PI,finalLat2=180*lat2/Math.PI,finalLon1=180*lon1/Math.PI,finalLon2=180*lon2/Math.PI;scope.locationSelect=String(finalLon1)+","+String(finalLat2)+","+String(finalLon2)+","+String(finalLat1),scope.locationKey="center",scope.resetCountrySelection(),opStateService.setAttributeBBoxText(scope.locationSelect)}}},scope.setLocationDraw=function(){scope.model.locationKey="draw"},scope.$watch("model.latN",scope.setLocationBounds),scope.$watch("model.latS",scope.setLocationBounds),scope.$watch("model.lonE",scope.setLocationBounds),scope.$watch("model.lonW",scope.setLocationBounds),scope.$watch("model.mgrsSW",scope.setLocationBounds),scope.$watch("model.mgrsNE",scope.setLocationBounds),scope.$watch("model.lonW",scope.setLocationBounds),scope.$watch("model.lat",scope.setLocationCenter),scope.$watch("model.lon",scope.setLocationCenter),scope.$watch("model.mgrs",scope.setLocationCenter),scope.$watch("model.dist",scope.setLocationCenter),scope.$watch("country",scope.setLocationCountry),scope.$on("manual-draw-started",function(){"draw"!==scope.model.locationKey&&(scope.expanded=!0),scope.resetCountrySelection(),scope.setLocationDraw()}),scope.$on("map-changed",function(){scope.model.mapChanged=!0}),scope.clearManualDraw=function(){$rootScope.$broadcast("drawClear")},scope.$on("box-bounds-from-route",function(event,coords){var west=Number(coords[0]),north=Number(coords[1]),east=Number(coords[2]),south=Number(coords[3]);north>90&&(north=90),-90>south&&(south=-90),east>180&&(east=180),-180>west&&(west=-180),scope.model.latN=north,scope.model.latS=south,scope.model.lonW=west,scope.model.lonE=east,scope.setLocationBounds()}),scope.$on("country-bounds-from-route",function(event,countries){scope.model.locationKey="country",scope.model.selectedCountries.selected=[];for(var i=0;i<countries.length;i++)for(var j=0;j<scope.model.countries.length;j++)scope.model.countries[j].id===countries[i]&&(scope.model.selectedCountries.selected.push(scope.model.countries[j]),scope.addCountrySelection(scope.model.countries[j]))}),scope.$on("default-from-route",function(){scope.model.locationKey="world",scope.setLocationWorld()}),scope.friendlyLocation=function(){return scope.model.locationKey.charAt(0).toUpperCase()+scope.model.locationKey.slice(1)},parseLocation(scope.locationSelect),getCountries().then(function(result){scope.model.countries=result.data.features})}}}]),angular.module("opApp").controller("opDateTimeController",["$scope","$timeout","toaster","opConfig","opStateService","$log",function($scope,$timeout,toaster,opConfig,opStateService,$log){"use strict";var dateRangeCreated=!1;$scope.initializing=!1;var drpOptions={minDate:moment("1970-01-01T00:00:00 Z").utc(),maxDate:moment().utc().add("days",1),showDropdowns:!0,timePicker:!0,timePicker12Hour:!1,timePickerIncrement:1,opens:"right",format:"MM/DD/YYYY HH:mm:ss",startDate:$scope.dateRange?$scope.dateRange[0]:void 0,endDate:$scope.dateRange?$scope.dateRange[1]:void 0};$scope.dateExpanded=!1,$scope.valid={duration:!1,startRange:!1,endRange:!1},$scope.validationError="sup",$scope.dateKey="duration",$scope.duration="1",$scope.durationKey="d",$scope.startDate=moment.utc().startOf("d").format("MM/DD/YYYY"),$scope.startTime=moment.utc().startOf("d").format("HH:mm:ss"),$scope.endDate=moment.utc().startOf("d").format("MM/DD/YYYY"),$scope.endTime=moment.utc().endOf("d").format("HH:mm:ss"),$scope.rangeTimeout=!1,$scope.datelist=opConfig.dateList;var oldRange,oldStart="",oldEnd="",dateFormat="MM/DD/YY",parseFormat="MM/DD/YYYYHH:mm:ss",enforceDateRangeLimits=function(newDateRange,previousDateRange,maxDaysBack){var compareFormat="MM/DD/YYYYHH:mm:ss";if(Math.abs(newDateRange[0].diff(newDateRange[1],"days",!0))>maxDaysBack){var message;angular.isDefined(previousDateRange)&&(previousDateRange[0].format(compareFormat)!==newDateRange[0].format(compareFormat)&&previousDateRange[1].format(compareFormat)===newDateRange[1].format(compareFormat)?(newDateRange[1]=moment(newDateRange[0]).add("days",maxDaysBack),message="Start date is more than "+maxDaysBack+" days before End Date.  End Date has been adjusted to not exceed this period.",$log.log(message),toaster.pop("note",message)):previousDateRange[0].format(compareFormat)===newDateRange[0].format(compareFormat)&&previousDateRange[1].format(compareFormat)!==newDateRange[1].format(compareFormat)&&(newDateRange[0]=moment(newDateRange[1]).subtract("days",maxDaysBack),message="End date is more than "+opConfig.maxDaysBack+" days after Start Date.  Start Date has been adjusted to not exceed this period.",$log.log(message),toaster.pop("note",message)))}},updateTemporalFilters=function(){$scope.initializing=!0;var filter=opStateService.getTemporalFilter();"range"===filter.type?($scope.setDateRange([filter.start,filter.stop]),drpOptions.startDate=$scope.dateRange[0],drpOptions.endDate=$scope.dateRange[1],oldRange=$scope.dateRange):"duration"===filter.type&&($scope.durationKey=filter.interval,$scope.duration=filter.value,$scope.setDuration()),$scope.initializing=!1};$scope.$watch("dateRange",function(){_.isArray($scope.dateRange)&&2===$scope.dateRange.length&&$scope.dateRange[0].isValid&&$scope.dateRange[1].isValid&&$scope.dateRange[0].isValid()&&$scope.dateRange[1].isValid()&&(oldStart!==$scope.dateRange[0].format(parseFormat)||oldEnd!==$scope.dateRange[1].format(parseFormat))&&(enforceDateRangeLimits($scope.dateRange,oldRange,opConfig.maxDaysBack),$scope.startDate=$scope.dateRange[0].format("MM/DD/YYYY"),$scope.startTime=$scope.dateRange[0].format("HH:mm:ss"),$scope.endDate=$scope.dateRange[1].format("MM/DD/YYYY"),$scope.endTime=$scope.dateRange[1].format("HH:mm:ss"),oldStart=$scope.startDate+$scope.startTime,oldEnd=$scope.endDate+$scope.endTime,dateRangeCreated&&(angular.element(".start, .end").daterangepicker({action:"update",startDate:$scope.dateRange[0],endDate:$scope.dateRange[1]}),$scope.setDateRange($scope.dateRange)))}),$scope.setDateRange=function(val){$scope.dateKey="range",val&&val[0]&&val[0].isValid()&&val[1]&&val[1].isValid()?$scope.dateRange=val:$scope.dateRange=[moment.utc($scope.startDate+" "+$scope.startTime,"MM/DD/YYYY HH:mm:ss"),moment.utc($scope.endDate+" "+$scope.endTime,"MM/DD/YYYY HH:mm:ss")],$scope.dateRange[0].isValid()&&$scope.dateRange[1].isValid()&&!$scope.initializing&&opStateService.setTimeRange($scope.dateRange[0],$scope.dateRange[1])};var isInt=function(value){return!isNaN(value)&&parseInt(Number(value))==value};$scope.setDuration=function(){if($scope.dateKey="duration",isInt($scope.duration)&&1===$scope.durationKey.length){var max,unit,initialValue=$scope.duration;switch($scope.durationKey){case"h":initialValue>24*opConfig.maxDaysBack&&(max=24*opConfig.maxDaysBack,unit="hours");break;case"d":initialValue>opConfig.maxDaysBack&&(max=opConfig.maxDaysBack,unit="days");break;case"w":initialValue>opConfig.maxDaysBack/7&&(max=Math.floor(opConfig.maxDaysBack/7),unit="weeks")}if(max)return $scope.validationError="Please reduce duration value to be less than or equal to "+max+" "+unit+".",$scope.valid.duration=!1,$log.log($scope.validationError),void toaster.pop("error",$scope.validationError);$scope.validationError="",$scope.valid.duration=!0,$scope.initializing||opStateService.setDuration($scope.durationKey,$scope.duration)}else $scope.validationError="Please enter whole number value for duration",$scope.valid.duration=!1,$log.log($scope.validationError)},$scope.setDurationKey=function(newKey){$scope.durationKey=newKey,$scope.setDuration()},$scope.friendlyDate=function(){if("duration"===$scope.dateKey){var rangeName,names={h:" Hour",d:" Day",w:" Week"},num=parseInt($scope.duration,10);return rangeName="Last",1===num?rangeName+names[$scope.durationKey]:rangeName+" "+num+names[$scope.durationKey]+"s"}return"range"===$scope.dateKey?$scope.dateRange[0].format(dateFormat)+" - "+$scope.dateRange[1].format(dateFormat):void 0},$scope.setDateKey=function(key){switch(key){case"duration":$scope.setDuration();break;case"range":$scope.setDateRange()}},$scope.updateStart=function(){$scope.rangeTimeout&&$timeout.cancel($scope.rangeTimeout),$scope.rangeTimeout=$timeout(function(){if("range"===$scope.dateKey&&oldStart!==$scope.startDate+$scope.startTime){var date=moment.utc($scope.startDate+$scope.startTime,parseFormat);date.isValid()?(oldStart=$scope.startDate+$scope.startTime,$scope.dateRange=[date,$scope.dateRange[1]],$scope.valid.startRange=!0,enforceDateRangeLimits($scope.dateRange,oldRange,opConfig.maxDaysBack),$scope.initializing||opStateService.setTimeRange($scope.dateRange[0],$scope.dateRange[1])):$scope.valid.startRange=!1}},1e3)},$scope.updateEnd=function(){$scope.rangeTimeout&&$timeout.cancel($scope.rangeTimeout),$scope.rangeTimeout=$timeout(function(){if("range"===$scope.dateKey&&oldEnd!==$scope.endDate+$scope.endTime){var date=moment.utc($scope.endDate+$scope.endTime,parseFormat);date.isValid()||!$scope.endDate&&!$scope.endTime?(oldEnd=$scope.endDate+$scope.endTime,$scope.dateRange=[$scope.dateRange[0],date],$scope.valid.endRange=!0,enforceDateRangeLimits($scope.dateRange,oldRange,opConfig.maxDaysBack),$scope.initializing||opStateService.setTimeRange($scope.dateRange[0],$scope.dateRange[1])):$scope.valid.endRange=!1}},1e3)},$scope.advanceDateRange=function(){var startDate=moment($scope.dateRange[0]),stopDate=moment($scope.dateRange[1]);if(startDate.isValid()&&stopDate.isValid()){var diff=Math.abs(startDate.diff(stopDate));startDate=moment(stopDate),stopDate.add("ms",diff),$scope.setDateRange([startDate,stopDate])}},$scope.retreatDateRange=function(){var startDate=moment($scope.dateRange[0]),stopDate=moment($scope.dateRange[1]);if(startDate.isValid()&&stopDate.isValid()){var diff=Math.abs(startDate.diff(stopDate));stopDate=moment(startDate),startDate.subtract("ms",diff),$scope.setDateRange([startDate,stopDate])}};var updateDatePicker=function(start,end){$scope.dateRange=[start,end],$scope.$apply()};$scope.$on("filters-updated",function(){updateTemporalFilters()}),$scope.$on("latest-data-button",function(event,times){$scope.setDateRange(times)});var initialize=function(){$log.log("Starting up opDateTimeController..."),updateTemporalFilters(),$timeout(function(){angular.element(".start").daterangepicker(_.extend(drpOptions,{onlyShow:"start"}),updateDatePicker),angular.element(".end").daterangepicker(_.extend(drpOptions,{onlyShow:"end"}),updateDatePicker),dateRangeCreated=!0},1e3)};initialize()}]),angular.module("opApp").directive("opDateTime",function(){"use strict";return{scope:{},templateUrl:"modules/sidebar/temporal/opDateRange.html",restrict:"E"}});
//# sourceMappingURL=data:application/json;base64,
